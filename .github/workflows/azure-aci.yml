name: Deploy to Azure Container Instances

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  AZURE_CONTAINER_REGISTRY: sensusregistry.azurecr.io
  CONTAINER_NAME: sensus-app
  RESOURCE_GROUP: sensus-rg
  LOCATION: eastus

jobs:
  build-and-push:
    name: Build and Push to ACR
    runs-on: ubuntu-latest
    outputs:
      image-uri: ${{ steps.build-image.outputs.image }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Build and push image to ACR
        id: build-image
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.AZURE_CONTAINER_REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
          
      - name: Build and push Docker image
        run: |
          # Build image
          docker build -t ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.CONTAINER_NAME }}:${{ github.sha }} .
          docker push ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.CONTAINER_NAME }}:${{ github.sha }}
          
          # Set output
          echo "image=${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.CONTAINER_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT
          
      - name: Scan image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.build-image.outputs.image }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to ACI Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Deploy to Azure Container Instances
        uses: azure/aci-deploy@v1
        with:
          resource-group: ${{ env.RESOURCE_GROUP }}
          dns-name-label: sensus-staging-${{ github.run_number }}
          image: ${{ needs.build-and-push.outputs.image-uri }}
          name: sensus-staging
          location: ${{ env.LOCATION }}
          ports: 3000
          environment-variables: |
            NODE_ENV=staging
            PORT=3000
            APP_NAME=Sensus
            APP_VERSION=${{ github.sha }}
            APP_URL=https://sensus-staging-${{ github.run_number }}.${{ env.LOCATION }}.azurecontainer.io
            API_URL=https://api-sensus-staging-${{ github.run_number }}.${{ env.LOCATION }}.azurecontainer.io
          secure-environment-variables: |
            FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}
            FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN }}
            FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}
            FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }}
            FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
            FIREBASE_APP_ID=${{ secrets.FIREBASE_APP_ID }}
            FIREBASE_MEASUREMENT_ID=${{ secrets.FIREBASE_MEASUREMENT_ID }}
            GA_TRACKING_ID=${{ secrets.GA_TRACKING_ID }}
            STRIPE_PUBLIC_KEY=${{ secrets.STRIPE_PUBLIC_KEY }}
            SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY }}
            SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL }}
            REDIS_URL=${{ secrets.REDIS_URL }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            ENCRYPTION_KEY=${{ secrets.ENCRYPTION_KEY }}
            
      - name: Wait for deployment
        run: |
          # Wait for container to be running
          az container show --resource-group ${{ env.RESOURCE_GROUP }} --name sensus-staging --query "instanceView.state" --output tsv
          
      - name: Run health checks
        run: |
          # Get the FQDN
          FQDN=$(az container show --resource-group ${{ env.RESOURCE_GROUP }} --name sensus-staging --query "ipAddress.fqdn" --output tsv)
          
          # Run health check
          curl -f https://$FQDN:3000/health || exit 1
          
      - name: Notify staging deployment
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: 'ðŸš€ Sensus deployed to ACI staging successfully!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-production:
    name: Deploy to ACI Production
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Deploy to Azure Container Instances
        uses: azure/aci-deploy@v1
        with:
          resource-group: ${{ env.RESOURCE_GROUP }}
          dns-name-label: sensus-production
          image: ${{ needs.build-and-push.outputs.image-uri }}
          name: sensus-production
          location: ${{ env.LOCATION }}
          ports: 3000
          cpu: 2
          memory: 4
          environment-variables: |
            NODE_ENV=production
            PORT=3000
            APP_NAME=Sensus
            APP_VERSION=${{ github.sha }}
            APP_URL=https://sensus.app
            API_URL=https://api.sensus.app
            CORS_ORIGIN=https://sensus.app
            CDN_URL=https://cdn.sensus.app
            CDN_ENABLED=true
            LOG_LEVEL=info
            CACHE_TTL=3600
            RATE_LIMIT_WINDOW=900000
            RATE_LIMIT_MAX=100
            PWA_ENABLED=true
            NOTIFICATIONS_ENABLED=true
            OFFLINE_MODE_ENABLED=true
            DARK_MODE_ENABLED=true
            BETA_FEATURES_ENABLED=false
          secure-environment-variables: |
            FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}
            FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN }}
            FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}
            FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }}
            FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
            FIREBASE_APP_ID=${{ secrets.FIREBASE_APP_ID }}
            FIREBASE_MEASUREMENT_ID=${{ secrets.FIREBASE_MEASUREMENT_ID }}
            GA_TRACKING_ID=${{ secrets.GA_TRACKING_ID }}
            HOTJAR_SITE_ID=${{ secrets.HOTJAR_SITE_ID }}
            MIXPANEL_TOKEN=${{ secrets.MIXPANEL_TOKEN }}
            STRIPE_PUBLIC_KEY=${{ secrets.STRIPE_PUBLIC_KEY }}
            STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}
            STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }}
            SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY }}
            SENDGRID_FROM_EMAIL=${{ secrets.SENDGRID_FROM_EMAIL }}
            SENDGRID_FROM_NAME=${{ secrets.SENDGRID_FROM_NAME }}
            SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL }}
            DISCORD_WEBHOOK_URL=${{ secrets.DISCORD_WEBHOOK_URL }}
            REDIS_URL=${{ secrets.REDIS_URL }}
            REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            ENCRYPTION_KEY=${{ secrets.ENCRYPTION_KEY }}
            GRAFANA_PASSWORD=${{ secrets.GRAFANA_PASSWORD }}
            PROMETHEUS_RETENTION=${{ secrets.PROMETHEUS_RETENTION }}
            
      - name: Wait for deployment
        run: |
          # Wait for container to be running
          az container show --resource-group ${{ env.RESOURCE_GROUP }} --name sensus-production --query "instanceView.state" --output tsv
          
      - name: Run production health checks
        run: |
          # Get the FQDN
          FQDN=$(az container show --resource-group ${{ env.RESOURCE_GROUP }} --name sensus-production --query "ipAddress.fqdn" --output tsv)
          
          # Run health check
          curl -f https://$FQDN:3000/health || exit 1
          
          # Run production tests
          curl -f https://$FQDN:3000/api/health || exit 1
          
      - name: Notify production deployment
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: 'ðŸŽ‰ Sensus deployed to ACI production successfully!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
      - name: Create GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            ## Changes
            - Automated deployment from commit ${{ github.sha }}
            - ACI Image: ${{ needs.build-and-push.outputs.image-uri }}
            - Environment: Production
            
            ## Deployment Details
            - **Resource Group**: ${{ env.RESOURCE_GROUP }}
            - **Container Name**: sensus-production
            - **Location**: ${{ env.LOCATION }}
            - **Deployed At**: ${{ github.event.head_commit.timestamp }}
            - **Deployed By**: ${{ github.actor }}
          draft: false
          prerelease: false
