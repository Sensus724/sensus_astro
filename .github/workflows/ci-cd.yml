name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 🔍 Análisis de código
  code-analysis:
    name: 🔍 Análisis de código
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Instalar dependencias
        run: |
          npm ci
          cd backend && npm ci
          cd ../cypress && npm ci

      - name: 🔍 ESLint
        run: |
          npm run lint
          cd backend && npm run lint

      - name: 🎨 Prettier
        run: |
          npm run format:check
          cd backend && npm run format:check

      - name: 🔒 Security audit
        run: |
          npm audit --audit-level moderate
          cd backend && npm audit --audit-level moderate

      - name: 📊 SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # 🧪 Testing
  test:
    name: 🧪 Testing
    runs-on: ubuntu-latest
    needs: code-analysis
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 📥 Instalar dependencias
        run: |
          npm ci
          cd backend && npm ci
          cd ../cypress && npm ci

      - name: 🧪 Unit tests
        run: |
          npm run test:unit
          cd backend && npm run test:unit

      - name: 🧪 Integration tests
        run: |
          cd backend && npm run test:integration

      - name: 📊 Coverage report
        run: |
          npm run test:coverage
          cd backend && npm run test:coverage

      - name: 📤 Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info,./backend/coverage/lcov.info

  # 🎭 E2E Testing
  e2e-test:
    name: 🎭 E2E Testing
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Instalar dependencias
        run: |
          npm ci
          cd backend && npm ci
          cd ../cypress && npm ci

      - name: 🏗️ Build aplicación
        run: |
          npm run build
          cd backend && npm run build

      - name: 🚀 Start backend
        run: |
          cd backend
          npm start &
          sleep 10

      - name: 🎭 Run Cypress tests
        run: |
          cd cypress
          npm run cypress:run

      - name: 📤 Upload Cypress videos
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-videos
          path: cypress/videos/

      - name: 📤 Upload Cypress screenshots
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots/

  # 🏗️ Build
  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    needs: [test, e2e-test]
    outputs:
      frontend-hash: ${{ steps.frontend-hash.outputs.hash }}
      backend-hash: ${{ steps.backend-hash.outputs.hash }}
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Instalar dependencias
        run: |
          npm ci
          cd backend && npm ci

      - name: 🏗️ Build frontend
        run: npm run build

      - name: 🏗️ Build backend
        run: |
          cd backend
          npm run build

      - name: 📊 Frontend hash
        id: frontend-hash
        run: echo "hash=$(find dist -type f -name "*.js" -o -name "*.css" | xargs md5sum | md5sum | cut -d' ' -f1)" >> $GITHUB_OUTPUT

      - name: 📊 Backend hash
        id: backend-hash
        run: echo "hash=$(find backend/dist -type f -name "*.js" | xargs md5sum | md5sum | cut -d' ' -f1)" >> $GITHUB_OUTPUT

  # 🐳 Docker
  docker:
    name: 🐳 Docker
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: 🏗️ Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./config/docker/Dockerfile.frontend
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🏗️ Build and push backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./config/docker/Dockerfile.backend
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 🚀 Deploy Staging
  deploy-staging:
    name: 🚀 Deploy Staging
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4

      - name: 🚀 Deploy to staging
        run: |
          echo "🚀 Deploying to staging..."
          # Aquí iría el comando de deploy real
          # kubectl apply -f config/k8s/staging/
          # helm upgrade --install sensus-staging ./config/helm/

  # 🚀 Deploy Production
  deploy-production:
    name: 🚀 Deploy Production
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4

      - name: 🚀 Deploy to production
        run: |
          echo "🚀 Deploying to production..."
          # Aquí iría el comando de deploy real
          # kubectl apply -f config/k8s/production/
          # helm upgrade --install sensus-production ./config/helm/

      - name: 🔔 Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # 🔒 Security Scan
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4

      - name: 🔒 Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 🔒 Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # 📊 Performance Test
  performance-test:
    name: 📊 Performance Test
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📥 Instalar dependencias
        run: npm ci

      - name: 📊 Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun

      - name: 📊 K6 performance test
        run: |
          npm install -g k6
          k6 run tests/performance/load-test.js

  # 🧹 Cleanup
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: 🧹 Cleanup old images
        run: |
          echo "🧹 Cleaning up old Docker images..."
          # Aquí iría la limpieza de imágenes antiguas
