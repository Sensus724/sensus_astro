---
export interface Props {
  images: Array<{
    src: string;
    alt: string;
    caption?: string;
    thumbnail?: string;
  }>;
  class?: string;
  showThumbnails?: boolean;
  showCaptions?: boolean;
  autoplay?: boolean;
  interval?: number;
  showControls?: boolean;
  showIndicators?: boolean;
  lazy?: boolean;
}

const {
  images = [],
  class: className = '',
  showThumbnails = true,
  showCaptions = true,
  autoplay = false,
  interval = 5000,
  showControls = true,
  showIndicators = true,
  lazy = true,
  ...rest
} = Astro.props;

const classes = [
  'image-gallery',
  className
].filter(Boolean).join(' ');
---

<div class={classes} {...rest}>
  <!-- Galería principal -->
  <div class="image-gallery-main">
    <div class="image-gallery-viewport" id="gallery-viewport">
      <div class="image-gallery-track" id="gallery-track">
        {images.map((image, index) => (
          <div class="image-gallery-slide" data-index={index}>
            <OptimizedImage
              src={image.src}
              alt={image.alt}
              width={800}
              height={600}
              quality={90}
              format="webp"
              loading={lazy ? 'lazy' : 'eager'}
              class="image-gallery-image"
            />
            {showCaptions && image.caption && (
              <div class="image-gallery-caption">
                <p>{image.caption}</p>
              </div>
            )}
          </div>
        ))}
      </div>
    </div>

    <!-- Controles de navegación -->
    {showControls && (
      <div class="image-gallery-controls">
        <button class="image-gallery-prev" id="gallery-prev" aria-label="Imagen anterior">
          <i class="fas fa-chevron-left"></i>
        </button>
        <button class="image-gallery-next" id="gallery-next" aria-label="Imagen siguiente">
          <i class="fas fa-chevron-right"></i>
        </button>
      </div>
    )}

    <!-- Indicadores -->
    {showIndicators && (
      <div class="image-gallery-indicators" id="gallery-indicators">
        {images.map((_, index) => (
          <button 
            class="image-gallery-indicator" 
            data-index={index}
            aria-label={`Ir a imagen ${index + 1}`}
          ></button>
        ))}
      </div>
    )}

    <!-- Controles de reproducción -->
    {autoplay && (
      <div class="image-gallery-playback">
        <button class="image-gallery-play" id="gallery-play" aria-label="Reproducir">
          <i class="fas fa-play"></i>
        </button>
        <button class="image-gallery-pause" id="gallery-pause" aria-label="Pausar" style="display: none;">
          <i class="fas fa-pause"></i>
        </button>
      </div>
    )}
  </div>

  <!-- Miniaturas -->
  {showThumbnails && (
    <div class="image-gallery-thumbnails" id="gallery-thumbnails">
      <div class="image-gallery-thumbnails-track">
        {images.map((image, index) => (
          <button 
            class="image-gallery-thumbnail" 
            data-index={index}
            aria-label={`Ver imagen ${index + 1}`}
          >
            <OptimizedImage
              src={image.thumbnail || image.src}
              alt={image.alt}
              width={120}
              height={90}
              quality={70}
              format="webp"
              loading="lazy"
              class="image-gallery-thumbnail-image"
            />
          </button>
        ))}
      </div>
    </div>
  )}

  <!-- Información de la imagen -->
  <div class="image-gallery-info" id="gallery-info">
    <div class="image-gallery-counter">
      <span id="gallery-current">1</span> / <span id="gallery-total">{images.length}</span>
    </div>
    <div class="image-gallery-title" id="gallery-title">
      {images[0]?.alt || ''}
    </div>
  </div>
</div>

<style>
  .image-gallery {
    @apply relative bg-white rounded-xl shadow-lg overflow-hidden;
  }

  /* Galería principal */
  .image-gallery-main {
    @apply relative;
  }

  .image-gallery-viewport {
    @apply relative overflow-hidden;
    @apply aspect-video;
  }

  .image-gallery-track {
    @apply flex transition-transform duration-500 ease-in-out;
    @apply h-full;
  }

  .image-gallery-slide {
    @apply flex-shrink-0 w-full h-full relative;
  }

  .image-gallery-image {
    @apply w-full h-full object-cover;
  }

  .image-gallery-caption {
    @apply absolute bottom-0 left-0 right-0;
    @apply bg-gradient-to-t from-black/70 to-transparent;
    @apply p-4 text-white;
  }

  .image-gallery-caption p {
    @apply text-sm font-medium;
  }

  /* Controles de navegación */
  .image-gallery-controls {
    @apply absolute inset-y-0 left-0 right-0;
    @apply flex items-center justify-between;
    @apply pointer-events-none;
  }

  .image-gallery-prev,
  .image-gallery-next {
    @apply w-12 h-12 bg-black/50 text-white;
    @apply rounded-full flex items-center justify-center;
    @apply hover:bg-black/70 transition-colors duration-200;
    @apply pointer-events-auto;
    @apply mx-4;
  }

  .image-gallery-prev:disabled,
  .image-gallery-next:disabled {
    @apply opacity-50 cursor-not-allowed;
  }

  /* Indicadores */
  .image-gallery-indicators {
    @apply absolute bottom-4 left-1/2 transform -translate-x-1/2;
    @apply flex gap-2;
  }

  .image-gallery-indicator {
    @apply w-3 h-3 bg-white/50 rounded-full;
    @apply hover:bg-white/70 transition-colors duration-200;
    @apply cursor-pointer;
  }

  .image-gallery-indicator.active {
    @apply bg-white;
  }

  /* Controles de reproducción */
  .image-gallery-playback {
    @apply absolute top-4 right-4;
  }

  .image-gallery-play,
  .image-gallery-pause {
    @apply w-10 h-10 bg-black/50 text-white;
    @apply rounded-full flex items-center justify-center;
    @apply hover:bg-black/70 transition-colors duration-200;
  }

  /* Miniaturas */
  .image-gallery-thumbnails {
    @apply p-4 bg-gray-50;
  }

  .image-gallery-thumbnails-track {
    @apply flex gap-2 overflow-x-auto;
    @apply scrollbar-thin scrollbar-thumb-gray-300 scrollbar-track-gray-100;
  }

  .image-gallery-thumbnail {
    @apply flex-shrink-0 w-20 h-15 rounded-lg overflow-hidden;
    @apply border-2 border-transparent hover:border-blue-500;
    @apply transition-colors duration-200;
  }

  .image-gallery-thumbnail.active {
    @apply border-blue-500;
  }

  .image-gallery-thumbnail-image {
    @apply w-full h-full object-cover;
  }

  /* Información */
  .image-gallery-info {
    @apply p-4 bg-white border-t border-gray-200;
  }

  .image-gallery-counter {
    @apply text-sm text-gray-600 mb-1;
  }

  .image-gallery-title {
    @apply font-medium text-gray-900;
  }

  /* Estados de carga */
  .image-gallery-slide.loading {
    @apply bg-gray-100;
  }

  .image-gallery-slide.loading .image-gallery-image {
    @apply opacity-0;
  }

  .image-gallery-slide.loaded .image-gallery-image {
    @apply opacity-100;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .image-gallery-viewport {
      @apply aspect-square;
    }
    
    .image-gallery-prev,
    .image-gallery-next {
      @apply w-10 h-10 mx-2;
    }
    
    .image-gallery-thumbnails {
      @apply p-2;
    }
    
    .image-gallery-thumbnail {
      @apply w-16 h-12;
    }
  }

  /* Modo oscuro */
  [data-theme="dark"] .image-gallery {
    @apply bg-gray-800;
  }

  [data-theme="dark"] .image-gallery-thumbnails {
    @apply bg-gray-700;
  }

  [data-theme="dark"] .image-gallery-info {
    @apply bg-gray-800 border-gray-700;
  }

  [data-theme="dark"] .image-gallery-title {
    @apply text-gray-100;
  }

  [data-theme="dark"] .image-gallery-counter {
    @apply text-gray-400;
  }
</style>

<script>
  import OptimizedImage from './OptimizedImage.astro';

  class ImageGallery {
    constructor(element) {
      this.element = element;
      this.viewport = element.querySelector('#gallery-viewport');
      this.track = element.querySelector('#gallery-track');
      this.indicators = element.querySelectorAll('.image-gallery-indicator');
      this.thumbnails = element.querySelectorAll('.image-gallery-thumbnail');
      this.prevBtn = element.querySelector('#gallery-prev');
      this.nextBtn = element.querySelector('#gallery-next');
      this.playBtn = element.querySelector('#gallery-play');
      this.pauseBtn = element.querySelector('#gallery-pause');
      this.currentSpan = element.querySelector('#gallery-current');
      this.totalSpan = element.querySelector('#gallery-total');
      this.titleSpan = element.querySelector('#gallery-title');
      
      this.currentIndex = 0;
      this.totalImages = this.indicators.length;
      this.isPlaying = false;
      this.autoplayInterval = null;
      this.touchStartX = 0;
      this.touchEndX = 0;
      
      this.init();
    }
    
    init() {
      this.setupEventListeners();
      this.updateGallery();
      this.setupTouchGestures();
      this.setupKeyboardNavigation();
    }
    
    setupEventListeners() {
      // Botones de navegación
      this.prevBtn?.addEventListener('click', () => this.previous());
      this.nextBtn?.addEventListener('click', () => this.next());
      
      // Indicadores
      this.indicators.forEach((indicator, index) => {
        indicator.addEventListener('click', () => this.goToSlide(index));
      });
      
      // Miniaturas
      this.thumbnails.forEach((thumbnail, index) => {
        thumbnail.addEventListener('click', () => this.goToSlide(index));
      });
      
      // Controles de reproducción
      this.playBtn?.addEventListener('click', () => this.play());
      this.pauseBtn?.addEventListener('click', () => this.pause());
      
      // Pausar autoplay al hacer hover
      this.viewport?.addEventListener('mouseenter', () => this.pause());
      this.viewport?.addEventListener('mouseleave', () => {
        if (this.isPlaying) this.play();
      });
    }
    
    setupTouchGestures() {
      this.viewport?.addEventListener('touchstart', (e) => {
        this.touchStartX = e.touches[0].clientX;
      });
      
      this.viewport?.addEventListener('touchend', (e) => {
        this.touchEndX = e.changedTouches[0].clientX;
        this.handleSwipe();
      });
    }
    
    setupKeyboardNavigation() {
      document.addEventListener('keydown', (e) => {
        if (this.element.contains(document.activeElement)) {
          switch (e.key) {
            case 'ArrowLeft':
              e.preventDefault();
              this.previous();
              break;
            case 'ArrowRight':
              e.preventDefault();
              this.next();
              break;
            case ' ':
              e.preventDefault();
              this.togglePlayPause();
              break;
          }
        }
      });
    }
    
    handleSwipe() {
      const swipeThreshold = 50;
      const diff = this.touchStartX - this.touchEndX;
      
      if (Math.abs(diff) > swipeThreshold) {
        if (diff > 0) {
          this.next();
        } else {
          this.previous();
        }
      }
    }
    
    goToSlide(index) {
      if (index < 0 || index >= this.totalImages) return;
      
      this.currentIndex = index;
      this.updateGallery();
    }
    
    next() {
      const nextIndex = (this.currentIndex + 1) % this.totalImages;
      this.goToSlide(nextIndex);
    }
    
    previous() {
      const prevIndex = (this.currentIndex - 1 + this.totalImages) % this.totalImages;
      this.goToSlide(prevIndex);
    }
    
    play() {
      this.isPlaying = true;
      this.playBtn.style.display = 'none';
      this.pauseBtn.style.display = 'block';
      
      this.autoplayInterval = setInterval(() => {
        this.next();
      }, 5000);
    }
    
    pause() {
      this.isPlaying = false;
      this.playBtn.style.display = 'block';
      this.pauseBtn.style.display = 'none';
      
      if (this.autoplayInterval) {
        clearInterval(this.autoplayInterval);
        this.autoplayInterval = null;
      }
    }
    
    togglePlayPause() {
      if (this.isPlaying) {
        this.pause();
      } else {
        this.play();
      }
    }
    
    updateGallery() {
      // Actualizar posición del track
      const translateX = -this.currentIndex * 100;
      this.track.style.transform = `translateX(${translateX}%)`;
      
      // Actualizar indicadores
      this.indicators.forEach((indicator, index) => {
        indicator.classList.toggle('active', index === this.currentIndex);
      });
      
      // Actualizar miniaturas
      this.thumbnails.forEach((thumbnail, index) => {
        thumbnail.classList.toggle('active', index === this.currentIndex);
      });
      
      // Actualizar botones de navegación
      this.prevBtn.disabled = this.currentIndex === 0;
      this.nextBtn.disabled = this.currentIndex === this.totalImages - 1;
      
      // Actualizar información
      if (this.currentSpan) {
        this.currentSpan.textContent = (this.currentIndex + 1).toString();
      }
      
      if (this.titleSpan) {
        const currentSlide = this.track.children[this.currentIndex];
        const image = currentSlide?.querySelector('.image-gallery-image');
        this.titleSpan.textContent = image?.alt || '';
      }
      
      // Dispatch evento de cambio
      this.element.dispatchEvent(new CustomEvent('gallery:change', {
        detail: { 
          currentIndex: this.currentIndex,
          totalImages: this.totalImages 
        }
      }));
    }
    
    destroy() {
      this.pause();
      // Remover event listeners
    }
  }
  
  // Inicializar galerías cuando el DOM esté listo
  document.addEventListener('DOMContentLoaded', () => {
    const galleries = document.querySelectorAll('.image-gallery');
    galleries.forEach(gallery => {
      new ImageGallery(gallery);
    });
  });
  
  // Exponer globalmente
  window.ImageGallery = ImageGallery;
</script>
