---
export interface Props {
  src: string
  fallback?: string
  threshold?: number
  rootMargin?: string
  loading?: 'lazy' | 'eager'
  class?: string
}

const {
  src,
  fallback = 'Cargando...',
  threshold = 0.1,
  rootMargin = '50px',
  loading = 'lazy',
  class: className = ''
} = Astro.props

const moduleId = `lazy-module-${Math.random().toString(36).substr(2, 9)}`
---

<div 
  id={moduleId}
  class={`lazy-module ${className}`}
  data-src={src}
  data-loading={loading}
  data-threshold={threshold}
  data-root-margin={rootMargin}
>
  <div class="lazy-module-placeholder">
    <div class="lazy-module-spinner">
      <div class="spinner"></div>
    </div>
    <div class="lazy-module-text">{fallback}</div>
  </div>
</div>

<style>
  .lazy-module {
    position: relative;
    min-height: 200px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: var(--color-surface, #f8fafc);
    border: 1px solid var(--color-border, #e2e8f0);
    border-radius: 8px;
    overflow: hidden;
  }

  .lazy-module-placeholder {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: 16px;
    padding: 32px;
    text-align: center;
  }

  .lazy-module-spinner {
    width: 40px;
    height: 40px;
  }

  .spinner {
    width: 100%;
    height: 100%;
    border: 3px solid var(--color-border, #e2e8f0);
    border-top: 3px solid var(--color-primary, #2563eb);
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  .lazy-module-text {
    font-size: 14px;
    color: var(--color-text-secondary, #64748b);
    font-weight: 500;
  }

  /* Estados */
  .lazy-module.loading {
    opacity: 0.7;
  }

  .lazy-module.loaded {
    opacity: 1;
  }

  .lazy-module.error {
    background: var(--color-error-light, #fef2f2);
    border-color: var(--color-error, #ef4444);
  }

  .lazy-module.error .lazy-module-text {
    color: var(--color-error, #ef4444);
  }

  /* Contenido cargado */
  .lazy-module.loaded .lazy-module-placeholder {
    display: none;
  }

  .lazy-module.loaded .lazy-module-content {
    display: block;
    width: 100%;
    height: 100%;
  }

  .lazy-module-content {
    display: none;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .lazy-module {
      min-height: 150px;
    }

    .lazy-module-placeholder {
      padding: 24px;
      gap: 12px;
    }

    .lazy-module-spinner {
      width: 32px;
      height: 32px;
    }

    .lazy-module-text {
      font-size: 12px;
    }
  }

  /* Tema oscuro */
  [data-theme="dark"] .lazy-module {
    background: var(--color-surface, #1e293b);
    border-color: var(--color-border, #334155);
  }

  [data-theme="dark"] .spinner {
    border-color: var(--color-border, #334155);
    border-top-color: var(--color-primary, #3b82f6);
  }

  [data-theme="dark"] .lazy-module-text {
    color: var(--color-text-secondary, #94a3b8);
  }

  [data-theme="dark"] .lazy-module.error {
    background: var(--color-error-dark, #1f2937);
    border-color: var(--color-error, #ef4444);
  }
</style>

<script>
  // Lazy loading de módulos
  document.addEventListener('DOMContentLoaded', function() {
    const modules = document.querySelectorAll('.lazy-module');
    
    if ('IntersectionObserver' in window) {
      const moduleObserver = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const module = entry.target;
            const src = module.dataset.src;
            const loading = module.dataset.loading;
            
            if (loading === 'lazy' || loading === 'eager') {
              loadModule(module, src);
              observer.unobserve(module);
            }
          }
        });
      }, {
        threshold: parseFloat(modules[0]?.dataset.threshold || '0.1'),
        rootMargin: modules[0]?.dataset.rootMargin || '50px'
      });
      
      modules.forEach(module => {
        if (module.dataset.loading === 'eager') {
          loadModule(module, module.dataset.src);
        } else {
          moduleObserver.observe(module);
        }
      });
    } else {
      // Fallback para navegadores sin IntersectionObserver
      modules.forEach(module => {
        loadModule(module, module.dataset.src);
      });
    }
  });

  async function loadModule(module, src) {
    try {
      module.classList.add('loading');
      
      // Cargar módulo dinámicamente
      const moduleScript = await import(src);
      
      // Crear contenedor para el contenido
      const content = document.createElement('div');
      content.className = 'lazy-module-content';
      
      // Inicializar módulo si tiene método init
      if (moduleScript.default && typeof moduleScript.default.init === 'function') {
        await moduleScript.default.init(content);
      } else if (typeof moduleScript.default === 'function') {
        await moduleScript.default(content);
      }
      
      // Agregar contenido al módulo
      module.appendChild(content);
      
      // Marcar como cargado
      module.classList.remove('loading');
      module.classList.add('loaded');
      
      // Emitir evento de módulo cargado
      module.dispatchEvent(new CustomEvent('module:loaded', {
        detail: { src, module }
      }));
      
    } catch (error) {
      console.error('Error cargando módulo:', error);
      module.classList.add('error');
      module.querySelector('.lazy-module-text').textContent = 'Error cargando módulo';
      
      // Emitir evento de error
      module.dispatchEvent(new CustomEvent('module:error', {
        detail: { src, error, module }
      }));
    }
  }
</script>