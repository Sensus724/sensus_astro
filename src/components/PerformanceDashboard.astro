---
export interface Props {
  class?: string;
  showRealTime?: boolean;
  showAlerts?: boolean;
  showReports?: boolean;
  showCharts?: boolean;
  refreshInterval?: number;
}

const {
  class: className = '',
  showRealTime = true,
  showAlerts = true,
  showReports = true,
  showCharts = true,
  refreshInterval = 5000,
  ...rest
} = Astro.props;

const classes = [
  'performance-dashboard',
  className
].filter(Boolean).join(' ');
---

<div class={classes} {...rest}>
  <!-- Header del dashboard -->
  <div class="performance-dashboard-header">
    <h2 class="performance-dashboard-title">
      <i class="fas fa-tachometer-alt"></i>
      Dashboard de Rendimiento
    </h2>
    
    <div class="performance-dashboard-controls">
      <button class="performance-dashboard-btn" id="refresh-metrics">
        <i class="fas fa-sync-alt"></i>
        Actualizar
      </button>
      <button class="performance-dashboard-btn" id="export-report">
        <i class="fas fa-download"></i>
        Exportar
      </button>
      <button class="performance-dashboard-btn" id="clear-data">
        <i class="fas fa-trash"></i>
        Limpiar
      </button>
    </div>
  </div>

  <!-- Score de rendimiento -->
  <div class="performance-dashboard-score">
    <div class="performance-score-circle">
      <div class="performance-score-value" id="performance-score">0</div>
      <div class="performance-score-label">Puntuación</div>
    </div>
    
    <div class="performance-score-details">
      <div class="performance-score-item">
        <span class="performance-score-metric">LCP</span>
        <span class="performance-score-value-small" id="lcp-value">0ms</span>
        <div class="performance-score-bar">
          <div class="performance-score-fill" id="lcp-bar"></div>
        </div>
      </div>
      
      <div class="performance-score-item">
        <span class="performance-score-metric">FID</span>
        <span class="performance-score-value-small" id="fid-value">0ms</span>
        <div class="performance-score-bar">
          <div class="performance-score-fill" id="fid-bar"></div>
        </div>
      </div>
      
      <div class="performance-score-item">
        <span class="performance-score-metric">CLS</span>
        <span class="performance-score-value-small" id="cls-value">0</span>
        <div class="performance-score-bar">
          <div class="performance-score-fill" id="cls-bar"></div>
        </div>
      </div>
      
      <div class="performance-score-item">
        <span class="performance-score-metric">FCP</span>
        <span class="performance-score-value-small" id="fcp-value">0ms</span>
        <div class="performance-score-bar">
          <div class="performance-score-fill" id="fcp-bar"></div>
        </div>
      </div>
      
      <div class="performance-score-item">
        <span class="performance-score-metric">TTFB</span>
        <span class="performance-score-value-small" id="ttfb-value">0ms</span>
        <div class="performance-score-bar">
          <div class="performance-score-fill" id="ttfb-bar"></div>
        </div>
      </div>
    </div>
  </div>

  <!-- Métricas en tiempo real -->
  {showRealTime && (
    <div class="performance-dashboard-realtime">
      <h3 class="performance-dashboard-section-title">Métricas en Tiempo Real</h3>
      <div class="performance-realtime-grid">
        <div class="performance-realtime-item">
          <div class="performance-realtime-icon">
            <i class="fas fa-clock"></i>
          </div>
          <div class="performance-realtime-content">
            <div class="performance-realtime-value" id="page-load-time">0ms</div>
            <div class="performance-realtime-label">Tiempo de Carga</div>
          </div>
        </div>
        
        <div class="performance-realtime-item">
          <div class="performance-realtime-icon">
            <i class="fas fa-memory"></i>
          </div>
          <div class="performance-realtime-content">
            <div class="performance-realtime-value" id="memory-usage">0%</div>
            <div class="performance-realtime-label">Uso de Memoria</div>
          </div>
        </div>
        
        <div class="performance-realtime-item">
          <div class="performance-realtime-icon">
            <i class="fas fa-mouse-pointer"></i>
          </div>
          <div class="performance-realtime-content">
            <div class="performance-realtime-value" id="interaction-time">0ms</div>
            <div class="performance-realtime-label">Tiempo de Interacción</div>
          </div>
        </div>
        
        <div class="performance-realtime-item">
          <div class="performance-realtime-icon">
            <i class="fas fa-scroll"></i>
          </div>
          <div class="performance-realtime-content">
            <div class="performance-realtime-value" id="scroll-performance">0ms</div>
            <div class="performance-realtime-label">Rendimiento de Scroll</div>
          </div>
        </div>
        
        <div class="performance-realtime-item">
          <div class="performance-realtime-icon">
            <i class="fas fa-film"></i>
          </div>
          <div class="performance-realtime-content">
            <div class="performance-realtime-value" id="animation-fps">0 FPS</div>
            <div class="performance-realtime-label">FPS de Animación</div>
          </div>
        </div>
        
        <div class="performance-realtime-item">
          <div class="performance-realtime-icon">
            <i class="fas fa-globe"></i>
          </div>
          <div class="performance-realtime-content">
            <div class="performance-realtime-value" id="connection-type">Unknown</div>
            <div class="performance-realtime-label">Tipo de Conexión</div>
          </div>
        </div>
      </div>
    </div>
  )}

  <!-- Alertas -->
  {showAlerts && (
    <div class="performance-dashboard-alerts">
      <h3 class="performance-dashboard-section-title">Alertas de Rendimiento</h3>
      <div class="performance-alerts-container" id="performance-alerts">
        <!-- Las alertas se cargarán dinámicamente -->
      </div>
    </div>
  )}

  <!-- Gráficos -->
  {showCharts && (
    <div class="performance-dashboard-charts">
      <h3 class="performance-dashboard-section-title">Gráficos de Rendimiento</h3>
      <div class="performance-charts-grid">
        <div class="performance-chart-item">
          <h4 class="performance-chart-title">Core Web Vitals</h4>
          <div class="performance-chart-container" id="core-web-vitals-chart">
            <!-- Gráfico se generará dinámicamente -->
          </div>
        </div>
        
        <div class="performance-chart-item">
          <h4 class="performance-chart-title">Uso de Memoria</h4>
          <div class="performance-chart-container" id="memory-chart">
            <!-- Gráfico se generará dinámicamente -->
          </div>
        </div>
        
        <div class="performance-chart-item">
          <h4 class="performance-chart-title">Tiempo de Carga</h4>
          <div class="performance-chart-container" id="load-time-chart">
            <!-- Gráfico se generará dinámicamente -->
          </div>
        </div>
        
        <div class="performance-chart-item">
          <h4 class="performance-chart-title">FPS de Animación</h4>
          <div class="performance-chart-container" id="fps-chart">
            <!-- Gráfico se generará dinámicamente -->
          </div>
        </div>
      </div>
    </div>
  )}

  <!-- Reportes -->
  {showReports && (
    <div class="performance-dashboard-reports">
      <h3 class="performance-dashboard-section-title">Reportes de Rendimiento</h3>
      <div class="performance-reports-container" id="performance-reports">
        <!-- Los reportes se cargarán dinámicamente -->
      </div>
    </div>
  )}
</div>

<style>
  .performance-dashboard {
    @apply bg-white rounded-xl shadow-lg p-6 space-y-6;
  }

  /* Header */
  .performance-dashboard-header {
    @apply flex items-center justify-between pb-4 border-b border-gray-200;
  }

  .performance-dashboard-title {
    @apply text-2xl font-bold text-gray-900 flex items-center gap-3;
  }

  .performance-dashboard-controls {
    @apply flex gap-2;
  }

  .performance-dashboard-btn {
    @apply px-4 py-2 bg-blue-600 text-white rounded-lg;
    @apply hover:bg-blue-700 transition-colors duration-200;
    @apply flex items-center gap-2 text-sm font-medium;
  }

  /* Score de rendimiento */
  .performance-dashboard-score {
    @apply bg-gradient-to-r from-blue-50 to-purple-50 rounded-xl p-6;
    @apply flex items-center gap-8;
  }

  .performance-score-circle {
    @apply flex flex-col items-center justify-center;
    @apply w-32 h-32 bg-white rounded-full shadow-lg;
  }

  .performance-score-value {
    @apply text-3xl font-bold text-gray-900;
  }

  .performance-score-label {
    @apply text-sm text-gray-600;
  }

  .performance-score-details {
    @apply flex-1 space-y-3;
  }

  .performance-score-item {
    @apply flex items-center gap-4;
  }

  .performance-score-metric {
    @apply w-12 text-sm font-medium text-gray-700;
  }

  .performance-score-value-small {
    @apply w-16 text-sm font-medium text-gray-900;
  }

  .performance-score-bar {
    @apply flex-1 h-2 bg-gray-200 rounded-full overflow-hidden;
  }

  .performance-score-fill {
    @apply h-full bg-gradient-to-r from-green-500 to-red-500;
    @apply transition-all duration-300;
  }

  /* Métricas en tiempo real */
  .performance-dashboard-section-title {
    @apply text-lg font-semibold text-gray-900 mb-4;
  }

  .performance-realtime-grid {
    @apply grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4;
  }

  .performance-realtime-item {
    @apply bg-gray-50 rounded-lg p-4 text-center;
  }

  .performance-realtime-icon {
    @apply w-8 h-8 bg-blue-100 text-blue-600 rounded-lg;
    @apply flex items-center justify-center mx-auto mb-2;
  }

  .performance-realtime-value {
    @apply text-lg font-bold text-gray-900 mb-1;
  }

  .performance-realtime-label {
    @apply text-sm text-gray-600;
  }

  /* Alertas */
  .performance-alerts-container {
    @apply space-y-3;
  }

  .performance-alert {
    @apply p-4 rounded-lg border-l-4;
  }

  .performance-alert.warning {
    @apply bg-yellow-50 border-yellow-400 text-yellow-800;
  }

  .performance-alert.error {
    @apply bg-red-50 border-red-400 text-red-800;
  }

  .performance-alert.critical {
    @apply bg-red-100 border-red-600 text-red-900;
  }

  .performance-alert-header {
    @apply flex items-center justify-between mb-2;
  }

  .performance-alert-title {
    @apply font-medium;
  }

  .performance-alert-time {
    @apply text-sm opacity-75;
  }

  .performance-alert-message {
    @apply text-sm;
  }

  /* Gráficos */
  .performance-charts-grid {
    @apply grid grid-cols-1 md:grid-cols-2 gap-6;
  }

  .performance-chart-item {
    @apply bg-gray-50 rounded-lg p-4;
  }

  .performance-chart-title {
    @apply text-lg font-semibold text-gray-900 mb-4;
  }

  .performance-chart-container {
    @apply h-64 bg-white rounded-lg p-4;
    @apply flex items-center justify-center text-gray-500;
  }

  /* Reportes */
  .performance-reports-container {
    @apply space-y-3;
  }

  .performance-report {
    @apply bg-gray-50 rounded-lg p-4;
  }

  .performance-report-header {
    @apply flex items-center justify-between mb-2;
  }

  .performance-report-title {
    @apply font-medium text-gray-900;
  }

  .performance-report-time {
    @apply text-sm text-gray-600;
  }

  .performance-report-summary {
    @apply text-sm text-gray-600;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .performance-dashboard-header {
      @apply flex-col items-start gap-4;
    }
    
    .performance-dashboard-controls {
      @apply w-full justify-center;
    }
    
    .performance-dashboard-score {
      @apply flex-col gap-4;
    }
    
    .performance-score-circle {
      @apply w-24 h-24;
    }
    
    .performance-score-value {
      @apply text-2xl;
    }
    
    .performance-realtime-grid {
      @apply grid-cols-2 gap-3;
    }
    
    .performance-charts-grid {
      @apply grid-cols-1 gap-4;
    }
  }

  /* Modo oscuro */
  [data-theme="dark"] .performance-dashboard {
    @apply bg-gray-800 border border-gray-700;
  }

  [data-theme="dark"] .performance-dashboard-title {
    @apply text-gray-100;
  }

  [data-theme="dark"] .performance-dashboard-score {
    @apply bg-gradient-to-r from-gray-700 to-gray-600;
  }

  [data-theme="dark"] .performance-score-circle {
    @apply bg-gray-800;
  }

  [data-theme="dark"] .performance-score-value {
    @apply text-gray-100;
  }

  [data-theme="dark"] .performance-score-label {
    @apply text-gray-400;
  }

  [data-theme="dark"] .performance-score-metric {
    @apply text-gray-300;
  }

  [data-theme="dark"] .performance-score-value-small {
    @apply text-gray-100;
  }

  [data-theme="dark"] .performance-dashboard-section-title {
    @apply text-gray-100;
  }

  [data-theme="dark"] .performance-realtime-item {
    @apply bg-gray-700;
  }

  [data-theme="dark"] .performance-realtime-value {
    @apply text-gray-100;
  }

  [data-theme="dark"] .performance-realtime-label {
    @apply text-gray-400;
  }

  [data-theme="dark"] .performance-chart-item {
    @apply bg-gray-700;
  }

  [data-theme="dark"] .performance-chart-title {
    @apply text-gray-100;
  }

  [data-theme="dark"] .performance-chart-container {
    @apply bg-gray-800;
  }

  [data-theme="dark"] .performance-report {
    @apply bg-gray-700;
  }

  [data-theme="dark"] .performance-report-title {
    @apply text-gray-100;
  }

  [data-theme="dark"] .performance-report-time {
    @apply text-gray-400;
  }

  [data-theme="dark"] .performance-report-summary {
    @apply text-gray-400;
  }
</style>

<script>
  class PerformanceDashboard {
    constructor(element) {
      this.element = element;
      this.monitor = null;
      this.refreshInterval = null;
      this.chartData = {
        coreWebVitals: [],
        memory: [],
        loadTime: [],
        fps: [],
      };
      
      this.init();
    }
    
    async init() {
      // Importar monitor de rendimiento
      const { getPerformanceMonitor } = await import('../utils/performanceMonitoring.js');
      this.monitor = getPerformanceMonitor();
      
      this.setupEventListeners();
      this.updateDashboard();
      this.startRealTimeUpdates();
    }
    
    setupEventListeners() {
      // Botones de control
      document.getElementById('refresh-metrics')?.addEventListener('click', () => {
        this.updateDashboard();
      });
      
      document.getElementById('export-report')?.addEventListener('click', () => {
        this.exportReport();
      });
      
      document.getElementById('clear-data')?.addEventListener('click', () => {
        this.clearData();
      });
      
      // Escuchar eventos de rendimiento
      window.addEventListener('performance:metric', (e) => {
        this.updateMetric(e.detail.name, e.detail.value);
      });
      
      window.addEventListener('performance:alert', (e) => {
        this.addAlert(e.detail);
      });
    }
    
    updateDashboard() {
      this.updateScore();
      this.updateMetrics();
      this.updateAlerts();
      this.updateReports();
      this.updateCharts();
    }
    
    updateScore() {
      const score = this.monitor.getPerformanceScore();
      document.getElementById('performance-score').textContent = score.toString();
      
      // Actualizar barras de métricas
      this.updateMetricBar('lcp', this.monitor.getMetrics().get('lcp') || 0);
      this.updateMetricBar('fid', this.monitor.getMetrics().get('fid') || 0);
      this.updateMetricBar('cls', this.monitor.getMetrics().get('cls') || 0);
      this.updateMetricBar('fcp', this.monitor.getMetrics().get('fcp') || 0);
      this.updateMetricBar('ttfb', this.monitor.getMetrics().get('ttfb') || 0);
    }
    
    updateMetricBar(metric, value) {
      const thresholds = {
        lcp: 2500,
        fid: 100,
        cls: 0.1,
        fcp: 1800,
        ttfb: 800,
      };
      
      const threshold = thresholds[metric];
      const percentage = Math.min((value / threshold) * 100, 100);
      
      const bar = document.getElementById(`${metric}-bar`);
      if (bar) {
        bar.style.width = `${percentage}%`;
      }
      
      const valueElement = document.getElementById(`${metric}-value`);
      if (valueElement) {
        if (metric === 'cls') {
          valueElement.textContent = value.toFixed(3);
        } else {
          valueElement.textContent = `${Math.round(value)}ms`;
        }
      }
    }
    
    updateMetrics() {
      const metrics = this.monitor.getMetrics();
      
      // Actualizar métricas en tiempo real
      document.getElementById('page-load-time').textContent = 
        `${Math.round(metrics.get('pageLoadTime') || 0)}ms`;
      
      document.getElementById('memory-usage').textContent = 
        `${Math.round((metrics.get('memoryUsage') || 0) * 100)}%`;
      
      document.getElementById('interaction-time').textContent = 
        `${Math.round(metrics.get('interactionTime') || 0)}ms`;
      
      document.getElementById('scroll-performance').textContent = 
        `${Math.round(metrics.get('scrollPerformance') || 0)}ms`;
      
      document.getElementById('animation-fps').textContent = 
        `${Math.round(metrics.get('animationFrameRate') || 0)} FPS`;
      
      // Tipo de conexión
      const connection = (navigator as any).connection?.effectiveType || 'unknown';
      document.getElementById('connection-type').textContent = connection;
    }
    
    updateMetric(name, value) {
      // Actualizar métrica específica
      const element = document.getElementById(`${name}-value`);
      if (element) {
        if (name === 'cls') {
          element.textContent = value.toFixed(3);
        } else if (name === 'memoryUsage') {
          element.textContent = `${Math.round(value * 100)}%`;
        } else if (name === 'animationFrameRate') {
          element.textContent = `${Math.round(value)} FPS`;
        } else {
          element.textContent = `${Math.round(value)}ms`;
        }
      }
      
      // Actualizar gráficos
      this.updateChartData(name, value);
    }
    
    updateAlerts() {
      const alerts = this.monitor.getAlerts();
      const container = document.getElementById('performance-alerts');
      
      if (!container) return;
      
      if (alerts.length === 0) {
        container.innerHTML = '<div class="text-center text-gray-500 py-4">No hay alertas de rendimiento</div>';
        return;
      }
      
      container.innerHTML = alerts.map(alert => `
        <div class="performance-alert ${alert.type}">
          <div class="performance-alert-header">
            <div class="performance-alert-title">${alert.metric.toUpperCase()}</div>
            <div class="performance-alert-time">${new Date(alert.timestamp).toLocaleTimeString()}</div>
          </div>
          <div class="performance-alert-message">${alert.message}</div>
        </div>
      `).join('');
    }
    
    addAlert(alert) {
      // Agregar nueva alerta
      this.updateAlerts();
    }
    
    updateReports() {
      const reports = this.monitor.getReports();
      const container = document.getElementById('performance-reports');
      
      if (!container) return;
      
      if (reports.length === 0) {
        container.innerHTML = '<div class="text-center text-gray-500 py-4">No hay reportes de rendimiento</div>';
        return;
      }
      
      container.innerHTML = reports.slice(-5).reverse().map(report => `
        <div class="performance-report">
          <div class="performance-report-header">
            <div class="performance-report-title">Reporte de Rendimiento</div>
            <div class="performance-report-time">${new Date(report.timestamp).toLocaleString()}</div>
          </div>
          <div class="performance-report-summary">
            LCP: ${Math.round(report.metrics.lcp)}ms | 
            FID: ${Math.round(report.metrics.fid)}ms | 
            CLS: ${report.metrics.cls.toFixed(3)} | 
            Score: ${this.calculateReportScore(report.metrics)}
          </div>
        </div>
      `).join('');
    }
    
    calculateReportScore(metrics) {
      let score = 100;
      
      if (metrics.lcp > 2500) score -= 20;
      if (metrics.fid > 100) score -= 20;
      if (metrics.cls > 0.1) score -= 20;
      if (metrics.fcp > 1800) score -= 20;
      if (metrics.ttfb > 800) score -= 20;
      
      return Math.max(0, score);
    }
    
    updateCharts() {
      this.updateCoreWebVitalsChart();
      this.updateMemoryChart();
      this.updateLoadTimeChart();
      this.updateFPSChart();
    }
    
    updateChartData(metric, value) {
      const timestamp = Date.now();
      
      switch (metric) {
        case 'lcp':
        case 'fid':
        case 'cls':
        case 'fcp':
        case 'ttfb':
          this.chartData.coreWebVitals.push({ timestamp, [metric]: value });
          break;
        case 'memoryUsage':
          this.chartData.memory.push({ timestamp, value });
          break;
        case 'pageLoadTime':
          this.chartData.loadTime.push({ timestamp, value });
          break;
        case 'animationFrameRate':
          this.chartData.fps.push({ timestamp, value });
          break;
      }
      
      // Limitar datos a 50 puntos
      Object.keys(this.chartData).forEach(key => {
        if (this.chartData[key].length > 50) {
          this.chartData[key] = this.chartData[key].slice(-50);
        }
      });
    }
    
    updateCoreWebVitalsChart() {
      const container = document.getElementById('core-web-vitals-chart');
      if (!container) return;
      
      // Crear gráfico simple
      container.innerHTML = `
        <div class="flex items-end justify-center gap-2 h-full">
          <div class="flex flex-col items-center gap-2">
            <div class="w-8 bg-blue-600 rounded-t" style="height: ${Math.min((this.monitor.getMetrics().get('lcp') || 0) / 25, 100)}%"></div>
            <span class="text-xs text-gray-600">LCP</span>
          </div>
          <div class="flex flex-col items-center gap-2">
            <div class="w-8 bg-green-600 rounded-t" style="height: ${Math.min((this.monitor.getMetrics().get('fid') || 0) * 10, 100)}%"></div>
            <span class="text-xs text-gray-600">FID</span>
          </div>
          <div class="flex flex-col items-center gap-2">
            <div class="w-8 bg-yellow-600 rounded-t" style="height: ${Math.min((this.monitor.getMetrics().get('cls') || 0) * 1000, 100)}%"></div>
            <span class="text-xs text-gray-600">CLS</span>
          </div>
        </div>
      `;
    }
    
    updateMemoryChart() {
      const container = document.getElementById('memory-chart');
      if (!container) return;
      
      const memoryUsage = (this.monitor.getMetrics().get('memoryUsage') || 0) * 100;
      
      container.innerHTML = `
        <div class="flex items-center justify-center h-full">
          <div class="text-center">
            <div class="text-3xl font-bold text-gray-900">${Math.round(memoryUsage)}%</div>
            <div class="text-sm text-gray-600">Uso de Memoria</div>
          </div>
        </div>
      `;
    }
    
    updateLoadTimeChart() {
      const container = document.getElementById('load-time-chart');
      if (!container) return;
      
      const loadTime = this.monitor.getMetrics().get('pageLoadTime') || 0;
      
      container.innerHTML = `
        <div class="flex items-center justify-center h-full">
          <div class="text-center">
            <div class="text-3xl font-bold text-gray-900">${Math.round(loadTime)}ms</div>
            <div class="text-sm text-gray-600">Tiempo de Carga</div>
          </div>
        </div>
      `;
    }
    
    updateFPSChart() {
      const container = document.getElementById('fps-chart');
      if (!container) return;
      
      const fps = this.monitor.getMetrics().get('animationFrameRate') || 0;
      
      container.innerHTML = `
        <div class="flex items-center justify-center h-full">
          <div class="text-center">
            <div class="text-3xl font-bold text-gray-900">${Math.round(fps)}</div>
            <div class="text-sm text-gray-600">FPS</div>
          </div>
        </div>
      `;
    }
    
    startRealTimeUpdates() {
      this.refreshInterval = setInterval(() => {
        this.updateDashboard();
      }, this.element.dataset.refreshInterval || 5000);
    }
    
    exportReport() {
      const report = {
        timestamp: Date.now(),
        sessionId: this.monitor.getSessionId(),
        sessionDuration: this.monitor.getSessionDuration(),
        metrics: Object.fromEntries(this.monitor.getMetrics()),
        alerts: this.monitor.getAlerts(),
        reports: this.monitor.getReports(),
      };
      
      const blob = new Blob([JSON.stringify(report, null, 2)], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      
      const a = document.createElement('a');
      a.href = url;
      a.download = `performance-report-${new Date().toISOString()}.json`;
      a.click();
      
      URL.revokeObjectURL(url);
    }
    
    clearData() {
      if (confirm('¿Estás seguro de que quieres limpiar todos los datos de rendimiento?')) {
        this.monitor.clearAlerts();
        this.monitor.clearReports();
        this.updateDashboard();
      }
    }
    
    destroy() {
      if (this.refreshInterval) {
        clearInterval(this.refreshInterval);
      }
    }
  }
  
  // Inicializar cuando el DOM esté listo
  document.addEventListener('DOMContentLoaded', () => {
    const dashboardElements = document.querySelectorAll('.performance-dashboard');
    dashboardElements.forEach(element => {
      new PerformanceDashboard(element);
    });
  });
  
  // Exponer globalmente
  window.PerformanceDashboard = PerformanceDashboard;
</script>
