---
export interface Props {
  class?: string;
  showTrends?: boolean;
  showRecommendations?: boolean;
  showIssues?: boolean;
  refreshInterval?: number;
}

const {
  class: className = '',
  showTrends = true,
  showRecommendations = true,
  showIssues = true,
  refreshInterval = 300000, // 5 minutos
  ...rest
} = Astro.props;

const classes = [
  'quality-dashboard',
  className
].filter(Boolean).join(' ');
---

<div class={classes} {...rest}>
  <!-- Header del dashboard -->
  <div class="quality-dashboard-header">
    <h2 class="quality-dashboard-title">
      <i class="fas fa-shield-alt"></i>
      Dashboard de Calidad
    </h2>
    
    <div class="quality-dashboard-controls">
      <button class="quality-dashboard-btn" id="refresh-quality">
        <i class="fas fa-sync-alt"></i>
        Actualizar
      </button>
      <button class="quality-dashboard-btn" id="export-report">
        <i class="fas fa-download"></i>
        Exportar
      </button>
      <button class="quality-dashboard-btn" id="run-analysis">
        <i class="fas fa-play"></i>
        Analizar
      </button>
    </div>
  </div>

  <!-- Score general de calidad -->
  <div class="quality-dashboard-score">
    <div class="quality-score-circle">
      <div class="quality-score-value" id="quality-score">0</div>
      <div class="quality-score-label">Puntuación</div>
      <div class="quality-score-grade" id="quality-grade">F</div>
    </div>
    
    <div class="quality-score-details">
      <div class="quality-score-item">
        <span class="quality-score-metric">Cobertura</span>
        <span class="quality-score-value-small" id="coverage-value">0%</span>
        <div class="quality-score-bar">
          <div class="quality-score-fill" id="coverage-bar"></div>
        </div>
      </div>
      
      <div class="quality-score-item">
        <span class="quality-score-metric">Seguridad</span>
        <span class="quality-score-value-small" id="security-value">0%</span>
        <div class="quality-score-bar">
          <div class="quality-score-fill" id="security-bar"></div>
        </div>
      </div>
      
      <div class="quality-score-item">
        <span class="quality-score-metric">Accesibilidad</span>
        <span class="quality-score-value-small" id="accessibility-value">0%</span>
        <div class="quality-score-bar">
          <div class="quality-score-fill" id="accessibility-bar"></div>
        </div>
      </div>
      
      <div class="quality-score-item">
        <span class="quality-score-metric">Rendimiento</span>
        <span class="quality-score-value-small" id="performance-value">0%</span>
        <div class="quality-score-bar">
          <div class="quality-score-fill" id="performance-bar"></div>
        </div>
      </div>
      
      <div class="quality-score-item">
        <span class="quality-score-metric">SEO</span>
        <span class="quality-score-value-small" id="seo-value">0%</span>
        <div class="quality-score-bar">
          <div class="quality-score-fill" id="seo-bar"></div>
        </div>
      </div>
    </div>
  </div>

  <!-- Métricas de calidad -->
  <div class="quality-dashboard-metrics">
    <h3 class="quality-dashboard-section-title">Métricas de Calidad</h3>
    <div class="quality-metrics-grid">
      <div class="quality-metric-item">
        <div class="quality-metric-icon">
          <i class="fas fa-code"></i>
        </div>
        <div class="quality-metric-content">
          <div class="quality-metric-value" id="code-quality">0%</div>
          <div class="quality-metric-label">Calidad de Código</div>
        </div>
      </div>
      
      <div class="quality-metric-item">
        <div class="quality-metric-icon">
          <i class="fas fa-vial"></i>
        </div>
        <div class="quality-metric-content">
          <div class="quality-metric-value" id="test-quality">0%</div>
          <div class="quality-metric-label">Calidad de Tests</div>
        </div>
      </div>
      
      <div class="quality-metric-item">
        <div class="quality-metric-icon">
          <i class="fas fa-book"></i>
        </div>
        <div class="quality-metric-content">
          <div class="quality-metric-value" id="documentation">0%</div>
          <div class="quality-metric-label">Documentación</div>
        </div>
      </div>
      
      <div class="quality-metric-item">
        <div class="quality-metric-icon">
          <i class="fas fa-cogs"></i>
        </div>
        <div class="quality-metric-content">
          <div class="quality-metric-value" id="maintainability">0%</div>
          <div class="quality-metric-label">Mantenibilidad</div>
        </div>
      </div>
      
      <div class="quality-metric-item">
        <div class="quality-metric-icon">
          <i class="fas fa-project-diagram"></i>
        </div>
        <div class="quality-metric-content">
          <div class="quality-metric-value" id="complexity">0</div>
          <div class="quality-metric-label">Complejidad</div>
        </div>
      </div>
      
      <div class="quality-metric-item">
        <div class="quality-metric-icon">
          <i class="fas fa-exclamation-triangle"></i>
        </div>
        <div class="quality-metric-content">
          <div class="quality-metric-value" id="total-issues">0</div>
          <div class="quality-metric-label">Problemas</div>
        </div>
      </div>
    </div>
  </div>

  <!-- Tendencias -->
  {showTrends && (
    <div class="quality-dashboard-trends">
      <h3 class="quality-dashboard-section-title">Tendencias de Calidad</h3>
      <div class="quality-trends-chart" id="quality-trends-chart">
        <!-- Gráfico de tendencias se generará dinámicamente -->
      </div>
    </div>
  )}

  <!-- Problemas por categoría -->
  {showIssues && (
    <div class="quality-dashboard-issues">
      <h3 class="quality-dashboard-section-title">Problemas por Categoría</h3>
      <div class="quality-issues-grid">
        <div class="quality-issue-category">
          <div class="quality-issue-header">
            <i class="fas fa-code"></i>
            <span>Código</span>
            <span class="quality-issue-count" id="code-issues">0</span>
          </div>
          <div class="quality-issue-list" id="code-issues-list">
            <!-- Problemas de código se cargarán dinámicamente -->
          </div>
        </div>
        
        <div class="quality-issue-category">
          <div class="quality-issue-header">
            <i class="fas fa-shield-alt"></i>
            <span>Seguridad</span>
            <span class="quality-issue-count" id="security-issues">0</span>
          </div>
          <div class="quality-issue-list" id="security-issues-list">
            <!-- Problemas de seguridad se cargarán dinámicamente -->
          </div>
        </div>
        
        <div class="quality-issue-category">
          <div class="quality-issue-header">
            <i class="fas fa-universal-access"></i>
            <span>Accesibilidad</span>
            <span class="quality-issue-count" id="accessibility-issues">0</span>
          </div>
          <div class="quality-issue-list" id="accessibility-issues-list">
            <!-- Problemas de accesibilidad se cargarán dinámicamente -->
          </div>
        </div>
        
        <div class="quality-issue-category">
          <div class="quality-issue-header">
            <i class="fas fa-tachometer-alt"></i>
            <span>Rendimiento</span>
            <span class="quality-issue-count" id="performance-issues">0</span>
          </div>
          <div class="quality-issue-list" id="performance-issues-list">
            <!-- Problemas de rendimiento se cargarán dinámicamente -->
          </div>
        </div>
        
        <div class="quality-issue-category">
          <div class="quality-issue-header">
            <i class="fas fa-search"></i>
            <span>SEO</span>
            <span class="quality-issue-count" id="seo-issues">0</span>
          </div>
          <div class="quality-issue-list" id="seo-issues-list">
            <!-- Problemas de SEO se cargarán dinámicamente -->
          </div>
        </div>
      </div>
    </div>
  )}

  <!-- Recomendaciones -->
  {showRecommendations && (
    <div class="quality-dashboard-recommendations">
      <h3 class="quality-dashboard-section-title">Recomendaciones</h3>
      <div class="quality-recommendations-list" id="quality-recommendations">
        <!-- Recomendaciones se cargarán dinámicamente -->
      </div>
    </div>
  )}

  <!-- Estadísticas -->
  <div class="quality-dashboard-stats">
    <h3 class="quality-dashboard-section-title">Estadísticas</h3>
    <div class="quality-stats-grid">
      <div class="quality-stat-item">
        <div class="quality-stat-icon">
          <i class="fas fa-bug"></i>
        </div>
        <div class="quality-stat-content">
          <div class="quality-stat-value" id="critical-issues">0</div>
          <div class="quality-stat-label">Críticos</div>
        </div>
      </div>
      
      <div class="quality-stat-item">
        <div class="quality-stat-icon">
          <i class="fas fa-exclamation-circle"></i>
        </div>
        <div class="quality-stat-content">
          <div class="quality-stat-value" id="high-issues">0</div>
          <div class="quality-stat-label">Altos</div>
        </div>
      </div>
      
      <div class="quality-stat-item">
        <div class="quality-stat-icon">
          <i class="fas fa-exclamation-triangle"></i>
        </div>
        <div class="quality-stat-content">
          <div class="quality-stat-value" id="medium-issues">0</div>
          <div class="quality-stat-label">Medios</div>
        </div>
      </div>
      
      <div class="quality-stat-item">
        <div class="quality-stat-icon">
          <i class="fas fa-info-circle"></i>
        </div>
        <div class="quality-stat-content">
          <div class="quality-stat-value" id="low-issues">0</div>
          <div class="quality-stat-label">Bajos</div>
        </div>
      </div>
      
      <div class="quality-stat-item">
        <div class="quality-stat-icon">
          <i class="fas fa-chart-line"></i>
        </div>
        <div class="quality-stat-content">
          <div class="quality-stat-value" id="trend">Estable</div>
          <div class="quality-stat-label">Tendencia</div>
        </div>
      </div>
      
      <div class="quality-stat-item">
        <div class="quality-stat-icon">
          <i class="fas fa-clock"></i>
        </div>
        <div class="quality-stat-content">
          <div class="quality-stat-value" id="last-analysis">Nunca</div>
          <div class="quality-stat-label">Último Análisis</div>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .quality-dashboard {
    @apply bg-white rounded-xl shadow-lg p-6 space-y-6;
  }

  /* Header */
  .quality-dashboard-header {
    @apply flex items-center justify-between pb-4 border-b border-gray-200;
  }

  .quality-dashboard-title {
    @apply text-2xl font-bold text-gray-900 flex items-center gap-3;
  }

  .quality-dashboard-controls {
    @apply flex gap-2;
  }

  .quality-dashboard-btn {
    @apply px-4 py-2 bg-blue-600 text-white rounded-lg;
    @apply hover:bg-blue-700 transition-colors duration-200;
    @apply flex items-center gap-2 text-sm font-medium;
  }

  /* Score de calidad */
  .quality-dashboard-score {
    @apply bg-gradient-to-r from-green-50 to-blue-50 rounded-xl p-6;
    @apply flex items-center gap-8;
  }

  .quality-score-circle {
    @apply flex flex-col items-center justify-center;
    @apply w-32 h-32 bg-white rounded-full shadow-lg;
  }

  .quality-score-value {
    @apply text-3xl font-bold text-gray-900;
  }

  .quality-score-label {
    @apply text-sm text-gray-600;
  }

  .quality-score-grade {
    @apply text-lg font-bold text-blue-600;
  }

  .quality-score-details {
    @apply flex-1 space-y-3;
  }

  .quality-score-item {
    @apply flex items-center gap-4;
  }

  .quality-score-metric {
    @apply w-20 text-sm font-medium text-gray-700;
  }

  .quality-score-value-small {
    @apply w-16 text-sm font-medium text-gray-900;
  }

  .quality-score-bar {
    @apply flex-1 h-2 bg-gray-200 rounded-full overflow-hidden;
  }

  .quality-score-fill {
    @apply h-full bg-gradient-to-r from-green-500 to-red-500;
    @apply transition-all duration-300;
  }

  /* Métricas de calidad */
  .quality-dashboard-section-title {
    @apply text-lg font-semibold text-gray-900 mb-4;
  }

  .quality-metrics-grid {
    @apply grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4;
  }

  .quality-metric-item {
    @apply bg-gray-50 rounded-lg p-4 text-center;
  }

  .quality-metric-icon {
    @apply w-8 h-8 bg-blue-100 text-blue-600 rounded-lg;
    @apply flex items-center justify-center mx-auto mb-2;
  }

  .quality-metric-value {
    @apply text-lg font-bold text-gray-900 mb-1;
  }

  .quality-metric-label {
    @apply text-sm text-gray-600;
  }

  /* Tendencias */
  .quality-trends-chart {
    @apply h-64 bg-gray-50 rounded-lg p-4;
    @apply flex items-center justify-center text-gray-500;
  }

  /* Problemas */
  .quality-issues-grid {
    @apply grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4;
  }

  .quality-issue-category {
    @apply bg-gray-50 rounded-lg p-4;
  }

  .quality-issue-header {
    @apply flex items-center justify-between mb-3;
    @apply font-medium text-gray-900;
  }

  .quality-issue-count {
    @apply px-2 py-1 bg-red-100 text-red-800 rounded-full text-xs;
  }

  .quality-issue-list {
    @apply space-y-2;
  }

  .quality-issue-item {
    @apply p-2 bg-white rounded border-l-4;
  }

  .quality-issue-item.critical {
    @apply border-red-500 bg-red-50;
  }

  .quality-issue-item.high {
    @apply border-orange-500 bg-orange-50;
  }

  .quality-issue-item.medium {
    @apply border-yellow-500 bg-yellow-50;
  }

  .quality-issue-item.low {
    @apply border-blue-500 bg-blue-50;
  }

  .quality-issue-message {
    @apply text-sm font-medium;
  }

  .quality-issue-file {
    @apply text-xs text-gray-600 mt-1;
  }

  /* Recomendaciones */
  .quality-recommendations-list {
    @apply space-y-3;
  }

  .quality-recommendation {
    @apply p-4 bg-blue-50 border-l-4 border-blue-500 rounded-lg;
  }

  .quality-recommendation-icon {
    @apply w-6 h-6 bg-blue-100 text-blue-600 rounded-full;
    @apply flex items-center justify-center mb-2;
  }

  .quality-recommendation-text {
    @apply text-sm text-blue-800;
  }

  /* Estadísticas */
  .quality-stats-grid {
    @apply grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4;
  }

  .quality-stat-item {
    @apply bg-gray-50 rounded-lg p-4 text-center;
  }

  .quality-stat-icon {
    @apply w-8 h-8 bg-gray-100 text-gray-600 rounded-lg;
    @apply flex items-center justify-center mx-auto mb-2;
  }

  .quality-stat-value {
    @apply text-lg font-bold text-gray-900 mb-1;
  }

  .quality-stat-label {
    @apply text-sm text-gray-600;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .quality-dashboard-header {
      @apply flex-col items-start gap-4;
    }
    
    .quality-dashboard-controls {
      @apply w-full justify-center;
    }
    
    .quality-dashboard-score {
      @apply flex-col gap-4;
    }
    
    .quality-score-circle {
      @apply w-24 h-24;
    }
    
    .quality-score-value {
      @apply text-2xl;
    }
    
    .quality-metrics-grid {
      @apply grid-cols-2 gap-3;
    }
    
    .quality-issues-grid {
      @apply grid-cols-1 gap-3;
    }
    
    .quality-stats-grid {
      @apply grid-cols-2 gap-3;
    }
  }

  /* Modo oscuro */
  [data-theme="dark"] .quality-dashboard {
    @apply bg-gray-800 border border-gray-700;
  }

  [data-theme="dark"] .quality-dashboard-title {
    @apply text-gray-100;
  }

  [data-theme="dark"] .quality-dashboard-score {
    @apply bg-gradient-to-r from-gray-700 to-gray-600;
  }

  [data-theme="dark"] .quality-score-circle {
    @apply bg-gray-800;
  }

  [data-theme="dark"] .quality-score-value {
    @apply text-gray-100;
  }

  [data-theme="dark"] .quality-score-label {
    @apply text-gray-400;
  }

  [data-theme="dark"] .quality-score-grade {
    @apply text-blue-400;
  }

  [data-theme="dark"] .quality-score-metric {
    @apply text-gray-300;
  }

  [data-theme="dark"] .quality-score-value-small {
    @apply text-gray-100;
  }

  [data-theme="dark"] .quality-dashboard-section-title {
    @apply text-gray-100;
  }

  [data-theme="dark"] .quality-metric-item {
    @apply bg-gray-700;
  }

  [data-theme="dark"] .quality-metric-value {
    @apply text-gray-100;
  }

  [data-theme="dark"] .quality-metric-label {
    @apply text-gray-400;
  }

  [data-theme="dark"] .quality-trends-chart {
    @apply bg-gray-700;
  }

  [data-theme="dark"] .quality-issue-category {
    @apply bg-gray-700;
  }

  [data-theme="dark"] .quality-issue-header {
    @apply text-gray-100;
  }

  [data-theme="dark"] .quality-issue-item {
    @apply bg-gray-800;
  }

  [data-theme="dark"] .quality-issue-message {
    @apply text-gray-100;
  }

  [data-theme="dark"] .quality-issue-file {
    @apply text-gray-400;
  }

  [data-theme="dark"] .quality-recommendation {
    @apply bg-blue-900 border-blue-400;
  }

  [data-theme="dark"] .quality-recommendation-text {
    @apply text-blue-200;
  }

  [data-theme="dark"] .quality-stat-item {
    @apply bg-gray-700;
  }

  [data-theme="dark"] .quality-stat-value {
    @apply text-gray-100;
  }

  [data-theme="dark"] .quality-stat-label {
    @apply text-gray-400;
  }
</style>

<script>
  class QualityDashboard {
    constructor(element) {
      this.element = element;
      this.qualityControl = null;
      this.refreshInterval = null;
      
      this.init();
    }
    
    async init() {
      // Importar control de calidad
      const { getQualityControl } = await import('../utils/qualityControl.js');
      this.qualityControl = getQualityControl();
      
      this.setupEventListeners();
      this.updateDashboard();
      this.startAutoRefresh();
    }
    
    setupEventListeners() {
      // Botones de control
      document.getElementById('refresh-quality')?.addEventListener('click', () => {
        this.updateDashboard();
      });
      
      document.getElementById('export-report')?.addEventListener('click', () => {
        this.exportReport();
      });
      
      document.getElementById('run-analysis')?.addEventListener('click', () => {
        this.runAnalysis();
      });
    }
    
    async updateDashboard() {
      try {
        // Generar reporte de calidad
        const report = await this.qualityControl.generateReport();
        
        this.updateScore(report);
        this.updateMetrics(report);
        this.updateIssues(report);
        this.updateRecommendations(report);
        this.updateStats(report);
        this.updateTrends(report);
        
      } catch (error) {
        console.error('Error updating quality dashboard:', error);
      }
    }
    
    updateScore(report) {
      // Actualizar score general
      document.getElementById('quality-score').textContent = report.overallScore.toString();
      document.getElementById('quality-grade').textContent = report.grade;
      
      // Actualizar métricas individuales
      this.updateMetricBar('coverage', report.metrics.codeCoverage);
      this.updateMetricBar('security', report.metrics.security);
      this.updateMetricBar('accessibility', report.metrics.accessibility);
      this.updateMetricBar('performance', report.metrics.performance);
      this.updateMetricBar('seo', report.metrics.seo);
    }
    
    updateMetricBar(metric, value) {
      const bar = document.getElementById(`${metric}-bar`);
      const valueElement = document.getElementById(`${metric}-value`);
      
      if (bar) {
        bar.style.width = `${value}%`;
      }
      
      if (valueElement) {
        valueElement.textContent = `${Math.round(value)}%`;
      }
    }
    
    updateMetrics(report) {
      // Actualizar métricas de calidad
      document.getElementById('code-quality').textContent = `${Math.round(report.metrics.codeQuality)}%`;
      document.getElementById('test-quality').textContent = `${Math.round(report.metrics.testQuality)}%`;
      document.getElementById('documentation').textContent = `${Math.round(report.metrics.documentation)}%`;
      document.getElementById('maintainability').textContent = `${Math.round(report.metrics.maintainability)}%`;
      document.getElementById('complexity').textContent = Math.round(report.metrics.complexity).toString();
      document.getElementById('total-issues').textContent = report.issues.length.toString();
    }
    
    updateIssues(report) {
      // Agrupar problemas por categoría
      const issuesByCategory = report.issues.reduce((acc, issue) => {
        if (!acc[issue.category]) {
          acc[issue.category] = [];
        }
        acc[issue.category].push(issue);
        return acc;
      }, {});
      
      // Actualizar cada categoría
      Object.entries(issuesByCategory).forEach(([category, issues]) => {
        const countElement = document.getElementById(`${category}-issues`);
        const listElement = document.getElementById(`${category}-issues-list`);
        
        if (countElement) {
          countElement.textContent = issues.length.toString();
        }
        
        if (listElement) {
          listElement.innerHTML = issues.slice(0, 5).map(issue => `
            <div class="quality-issue-item ${issue.severity}">
              <div class="quality-issue-message">${issue.message}</div>
              ${issue.file ? `<div class="quality-issue-file">${issue.file}:${issue.line || 'N/A'}</div>` : ''}
            </div>
          `).join('');
        }
      });
    }
    
    updateRecommendations(report) {
      const container = document.getElementById('quality-recommendations');
      if (!container) return;
      
      if (report.recommendations.length === 0) {
        container.innerHTML = '<div class="text-center text-gray-500 py-4">No hay recomendaciones</div>';
        return;
      }
      
      container.innerHTML = report.recommendations.map(rec => `
        <div class="quality-recommendation">
          <div class="quality-recommendation-icon">
            <i class="fas fa-lightbulb"></i>
          </div>
          <div class="quality-recommendation-text">${rec}</div>
        </div>
      `).join('');
    }
    
    updateStats(report) {
      const stats = this.qualityControl.getStats();
      
      document.getElementById('critical-issues').textContent = stats.criticalIssues.toString();
      document.getElementById('high-issues').textContent = stats.highIssues.toString();
      document.getElementById('medium-issues').textContent = stats.mediumIssues.toString();
      document.getElementById('low-issues').textContent = stats.lowIssues.toString();
      document.getElementById('trend').textContent = stats.trend;
      document.getElementById('last-analysis').textContent = new Date().toLocaleString();
    }
    
    updateTrends(report) {
      const container = document.getElementById('quality-trends-chart');
      if (!container) return;
      
      // Crear gráfico simple de tendencias
      container.innerHTML = `
        <div class="flex items-end justify-center gap-2 h-full">
          <div class="flex flex-col items-center gap-2">
            <div class="w-8 bg-blue-600 rounded-t" style="height: ${report.trends.overallScore[0]}%"></div>
            <span class="text-xs text-gray-600">Semana 1</span>
          </div>
          <div class="flex flex-col items-center gap-2">
            <div class="w-8 bg-blue-600 rounded-t" style="height: ${report.trends.overallScore[1]}%"></div>
            <span class="text-xs text-gray-600">Semana 2</span>
          </div>
          <div class="flex flex-col items-center gap-2">
            <div class="w-8 bg-blue-600 rounded-t" style="height: ${report.trends.overallScore[2]}%"></div>
            <span class="text-xs text-gray-600">Semana 3</span>
          </div>
          <div class="flex flex-col items-center gap-2">
            <div class="w-8 bg-blue-600 rounded-t" style="height: ${report.trends.overallScore[3]}%"></div>
            <span class="text-xs text-gray-600">Semana 4</span>
          </div>
          <div class="flex flex-col items-center gap-2">
            <div class="w-8 bg-blue-600 rounded-t" style="height: ${report.trends.overallScore[4]}%"></div>
            <span class="text-xs text-gray-600">Semana 5</span>
          </div>
        </div>
      `;
    }
    
    async runAnalysis() {
      try {
        // Simular análisis de código
        const files = ['src/components/Button.astro', 'src/components/Card.astro', 'src/utils/auth.ts'];
        const urls = ['/', '/evaluacion', '/diario', '/planes', '/perfil'];
        
        // Ejecutar análisis
        await this.qualityControl.analyzeCode(files);
        await this.qualityControl.analyzeSecurity(files);
        await this.qualityControl.analyzeAccessibility(urls);
        await this.qualityControl.analyzeSEO(urls);
        await this.qualityControl.analyzePerformance(urls);
        
        // Actualizar dashboard
        await this.updateDashboard();
        
        console.log('Quality analysis completed');
        
      } catch (error) {
        console.error('Error running quality analysis:', error);
      }
    }
    
    exportReport() {
      const report = this.qualityControl.getCurrentReport();
      if (!report) return;
      
      const reportData = {
        timestamp: report.timestamp,
        overallScore: report.overallScore,
        grade: report.grade,
        metrics: report.metrics,
        issues: report.issues,
        recommendations: report.recommendations,
        stats: this.qualityControl.getStats(),
      };
      
      const blob = new Blob([JSON.stringify(reportData, null, 2)], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      
      const a = document.createElement('a');
      a.href = url;
      a.download = `quality-report-${new Date().toISOString()}.json`;
      a.click();
      
      URL.revokeObjectURL(url);
    }
    
    startAutoRefresh() {
      this.refreshInterval = setInterval(() => {
        this.updateDashboard();
      }, this.element.dataset.refreshInterval || 300000);
    }
    
    destroy() {
      if (this.refreshInterval) {
        clearInterval(this.refreshInterval);
      }
    }
  }
  
  // Inicializar cuando el DOM esté listo
  document.addEventListener('DOMContentLoaded', () => {
    const dashboardElements = document.querySelectorAll('.quality-dashboard');
    dashboardElements.forEach(element => {
      new QualityDashboard(element);
    });
  });
  
  // Exponer globalmente
  window.QualityDashboard = QualityDashboard;
</script>
