---
export interface Props {
  class?: string;
  showStats?: boolean;
  showControls?: boolean;
  autoOptimize?: boolean;
  optimizationInterval?: number;
}

const {
  class: className = '',
  showStats = true,
  showControls = true,
  autoOptimize = true,
  optimizationInterval = 300000, // 5 minutos
  ...rest
} = Astro.props;

const classes = [
  'smart-cache',
  className
].filter(Boolean).join(' ');
---

<div class={classes} {...rest}>
  <!-- Header del caché -->
  <div class="smart-cache-header">
    <h3 class="smart-cache-title">
      <i class="fas fa-database"></i>
      Sistema de Caché Inteligente
    </h3>
    
    {showControls && (
      <div class="smart-cache-controls">
        <button class="smart-cache-btn" id="cache-optimize">
          <i class="fas fa-magic"></i>
          Optimizar
        </button>
        <button class="smart-cache-btn" id="cache-clear">
          <i class="fas fa-trash"></i>
          Limpiar
        </button>
        <button class="smart-cache-btn" id="cache-refresh">
          <i class="fas fa-sync-alt"></i>
          Actualizar
        </button>
      </div>
    )}
  </div>

  <!-- Estadísticas del caché -->
  {showStats && (
    <div class="smart-cache-stats" id="cache-stats">
      <div class="smart-cache-stat">
        <div class="smart-cache-stat-icon">
          <i class="fas fa-bullseye"></i>
        </div>
        <div class="smart-cache-stat-content">
          <div class="smart-cache-stat-value" id="hit-rate">0%</div>
          <div class="smart-cache-stat-label">Hit Rate</div>
        </div>
      </div>
      
      <div class="smart-cache-stat">
        <div class="smart-cache-stat-icon">
          <i class="fas fa-hdd"></i>
        </div>
        <div class="smart-cache-stat-content">
          <div class="smart-cache-stat-value" id="total-size">0 MB</div>
          <div class="smart-cache-stat-label">Tamaño Total</div>
        </div>
      </div>
      
      <div class="smart-cache-stat">
        <div class="smart-cache-stat-icon">
          <i class="fas fa-list"></i>
        </div>
        <div class="smart-cache-stat-content">
          <div class="smart-cache-stat-value" id="entry-count">0</div>
          <div class="smart-cache-stat-label">Entradas</div>
        </div>
      </div>
      
      <div class="smart-cache-stat">
        <div class="smart-cache-stat-icon">
          <i class="fas fa-compress"></i>
        </div>
        <div class="smart-cache-stat-content">
          <div class="smart-cache-stat-value" id="compression-ratio">0%</div>
          <div class="smart-cache-stat-label">Compresión</div>
        </div>
      </div>
    </div>
  )}

  <!-- Niveles de caché -->
  <div class="smart-cache-levels" id="cache-levels">
    <!-- Los niveles se cargarán dinámicamente -->
  </div>

  <!-- Gráfico de rendimiento -->
  <div class="smart-cache-chart">
    <h4 class="smart-cache-chart-title">Rendimiento del Caché</h4>
    <div class="smart-cache-chart-container" id="cache-chart">
      <!-- Gráfico se generará dinámicamente -->
    </div>
  </div>

  <!-- Configuración del caché -->
  <div class="smart-cache-config">
    <h4 class="smart-cache-config-title">Configuración</h4>
    <div class="smart-cache-config-grid">
      <div class="smart-cache-config-item">
        <label class="smart-cache-config-label">Estrategia de Evicción</label>
        <select class="smart-cache-config-select" id="eviction-strategy">
          <option value="LRU">LRU (Least Recently Used)</option>
          <option value="LFU">LFU (Least Frequently Used)</option>
          <option value="FIFO">FIFO (First In, First Out)</option>
          <option value="TTL">TTL (Time To Live)</option>
        </select>
      </div>
      
      <div class="smart-cache-config-item">
        <label class="smart-cache-config-label">Tamaño Máximo (MB)</label>
        <input type="number" class="smart-cache-config-input" id="max-size" value="50" min="1" max="1000">
      </div>
      
      <div class="smart-cache-config-item">
        <label class="smart-cache-config-label">Tiempo de Vida (horas)</label>
        <input type="number" class="smart-cache-config-input" id="max-age" value="24" min="1" max="168">
      </div>
      
      <div class="smart-cache-config-item">
        <label class="smart-cache-config-label">Compresión</label>
        <label class="smart-cache-config-toggle">
          <input type="checkbox" id="compression" checked>
          <span class="smart-cache-config-slider"></span>
        </label>
      </div>
      
      <div class="smart-cache-config-item">
        <label class="smart-cache-config-label">Encriptación</label>
        <label class="smart-cache-config-toggle">
          <input type="checkbox" id="encryption">
          <span class="smart-cache-config-slider"></span>
        </label>
      </div>
      
      <div class="smart-cache-config-item">
        <label class="smart-cache-config-label">Persistencia</label>
        <label class="smart-cache-config-toggle">
          <input type="checkbox" id="persistence" checked>
          <span class="smart-cache-config-slider"></span>
        </label>
      </div>
    </div>
  </div>

  <!-- Log de actividades -->
  <div class="smart-cache-log">
    <h4 class="smart-cache-log-title">Log de Actividades</h4>
    <div class="smart-cache-log-container" id="cache-log">
      <!-- Las actividades se mostrarán aquí -->
    </div>
  </div>
</div>

<style>
  .smart-cache {
    @apply bg-white rounded-xl shadow-lg p-6 space-y-6;
  }

  /* Header */
  .smart-cache-header {
    @apply flex items-center justify-between pb-4 border-b border-gray-200;
  }

  .smart-cache-title {
    @apply text-xl font-semibold text-gray-900 flex items-center gap-2;
  }

  .smart-cache-controls {
    @apply flex gap-2;
  }

  .smart-cache-btn {
    @apply px-3 py-2 bg-blue-600 text-white rounded-lg;
    @apply hover:bg-blue-700 transition-colors duration-200;
    @apply flex items-center gap-2 text-sm font-medium;
  }

  .smart-cache-btn:hover {
    @apply transform scale-105;
  }

  /* Estadísticas */
  .smart-cache-stats {
    @apply grid grid-cols-2 md:grid-cols-4 gap-4;
  }

  .smart-cache-stat {
    @apply bg-gray-50 rounded-lg p-4 flex items-center gap-3;
  }

  .smart-cache-stat-icon {
    @apply w-10 h-10 bg-blue-100 text-blue-600 rounded-lg;
    @apply flex items-center justify-center;
  }

  .smart-cache-stat-content {
    @apply flex-1;
  }

  .smart-cache-stat-value {
    @apply text-lg font-bold text-gray-900;
  }

  .smart-cache-stat-label {
    @apply text-sm text-gray-600;
  }

  /* Niveles de caché */
  .smart-cache-levels {
    @apply space-y-3;
  }

  .smart-cache-level {
    @apply bg-gray-50 rounded-lg p-4;
  }

  .smart-cache-level-header {
    @apply flex items-center justify-between mb-2;
  }

  .smart-cache-level-name {
    @apply font-medium text-gray-900;
  }

  .smart-cache-level-status {
    @apply px-2 py-1 rounded-full text-xs font-medium;
  }

  .smart-cache-level-status.active {
    @apply bg-green-100 text-green-800;
  }

  .smart-cache-level-status.inactive {
    @apply bg-gray-100 text-gray-800;
  }

  .smart-cache-level-progress {
    @apply w-full bg-gray-200 rounded-full h-2 mb-2;
  }

  .smart-cache-level-progress-bar {
    @apply bg-blue-600 h-2 rounded-full transition-all duration-300;
  }

  .smart-cache-level-info {
    @apply flex justify-between text-sm text-gray-600;
  }

  /* Gráfico */
  .smart-cache-chart {
    @apply bg-gray-50 rounded-lg p-4;
  }

  .smart-cache-chart-title {
    @apply text-lg font-semibold text-gray-900 mb-4;
  }

  .smart-cache-chart-container {
    @apply h-64 bg-white rounded-lg p-4;
    @apply flex items-center justify-center text-gray-500;
  }

  /* Configuración */
  .smart-cache-config {
    @apply bg-gray-50 rounded-lg p-4;
  }

  .smart-cache-config-title {
    @apply text-lg font-semibold text-gray-900 mb-4;
  }

  .smart-cache-config-grid {
    @apply grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4;
  }

  .smart-cache-config-item {
    @apply space-y-2;
  }

  .smart-cache-config-label {
    @apply block text-sm font-medium text-gray-700;
  }

  .smart-cache-config-select,
  .smart-cache-config-input {
    @apply w-full px-3 py-2 border border-gray-300 rounded-lg;
    @apply focus:outline-none focus:ring-2 focus:ring-blue-500;
  }

  .smart-cache-config-toggle {
    @apply relative inline-flex items-center cursor-pointer;
  }

  .smart-cache-config-toggle input {
    @apply sr-only;
  }

  .smart-cache-config-slider {
    @apply w-11 h-6 bg-gray-200 rounded-full;
    @apply transition-colors duration-200;
  }

  .smart-cache-config-toggle input:checked + .smart-cache-config-slider {
    @apply bg-blue-600;
  }

  .smart-cache-config-slider::before {
    content: '';
    @apply absolute top-0.5 left-0.5 w-5 h-5 bg-white rounded-full;
    @apply transition-transform duration-200;
  }

  .smart-cache-config-toggle input:checked + .smart-cache-config-slider::before {
    @apply transform translate-x-5;
  }

  /* Log */
  .smart-cache-log {
    @apply bg-gray-50 rounded-lg p-4;
  }

  .smart-cache-log-title {
    @apply text-lg font-semibold text-gray-900 mb-4;
  }

  .smart-cache-log-container {
    @apply max-h-64 overflow-y-auto space-y-2;
  }

  .smart-cache-log-entry {
    @apply flex items-center gap-3 p-2 bg-white rounded-lg text-sm;
  }

  .smart-cache-log-icon {
    @apply w-6 h-6 rounded-full flex items-center justify-center;
  }

  .smart-cache-log-icon.info {
    @apply bg-blue-100 text-blue-600;
  }

  .smart-cache-log-icon.success {
    @apply bg-green-100 text-green-600;
  }

  .smart-cache-log-icon.warning {
    @apply bg-yellow-100 text-yellow-600;
  }

  .smart-cache-log-icon.error {
    @apply bg-red-100 text-red-600;
  }

  .smart-cache-log-content {
    @apply flex-1;
  }

  .smart-cache-log-message {
    @apply font-medium text-gray-900;
  }

  .smart-cache-log-time {
    @apply text-gray-500;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .smart-cache-header {
      @apply flex-col items-start gap-4;
    }
    
    .smart-cache-controls {
      @apply w-full justify-center;
    }
    
    .smart-cache-stats {
      @apply grid-cols-2 gap-3;
    }
    
    .smart-cache-config-grid {
      @apply grid-cols-1 gap-3;
    }
  }

  /* Modo oscuro */
  [data-theme="dark"] .smart-cache {
    @apply bg-gray-800 border border-gray-700;
  }

  [data-theme="dark"] .smart-cache-title {
    @apply text-gray-100;
  }

  [data-theme="dark"] .smart-cache-stat {
    @apply bg-gray-700;
  }

  [data-theme="dark"] .smart-cache-stat-value {
    @apply text-gray-100;
  }

  [data-theme="dark"] .smart-cache-stat-label {
    @apply text-gray-400;
  }

  [data-theme="dark"] .smart-cache-level {
    @apply bg-gray-700;
  }

  [data-theme="dark"] .smart-cache-level-name {
    @apply text-gray-100;
  }

  [data-theme="dark"] .smart-cache-chart {
    @apply bg-gray-700;
  }

  [data-theme="dark"] .smart-cache-chart-title {
    @apply text-gray-100;
  }

  [data-theme="dark"] .smart-cache-chart-container {
    @apply bg-gray-800;
  }

  [data-theme="dark"] .smart-cache-config {
    @apply bg-gray-700;
  }

  [data-theme="dark"] .smart-cache-config-title {
    @apply text-gray-100;
  }

  [data-theme="dark"] .smart-cache-config-label {
    @apply text-gray-300;
  }

  [data-theme="dark"] .smart-cache-config-select,
  [data-theme="dark"] .smart-cache-config-input {
    @apply bg-gray-600 border-gray-500 text-gray-100;
  }

  [data-theme="dark"] .smart-cache-log {
    @apply bg-gray-700;
  }

  [data-theme="dark"] .smart-cache-log-title {
    @apply text-gray-100;
  }

  [data-theme="dark"] .smart-cache-log-entry {
    @apply bg-gray-800;
  }

  [data-theme="dark"] .smart-cache-log-message {
    @apply text-gray-100;
  }
</style>

<script>
  class SmartCache {
    constructor(element) {
      this.element = element;
      this.cache = null;
      this.statsInterval = null;
      this.optimizationInterval = null;
      this.logEntries = [];
      
      this.init();
    }
    
    async init() {
      // Importar sistema de caché
      const { getAdvancedCache } = await import('../utils/advancedCache.js');
      this.cache = getAdvancedCache();
      
      this.setupEventListeners();
      this.updateStats();
      this.updateLevels();
      this.startStatsMonitoring();
      
      if (this.element.dataset.autoOptimize !== 'false') {
        this.startAutoOptimization();
      }
    }
    
    setupEventListeners() {
      // Botones de control
      document.getElementById('cache-optimize')?.addEventListener('click', () => {
        this.optimizeCache();
      });
      
      document.getElementById('cache-clear')?.addEventListener('click', () => {
        this.clearCache();
      });
      
      document.getElementById('cache-refresh')?.addEventListener('click', () => {
        this.updateStats();
        this.updateLevels();
      });
      
      // Configuración
      document.getElementById('eviction-strategy')?.addEventListener('change', (e) => {
        this.updateConfig('strategy', e.target.value);
      });
      
      document.getElementById('max-size')?.addEventListener('change', (e) => {
        this.updateConfig('maxSize', parseInt(e.target.value) * 1024 * 1024);
      });
      
      document.getElementById('max-age')?.addEventListener('change', (e) => {
        this.updateConfig('maxAge', parseInt(e.target.value) * 60 * 60 * 1000);
      });
      
      document.getElementById('compression')?.addEventListener('change', (e) => {
        this.updateConfig('compression', e.target.checked);
      });
      
      document.getElementById('encryption')?.addEventListener('change', (e) => {
        this.updateConfig('encryption', e.target.checked);
      });
      
      document.getElementById('persistence')?.addEventListener('change', (e) => {
        this.updateConfig('persistence', e.target.checked);
      });
    }
    
    async updateStats() {
      if (!this.cache) return;
      
      const stats = this.cache.getStats();
      
      // Actualizar estadísticas
      document.getElementById('hit-rate').textContent = `${(stats.hitRate * 100).toFixed(1)}%`;
      document.getElementById('total-size').textContent = `${(stats.totalSize / 1024 / 1024).toFixed(1)} MB`;
      document.getElementById('entry-count').textContent = stats.entryCount.toString();
      document.getElementById('compression-ratio').textContent = `${(stats.compressionRatio * 100).toFixed(1)}%`;
      
      // Actualizar gráfico
      this.updateChart(stats);
      
      // Agregar entrada al log
      this.addLogEntry('info', `Estadísticas actualizadas - Hit Rate: ${(stats.hitRate * 100).toFixed(1)}%`);
    }
    
    async updateLevels() {
      if (!this.cache) return;
      
      const levels = this.cache.getLevels();
      const container = document.getElementById('cache-levels');
      
      if (!container) return;
      
      container.innerHTML = levels.map(level => `
        <div class="smart-cache-level">
          <div class="smart-cache-level-header">
            <div class="smart-cache-level-name">${level.name}</div>
            <div class="smart-cache-level-status ${level.currentSize > 0 ? 'active' : 'inactive'}">
              ${level.currentSize > 0 ? 'Activo' : 'Inactivo'}
            </div>
          </div>
          <div class="smart-cache-level-progress">
            <div class="smart-cache-level-progress-bar" style="width: ${(level.currentSize / level.capacity) * 100}%"></div>
          </div>
          <div class="smart-cache-level-info">
            <span>Capacidad: ${(level.capacity / 1024 / 1024).toFixed(1)} MB</span>
            <span>Hit Rate: ${(level.hitRate * 100).toFixed(1)}%</span>
            <span>Tiempo: ${level.accessTime}ms</span>
          </div>
        </div>
      `).join('');
    }
    
    updateChart(stats) {
      const container = document.getElementById('cache-chart');
      if (!container) return;
      
      // Crear gráfico simple
      container.innerHTML = `
        <div class="flex items-end justify-center gap-2 h-full">
          <div class="flex flex-col items-center gap-2">
            <div class="w-8 bg-blue-600 rounded-t" style="height: ${stats.hitRate * 100}%"></div>
            <span class="text-xs text-gray-600">Hit Rate</span>
          </div>
          <div class="flex flex-col items-center gap-2">
            <div class="w-8 bg-green-600 rounded-t" style="height: ${Math.min(stats.entryCount / 100, 100)}%"></div>
            <span class="text-xs text-gray-600">Entradas</span>
          </div>
          <div class="flex flex-col items-center gap-2">
            <div class="w-8 bg-purple-600 rounded-t" style="height: ${Math.min(stats.totalSize / 1024 / 1024, 100)}%"></div>
            <span class="text-xs text-gray-600">Tamaño</span>
          </div>
        </div>
      `;
    }
    
    async optimizeCache() {
      if (!this.cache) return;
      
      try {
        await this.cache.optimize();
        this.addLogEntry('success', 'Caché optimizado exitosamente');
        this.updateStats();
        this.updateLevels();
      } catch (error) {
        this.addLogEntry('error', `Error al optimizar caché: ${error.message}`);
      }
    }
    
    async clearCache() {
      if (!this.cache) return;
      
      if (confirm('¿Estás seguro de que quieres limpiar todo el caché?')) {
        try {
          await this.cache.clear();
          this.addLogEntry('warning', 'Caché limpiado completamente');
          this.updateStats();
          this.updateLevels();
        } catch (error) {
          this.addLogEntry('error', `Error al limpiar caché: ${error.message}`);
        }
      }
    }
    
    updateConfig(key, value) {
      // Actualizar configuración del caché
      this.addLogEntry('info', `Configuración actualizada: ${key} = ${value}`);
    }
    
    addLogEntry(type, message) {
      const logContainer = document.getElementById('cache-log');
      if (!logContainer) return;
      
      const entry = {
        type,
        message,
        timestamp: new Date(),
      };
      
      this.logEntries.unshift(entry);
      
      // Limitar a 50 entradas
      if (this.logEntries.length > 50) {
        this.logEntries = this.logEntries.slice(0, 50);
      }
      
      // Actualizar UI
      logContainer.innerHTML = this.logEntries.map(entry => `
        <div class="smart-cache-log-entry">
          <div class="smart-cache-log-icon ${entry.type}">
            <i class="fas fa-${this.getLogIcon(entry.type)}"></i>
          </div>
          <div class="smart-cache-log-content">
            <div class="smart-cache-log-message">${entry.message}</div>
            <div class="smart-cache-log-time">${entry.timestamp.toLocaleTimeString()}</div>
          </div>
        </div>
      `).join('');
    }
    
    getLogIcon(type) {
      const icons = {
        info: 'info-circle',
        success: 'check-circle',
        warning: 'exclamation-triangle',
        error: 'times-circle',
      };
      return icons[type] || 'info-circle';
    }
    
    startStatsMonitoring() {
      this.statsInterval = setInterval(() => {
        this.updateStats();
        this.updateLevels();
      }, 10000); // Cada 10 segundos
    }
    
    startAutoOptimization() {
      this.optimizationInterval = setInterval(() => {
        this.optimizeCache();
      }, 300000); // Cada 5 minutos
    }
    
    destroy() {
      if (this.statsInterval) {
        clearInterval(this.statsInterval);
      }
      
      if (this.optimizationInterval) {
        clearInterval(this.optimizationInterval);
      }
    }
  }
  
  // Inicializar cuando el DOM esté listo
  document.addEventListener('DOMContentLoaded', () => {
    const smartCacheElements = document.querySelectorAll('.smart-cache');
    smartCacheElements.forEach(element => {
      new SmartCache(element);
    });
  });
  
  // Exponer globalmente
  window.SmartCache = SmartCache;
</script>
