---
// Dashboard de analytics para Sensus
---

<div class="analytics-dashboard">
  <div class="dashboard-header">
    <h2>Dashboard de Analytics</h2>
    <div class="dashboard-controls">
      <button id="refresh-analytics-btn" class="btn btn-primary">Actualizar</button>
      <button id="export-analytics-btn" class="btn btn-secondary">Exportar</button>
      <button id="analytics-settings-btn" class="btn btn-outline">Configuración</button>
    </div>
  </div>

  <div class="dashboard-grid">
    <!-- Métricas principales -->
    <div class="metric-card kpi-card">
      <h3>Métricas Principales</h3>
      <div class="kpi-grid">
        <div class="kpi-item">
          <span class="kpi-label">Usuarios Activos</span>
          <span class="kpi-value" id="active-users">0</span>
          <span class="kpi-change positive" id="active-users-change">+0%</span>
        </div>
        <div class="kpi-item">
          <span class="kpi-label">Sesiones</span>
          <span class="kpi-value" id="total-sessions">0</span>
          <span class="kpi-change positive" id="sessions-change">+0%</span>
        </div>
        <div class="kpi-item">
          <span class="kpi-label">Tasa de Conversión</span>
          <span class="kpi-value" id="conversion-rate">0%</span>
          <span class="kpi-change negative" id="conversion-change">+0%</span>
        </div>
        <div class="kpi-item">
          <span class="kpi-label">Ingresos</span>
          <span class="kpi-value" id="revenue">$0</span>
          <span class="kpi-change positive" id="revenue-change">+0%</span>
        </div>
      </div>
    </div>

    <!-- Gráfico de usuarios -->
    <div class="metric-card chart-card">
      <h3>Usuarios en el Tiempo</h3>
      <canvas id="users-chart" width="400" height="200"></canvas>
    </div>

    <!-- Gráfico de sesiones -->
    <div class="metric-card chart-card">
      <h3>Sesiones por Día</h3>
      <canvas id="sessions-chart" width="400" height="200"></canvas>
    </div>

    <!-- Gráfico de ingresos -->
    <div class="metric-card chart-card">
      <h3>Ingresos Mensuales</h3>
      <canvas id="revenue-chart" width="400" height="200"></canvas>
    </div>

    <!-- Gráfico de conversiones -->
    <div class="metric-card chart-card">
      <h3>Embudo de Conversión</h3>
      <canvas id="funnel-chart" width="400" height="200"></canvas>
    </div>

    <!-- Top páginas -->
    <div class="metric-card">
      <h3>Páginas Más Visitadas</h3>
      <div class="pages-list" id="top-pages">
        <div class="page-item">
          <span class="page-name">-</span>
          <span class="page-views">-</span>
          <span class="page-time">-</span>
        </div>
      </div>
    </div>

    <!-- Top fuentes de tráfico -->
    <div class="metric-card">
      <h3>Fuentes de Tráfico</h3>
      <div class="traffic-sources" id="traffic-sources">
        <div class="source-item">
          <span class="source-name">-</span>
          <span class="source-count">-</span>
          <span class="source-percentage">-</span>
        </div>
      </div>
    </div>

    <!-- Dispositivos -->
    <div class="metric-card">
      <h3>Dispositivos</h3>
      <div class="devices-list" id="devices-list">
        <div class="device-item">
          <span class="device-type">-</span>
          <span class="device-count">-</span>
          <span class="device-percentage">-</span>
        </div>
      </div>
    </div>

    <!-- Ubicaciones -->
    <div class="metric-card">
      <h3>Ubicaciones</h3>
      <div class="locations-list" id="locations-list">
        <div class="location-item">
          <span class="location-country">-</span>
          <span class="location-count">-</span>
          <span class="location-percentage">-</span>
        </div>
      </div>
    </div>

    <!-- Eventos -->
    <div class="metric-card">
      <h3>Eventos Recientes</h3>
      <div class="events-list" id="recent-events">
        <div class="event-item">
          <span class="event-time">-</span>
          <span class="event-type">-</span>
          <span class="event-description">No hay eventos recientes</span>
        </div>
      </div>
    </div>

    <!-- Configuración de analytics -->
    <div class="metric-card">
      <h3>Configuración de Analytics</h3>
      <div class="analytics-config">
        <div class="config-item">
          <label>
            <input type="checkbox" id="enable-page-tracking" checked>
            Tracking de Páginas
          </label>
        </div>
        <div class="config-item">
          <label>
            <input type="checkbox" id="enable-event-tracking" checked>
            Tracking de Eventos
          </label>
        </div>
        <div class="config-item">
          <label>
            <input type="checkbox" id="enable-session-tracking" checked>
            Tracking de Sesiones
          </label>
        </div>
        <div class="config-item">
          <label>
            <input type="checkbox" id="enable-user-tracking" checked>
            Tracking de Usuarios
          </label>
        </div>
        <div class="config-item">
          <label>
            <input type="checkbox" id="enable-heatmaps" checked>
            Heatmaps
          </label>
        </div>
        <div class="config-item">
          <label>
            <input type="checkbox" id="enable-scroll-tracking" checked>
            Tracking de Scroll
          </label>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  import { userAnalytics } from '../../utils/userAnalytics';
  import { businessMetrics } from '../../utils/businessMetrics';

  class AnalyticsDashboard {
    private charts: Map<string, any> = new Map();
    private updateInterval?: number;

    constructor() {
      this.init();
    }

    private init(): void {
      this.setupEventListeners();
      this.setupCharts();
      this.startRealTimeUpdates();
    }

    private setupEventListeners(): void {
      // Botón de actualizar
      document.getElementById('refresh-analytics-btn')?.addEventListener('click', () => {
        this.updateDashboard();
      });

      // Botón de exportar
      document.getElementById('export-analytics-btn')?.addEventListener('click', () => {
        this.exportAnalyticsData();
      });

      // Botón de configuración
      document.getElementById('analytics-settings-btn')?.addEventListener('click', () => {
        this.openAnalyticsSettings();
      });

      // Configuración de analytics
      document.getElementById('enable-page-tracking')?.addEventListener('change', (e) => {
        this.togglePageTracking((e.target as HTMLInputElement).checked);
      });

      document.getElementById('enable-event-tracking')?.addEventListener('change', (e) => {
        this.toggleEventTracking((e.target as HTMLInputElement).checked);
      });

      document.getElementById('enable-session-tracking')?.addEventListener('change', (e) => {
        this.toggleSessionTracking((e.target as HTMLInputElement).checked);
      });

      document.getElementById('enable-user-tracking')?.addEventListener('change', (e) => {
        this.toggleUserTracking((e.target as HTMLInputElement).checked);
      });

      document.getElementById('enable-heatmaps')?.addEventListener('change', (e) => {
        this.toggleHeatmaps((e.target as HTMLInputElement).checked);
      });

      document.getElementById('enable-scroll-tracking')?.addEventListener('change', (e) => {
        this.toggleScrollTracking((e.target as HTMLInputElement).checked);
      });
    }

    private setupCharts(): void {
      // Gráfico de usuarios
      const usersCanvas = document.getElementById('users-chart') as HTMLCanvasElement;
      if (usersCanvas) {
        const usersChart = this.createUsersChart(usersCanvas);
        this.charts.set('users', usersChart);
      }

      // Gráfico de sesiones
      const sessionsCanvas = document.getElementById('sessions-chart') as HTMLCanvasElement;
      if (sessionsCanvas) {
        const sessionsChart = this.createSessionsChart(sessionsCanvas);
        this.charts.set('sessions', sessionsChart);
      }

      // Gráfico de ingresos
      const revenueCanvas = document.getElementById('revenue-chart') as HTMLCanvasElement;
      if (revenueCanvas) {
        const revenueChart = this.createRevenueChart(revenueCanvas);
        this.charts.set('revenue', revenueChart);
      }

      // Gráfico de embudo
      const funnelCanvas = document.getElementById('funnel-chart') as HTMLCanvasElement;
      if (funnelCanvas) {
        const funnelChart = this.createFunnelChart(funnelCanvas);
        this.charts.set('funnel', funnelChart);
      }
    }

    private createUsersChart(canvas: HTMLCanvasElement): any {
      const ctx = canvas.getContext('2d');
      if (!ctx) return null;

      return {
        canvas,
        ctx,
        data: {
          labels: Array.from({ length: 30 }, (_, i) => {
            const date = new Date();
            date.setDate(date.getDate() - (29 - i));
            return date.toLocaleDateString();
          }),
          datasets: [{
            label: 'Usuarios Activos',
            data: Array.from({ length: 30 }, () => Math.floor(Math.random() * 1000) + 500),
            borderColor: '#4488ff',
            backgroundColor: 'rgba(68, 136, 255, 0.1)',
            fill: true,
          }],
        },
        update: (newData: any) => {
          this.data = { ...this.data, ...newData };
          this.drawUsersChart();
        },
        draw: () => {
          this.drawUsersChart();
        },
      };
    }

    private createSessionsChart(canvas: HTMLCanvasElement): any {
      const ctx = canvas.getContext('2d');
      if (!ctx) return null;

      return {
        canvas,
        ctx,
        data: {
          labels: Array.from({ length: 7 }, (_, i) => {
            const date = new Date();
            date.setDate(date.getDate() - (6 - i));
            return date.toLocaleDateString();
          }),
          datasets: [{
            label: 'Sesiones',
            data: Array.from({ length: 7 }, () => Math.floor(Math.random() * 2000) + 1000),
            borderColor: '#00aa00',
            backgroundColor: 'rgba(0, 170, 0, 0.1)',
            fill: true,
          }],
        },
        update: (newData: any) => {
          this.data = { ...this.data, ...newData };
          this.drawSessionsChart();
        },
        draw: () => {
          this.drawSessionsChart();
        },
      };
    }

    private createRevenueChart(canvas: HTMLCanvasElement): any {
      const ctx = canvas.getContext('2d');
      if (!ctx) return null;

      return {
        canvas,
        ctx,
        data: {
          labels: Array.from({ length: 12 }, (_, i) => {
            const date = new Date();
            date.setMonth(date.getMonth() - (11 - i));
            return date.toLocaleDateString('es', { month: 'short' });
          }),
          datasets: [{
            label: 'Ingresos',
            data: Array.from({ length: 12 }, () => Math.floor(Math.random() * 50000) + 25000),
            borderColor: '#ff6600',
            backgroundColor: 'rgba(255, 102, 0, 0.1)',
            fill: true,
          }],
        },
        update: (newData: any) => {
          this.data = { ...this.data, ...newData };
          this.drawRevenueChart();
        },
        draw: () => {
          this.drawRevenueChart();
        },
      };
    }

    private createFunnelChart(canvas: HTMLCanvasElement): any {
      const ctx = canvas.getContext('2d');
      if (!ctx) return null;

      return {
        canvas,
        ctx,
        data: {
          labels: ['Visitantes', 'Interesados', 'Registros', 'Conversiones'],
          datasets: [{
            data: [1000, 500, 100, 25],
            backgroundColor: ['#4488ff', '#00aa00', '#ffaa00', '#ff4444'],
            borderWidth: 2,
            borderColor: '#fff',
          }],
        },
        update: (newData: any) => {
          this.data = { ...this.data, ...newData };
          this.drawFunnelChart();
        },
        draw: () => {
          this.drawFunnelChart();
        },
      };
    }

    private drawUsersChart(): void {
      const chart = this.charts.get('users');
      if (!chart) return;

      const { ctx, canvas, data } = chart;
      const width = canvas.width;
      const height = canvas.height;

      // Limpiar canvas
      ctx.clearRect(0, 0, width, height);

      // Dibujar gráfico de líneas
      ctx.strokeStyle = data.datasets[0].borderColor;
      ctx.lineWidth = 2;
      ctx.beginPath();

      data.labels.forEach((label: string, index: number) => {
        const x = (index / (data.labels.length - 1)) * width;
        const y = height - (data.datasets[0].data[index] / Math.max(...data.datasets[0].data)) * height;

        if (index === 0) {
          ctx.moveTo(x, y);
        } else {
          ctx.lineTo(x, y);
        }
      });

      ctx.stroke();

      // Dibujar puntos
      ctx.fillStyle = data.datasets[0].borderColor;
      data.labels.forEach((label: string, index: number) => {
        const x = (index / (data.labels.length - 1)) * width;
        const y = height - (data.datasets[0].data[index] / Math.max(...data.datasets[0].data)) * height;
        ctx.beginPath();
        ctx.arc(x, y, 3, 0, 2 * Math.PI);
        ctx.fill();
      });
    }

    private drawSessionsChart(): void {
      const chart = this.charts.get('sessions');
      if (!chart) return;

      const { ctx, canvas, data } = chart;
      const width = canvas.width;
      const height = canvas.height;

      // Limpiar canvas
      ctx.clearRect(0, 0, width, height);

      // Dibujar gráfico de barras
      const barWidth = width / data.labels.length;
      const maxValue = Math.max(...data.datasets[0].data);

      data.labels.forEach((label: string, index: number) => {
        const barHeight = (data.datasets[0].data[index] / maxValue) * height;
        const x = index * barWidth;
        const y = height - barHeight;

        ctx.fillStyle = data.datasets[0].backgroundColor;
        ctx.fillRect(x, y, barWidth - 10, barHeight);

        ctx.fillStyle = data.datasets[0].borderColor;
        ctx.fillRect(x, y, barWidth - 10, barHeight);
      });
    }

    private drawRevenueChart(): void {
      const chart = this.charts.get('revenue');
      if (!chart) return;

      const { ctx, canvas, data } = chart;
      const width = canvas.width;
      const height = canvas.height;

      // Limpiar canvas
      ctx.clearRect(0, 0, width, height);

      // Dibujar gráfico de líneas
      ctx.strokeStyle = data.datasets[0].borderColor;
      ctx.lineWidth = 2;
      ctx.beginPath();

      data.labels.forEach((label: string, index: number) => {
        const x = (index / (data.labels.length - 1)) * width;
        const y = height - (data.datasets[0].data[index] / Math.max(...data.datasets[0].data)) * height;

        if (index === 0) {
          ctx.moveTo(x, y);
        } else {
          ctx.lineTo(x, y);
        }
      });

      ctx.stroke();

      // Dibujar puntos
      ctx.fillStyle = data.datasets[0].borderColor;
      data.labels.forEach((label: string, index: number) => {
        const x = (index / (data.labels.length - 1)) * width;
        const y = height - (data.datasets[0].data[index] / Math.max(...data.datasets[0].data)) * height;
        ctx.beginPath();
        ctx.arc(x, y, 3, 0, 2 * Math.PI);
        ctx.fill();
      });
    }

    private drawFunnelChart(): void {
      const chart = this.charts.get('funnel');
      if (!chart) return;

      const { ctx, canvas, data } = chart;
      const width = canvas.width;
      const height = canvas.height;

      // Limpiar canvas
      ctx.clearRect(0, 0, width, height);

      // Dibujar gráfico de embudo
      const maxValue = Math.max(...data.datasets[0].data);
      const barHeight = height / data.labels.length;

      data.labels.forEach((label: string, index: number) => {
        const barWidth = (data.datasets[0].data[index] / maxValue) * width;
        const x = (width - barWidth) / 2;
        const y = index * barHeight;

        ctx.fillStyle = data.datasets[0].backgroundColor[index];
        ctx.fillRect(x, y, barWidth, barHeight - 5);

        // Dibujar etiqueta
        ctx.fillStyle = '#333';
        ctx.font = '12px Arial';
        ctx.textAlign = 'center';
        ctx.fillText(label, width / 2, y + barHeight / 2 + 4);
        ctx.fillText(data.datasets[0].data[index].toString(), width / 2, y + barHeight / 2 + 16);
      });
    }

    private startRealTimeUpdates(): void {
      this.updateInterval = setInterval(() => {
        this.updateDashboard();
      }, 30000); // Actualizar cada 30 segundos
    }

    private async updateDashboard(): Promise<void> {
      try {
        // Actualizar métricas principales
        await this.updateKPIs();

        // Actualizar listas
        await this.updateTopPages();
        await this.updateTrafficSources();
        await this.updateDevices();
        await this.updateLocations();
        await this.updateRecentEvents();

        // Actualizar gráficos
        this.updateCharts();
      } catch (error) {
        console.error('Error updating analytics dashboard:', error);
      }
    }

    private async updateKPIs(): Promise<void> {
      // Simular datos de KPIs
      const activeUsers = Math.floor(Math.random() * 1000) + 500;
      const totalSessions = Math.floor(Math.random() * 2000) + 1000;
      const conversionRate = Math.random() * 10;
      const revenue = Math.floor(Math.random() * 50000) + 25000;

      // Actualizar UI
      this.updateElement('active-users', activeUsers.toString());
      this.updateElement('total-sessions', totalSessions.toString());
      this.updateElement('conversion-rate', `${conversionRate.toFixed(1)}%`);
      this.updateElement('revenue', `$${revenue.toLocaleString()}`);

      // Actualizar cambios
      this.updateElement('active-users-change', `+${Math.floor(Math.random() * 20)}%`);
      this.updateElement('sessions-change', `+${Math.floor(Math.random() * 15)}%`);
      this.updateElement('conversion-change', `${Math.random() > 0.5 ? '+' : '-'}${Math.floor(Math.random() * 5)}%`);
      this.updateElement('revenue-change', `+${Math.floor(Math.random() * 25)}%`);
    }

    private async updateTopPages(): Promise<void> {
      const pages = [
        { name: 'Inicio', views: Math.floor(Math.random() * 5000) + 2500, time: Math.floor(Math.random() * 300) + 60 },
        { name: 'Características', views: Math.floor(Math.random() * 2000) + 1000, time: Math.floor(Math.random() * 600) + 120 },
        { name: 'Precios', views: Math.floor(Math.random() * 1500) + 750, time: Math.floor(Math.random() * 900) + 180 },
        { name: 'Acerca de', views: Math.floor(Math.random() * 1000) + 500, time: Math.floor(Math.random() * 180) + 60 },
        { name: 'Contacto', views: Math.floor(Math.random() * 800) + 400, time: Math.floor(Math.random() * 240) + 120 },
      ];

      const pagesList = document.getElementById('top-pages');
      if (pagesList) {
        pagesList.innerHTML = pages.map(page => `
          <div class="page-item">
            <span class="page-name">${page.name}</span>
            <span class="page-views">${page.views.toLocaleString()}</span>
            <span class="page-time">${Math.floor(page.time / 60)}:${(page.time % 60).toString().padStart(2, '0')}</span>
          </div>
        `).join('');
      }
    }

    private async updateTrafficSources(): Promise<void> {
      const sources = [
        { name: 'Orgánico', count: Math.floor(Math.random() * 3000) + 1500, percentage: 40 },
        { name: 'Pago', count: Math.floor(Math.random() * 2000) + 1000, percentage: 25 },
        { name: 'Social', count: Math.floor(Math.random() * 1500) + 750, percentage: 20 },
        { name: 'Referencia', count: Math.floor(Math.random() * 1000) + 500, percentage: 15 },
      ];

      const trafficSources = document.getElementById('traffic-sources');
      if (trafficSources) {
        trafficSources.innerHTML = sources.map(source => `
          <div class="source-item">
            <span class="source-name">${source.name}</span>
            <span class="source-count">${source.count.toLocaleString()}</span>
            <span class="source-percentage">${source.percentage}%</span>
          </div>
        `).join('');
      }
    }

    private async updateDevices(): Promise<void> {
      const devices = [
        { type: 'Escritorio', count: Math.floor(Math.random() * 4000) + 2000, percentage: 50 },
        { type: 'Móvil', count: Math.floor(Math.random() * 3000) + 1500, percentage: 35 },
        { type: 'Tablet', count: Math.floor(Math.random() * 1000) + 500, percentage: 15 },
      ];

      const devicesList = document.getElementById('devices-list');
      if (devicesList) {
        devicesList.innerHTML = devices.map(device => `
          <div class="device-item">
            <span class="device-type">${device.type}</span>
            <span class="device-count">${device.count.toLocaleString()}</span>
            <span class="device-percentage">${device.percentage}%</span>
          </div>
        `).join('');
      }
    }

    private async updateLocations(): Promise<void> {
      const locations = [
        { country: 'Estados Unidos', count: Math.floor(Math.random() * 2000) + 1000, percentage: 35 },
        { country: 'España', count: Math.floor(Math.random() * 1500) + 750, percentage: 25 },
        { country: 'México', count: Math.floor(Math.random() * 1000) + 500, percentage: 20 },
        { country: 'Argentina', count: Math.floor(Math.random() * 800) + 400, percentage: 15 },
        { country: 'Colombia', count: Math.floor(Math.random() * 600) + 300, percentage: 5 },
      ];

      const locationsList = document.getElementById('locations-list');
      if (locationsList) {
        locationsList.innerHTML = locations.map(location => `
          <div class="location-item">
            <span class="location-country">${location.country}</span>
            <span class="location-count">${location.count.toLocaleString()}</span>
            <span class="location-percentage">${location.percentage}%</span>
          </div>
        `).join('');
      }
    }

    private async updateRecentEvents(): Promise<void> {
      const events = [
        { time: 'Hace 2 min', type: 'page_view', description: 'Usuario visitó página de precios' },
        { time: 'Hace 5 min', type: 'click', description: 'Usuario hizo clic en botón de registro' },
        { time: 'Hace 8 min', type: 'form_submit', description: 'Usuario envió formulario de contacto' },
        { time: 'Hace 12 min', type: 'download', description: 'Usuario descargó documento PDF' },
        { time: 'Hace 15 min', type: 'search', description: 'Usuario buscó "características"' },
      ];

      const recentEvents = document.getElementById('recent-events');
      if (recentEvents) {
        recentEvents.innerHTML = events.map(event => `
          <div class="event-item">
            <span class="event-time">${event.time}</span>
            <span class="event-type">${event.type.replace('_', ' ')}</span>
            <span class="event-description">${event.description}</span>
          </div>
        `).join('');
      }
    }

    private updateCharts(): void {
      // Actualizar gráficos con nuevos datos
      this.charts.forEach(chart => {
        if (chart.update) {
          chart.update({});
        }
      });
    }

    private updateElement(id: string, value: string): void {
      const element = document.getElementById(id);
      if (element) {
        element.textContent = value;
      }
    }

    private togglePageTracking(enabled: boolean): void {
      console.log('Page tracking toggled:', enabled);
    }

    private toggleEventTracking(enabled: boolean): void {
      console.log('Event tracking toggled:', enabled);
    }

    private toggleSessionTracking(enabled: boolean): void {
      console.log('Session tracking toggled:', enabled);
    }

    private toggleUserTracking(enabled: boolean): void {
      console.log('User tracking toggled:', enabled);
    }

    private toggleHeatmaps(enabled: boolean): void {
      console.log('Heatmaps toggled:', enabled);
    }

    private toggleScrollTracking(enabled: boolean): void {
      console.log('Scroll tracking toggled:', enabled);
    }

    private async exportAnalyticsData(): Promise<void> {
      try {
        const data = {
          timestamp: new Date().toISOString(),
          kpis: {
            activeUsers: document.getElementById('active-users')?.textContent,
            totalSessions: document.getElementById('total-sessions')?.textContent,
            conversionRate: document.getElementById('conversion-rate')?.textContent,
            revenue: document.getElementById('revenue')?.textContent,
          },
          charts: Array.from(this.charts.keys()),
          config: userAnalytics.getConfig(),
        };

        const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `analytics-data-${Date.now()}.json`;
        a.click();
        URL.revokeObjectURL(url);
      } catch (error) {
        console.error('Error exporting analytics data:', error);
      }
    }

    private openAnalyticsSettings(): void {
      console.log('Opening analytics settings...');
    }

    public destroy(): void {
      if (this.updateInterval) {
        clearInterval(this.updateInterval);
      }
    }
  }

  // Inicializar dashboard cuando el DOM esté listo
  document.addEventListener('DOMContentLoaded', () => {
    new AnalyticsDashboard();
  });
</script>

<style>
  .analytics-dashboard {
    padding: 2rem;
    max-width: 1400px;
    margin: 0 auto;
  }

  .dashboard-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
  }

  .dashboard-controls {
    display: flex;
    gap: 1rem;
  }

  .dashboard-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
  }

  .metric-card {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: var(--border-radius);
    padding: 1.5rem;
    box-shadow: var(--shadow-sm);
  }

  .metric-card h3 {
    margin: 0 0 1rem 0;
    color: var(--color-text-primary);
  }

  .kpi-card {
    grid-column: span 2;
  }

  .chart-card {
    grid-column: span 2;
  }

  .kpi-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1rem;
  }

  .kpi-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 1rem;
    background: var(--color-surface-secondary);
    border-radius: var(--border-radius);
  }

  .kpi-label {
    font-size: 0.875rem;
    color: var(--color-text-secondary);
    margin-bottom: 0.5rem;
  }

  .kpi-value {
    font-size: 2rem;
    font-weight: 700;
    color: var(--color-text-primary);
    margin-bottom: 0.25rem;
  }

  .kpi-change {
    font-size: 0.75rem;
    font-weight: 500;
    padding: 0.25rem 0.5rem;
    border-radius: var(--border-radius);
  }

  .kpi-change.positive {
    background: var(--color-success);
    color: white;
  }

  .kpi-change.negative {
    background: var(--color-error);
    color: white;
  }

  .pages-list,
  .traffic-sources,
  .devices-list,
  .locations-list,
  .events-list {
    max-height: 300px;
    overflow-y: auto;
  }

  .page-item,
  .source-item,
  .device-item,
  .location-item,
  .event-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    margin-bottom: 0.5rem;
    background: var(--color-surface-secondary);
    border-radius: var(--border-radius);
  }

  .page-name,
  .source-name,
  .device-type,
  .location-country,
  .event-type {
    font-weight: 500;
    color: var(--color-text-primary);
  }

  .page-views,
  .source-count,
  .device-count,
  .location-count {
    color: var(--color-text-secondary);
  }

  .page-time,
  .source-percentage,
  .device-percentage,
  .location-percentage,
  .event-time {
    font-size: 0.75rem;
    color: var(--color-text-secondary);
  }

  .event-description {
    flex: 1;
    margin: 0 1rem;
    color: var(--color-text-primary);
  }

  .analytics-config {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1rem;
  }

  .config-item {
    display: flex;
    align-items: center;
  }

  .config-item label {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    cursor: pointer;
    color: var(--color-text-primary);
  }

  .config-item input[type="checkbox"] {
    width: 1rem;
    height: 1rem;
  }

  @media (max-width: 768px) {
    .dashboard-grid {
      grid-template-columns: 1fr;
    }

    .kpi-card,
    .chart-card {
      grid-column: span 1;
    }

    .kpi-grid,
    .analytics-config {
      grid-template-columns: 1fr;
    }
  }
</style>
