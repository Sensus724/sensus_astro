---
export interface Props {
  class?: string;
  showStats?: boolean;
  showPreferences?: boolean;
  showSubscription?: boolean;
}

const {
  class: className = '',
  showStats = true,
  showPreferences = true,
  showSubscription = true,
  ...rest
} = Astro.props;

const classes = [
  'user-profile',
  className
].filter(Boolean).join(' ');
---

<div class={classes} {...rest}>
  <!-- Header del perfil -->
  <div class="user-profile-header">
    <div class="user-profile-avatar">
      <img id="user-avatar" src="/assets/images/default-avatar.png" alt="Avatar del usuario" />
      <button class="user-profile-avatar-edit" id="edit-avatar">
        <i class="fas fa-camera"></i>
      </button>
    </div>
    
    <div class="user-profile-info">
      <h2 class="user-profile-name" id="user-name">Cargando...</h2>
      <p class="user-profile-email" id="user-email">Cargando...</p>
      <div class="user-profile-badge" id="user-badge">
        <i class="fas fa-crown"></i>
        <span>Usuario Gratuito</span>
      </div>
    </div>
    
    <div class="user-profile-actions">
      <button class="user-profile-edit" id="edit-profile">
        <i class="fas fa-edit"></i>
        Editar Perfil
      </button>
    </div>
  </div>

  <!-- Estadísticas del usuario -->
  {showStats && (
    <div class="user-profile-stats">
      <h3 class="user-profile-section-title">Estadísticas</h3>
      <div class="user-stats-grid">
        <div class="user-stat-item">
          <div class="user-stat-icon">
            <i class="fas fa-book-open"></i>
          </div>
          <div class="user-stat-content">
            <div class="user-stat-value" id="total-diary-entries">0</div>
            <div class="user-stat-label">Entradas del Diario</div>
          </div>
        </div>
        
        <div class="user-stat-item">
          <div class="user-stat-icon">
            <i class="fas fa-clipboard-check"></i>
          </div>
          <div class="user-stat-content">
            <div class="user-stat-value" id="total-evaluations">0</div>
            <div class="user-stat-label">Evaluaciones</div>
          </div>
        </div>
        
        <div class="user-stat-item">
          <div class="user-stat-icon">
            <i class="fas fa-fire"></i>
          </div>
          <div class="user-stat-content">
            <div class="user-stat-value" id="current-streak">0</div>
            <div class="user-stat-label">Racha Actual</div>
          </div>
        </div>
        
        <div class="user-stat-item">
          <div class="user-stat-icon">
            <i class="fas fa-trophy"></i>
          </div>
          <div class="user-stat-content">
            <div class="user-stat-value" id="longest-streak">0</div>
            <div class="user-stat-label">Mejor Racha</div>
          </div>
        </div>
      </div>
    </div>
  )}

  <!-- Preferencias del usuario -->
  {showPreferences && (
    <div class="user-profile-preferences">
      <h3 class="user-profile-section-title">Preferencias</h3>
      <div class="user-preferences-grid">
        <div class="user-preference-item">
          <div class="user-preference-label">
            <i class="fas fa-palette"></i>
            <span>Tema</span>
          </div>
          <div class="user-preference-control">
            <select id="theme-preference" class="user-preference-select">
              <option value="auto">Automático</option>
              <option value="light">Claro</option>
              <option value="dark">Oscuro</option>
            </select>
          </div>
        </div>
        
        <div class="user-preference-item">
          <div class="user-preference-label">
            <i class="fas fa-bell"></i>
            <span>Notificaciones</span>
          </div>
          <div class="user-preference-control">
            <label class="user-preference-toggle">
              <input type="checkbox" id="notifications-preference" />
              <span class="user-preference-slider"></span>
            </label>
          </div>
        </div>
        
        <div class="user-preference-item">
          <div class="user-preference-label">
            <i class="fas fa-envelope"></i>
            <span>Newsletter</span>
          </div>
          <div class="user-preference-control">
            <label class="user-preference-toggle">
              <input type="checkbox" id="newsletter-preference" />
              <span class="user-preference-slider"></span>
            </label>
          </div>
        </div>
        
        <div class="user-preference-item">
          <div class="user-preference-label">
            <i class="fas fa-globe"></i>
            <span>Idioma</span>
          </div>
          <div class="user-preference-control">
            <select id="language-preference" class="user-preference-select">
              <option value="es">Español</option>
              <option value="en">English</option>
              <option value="fr">Français</option>
            </select>
          </div>
        </div>
      </div>
    </div>
  )}

  <!-- Información de suscripción -->
  {showSubscription && (
    <div class="user-profile-subscription">
      <h3 class="user-profile-section-title">Suscripción</h3>
      <div class="user-subscription-card">
        <div class="user-subscription-info">
          <div class="user-subscription-plan" id="subscription-plan">
            <i class="fas fa-crown"></i>
            <span>Plan Gratuito</span>
          </div>
          <div class="user-subscription-status" id="subscription-status">
            <span class="user-subscription-badge active">Activa</span>
          </div>
        </div>
        
        <div class="user-subscription-features">
          <div class="user-subscription-feature">
            <i class="fas fa-check text-green-500"></i>
            <span>Diario emocional ilimitado</span>
          </div>
          <div class="user-subscription-feature">
            <i class="fas fa-check text-green-500"></i>
            <span>Evaluaciones GAD-7</span>
          </div>
          <div class="user-subscription-feature">
            <i class="fas fa-check text-green-500"></i>
            <span>Recursos educativos</span>
          </div>
          <div class="user-subscription-feature">
            <i class="fas fa-times text-gray-400"></i>
            <span>Análisis avanzados</span>
          </div>
          <div class="user-subscription-feature">
            <i class="fas fa-times text-gray-400"></i>
            <span>Soporte prioritario</span>
          </div>
        </div>
        
        <div class="user-subscription-actions">
          <button class="user-subscription-upgrade" id="upgrade-subscription">
            <i class="fas fa-arrow-up"></i>
            Actualizar Plan
          </button>
        </div>
      </div>
    </div>
  )}

  <!-- Acciones del perfil -->
  <div class="user-profile-actions-section">
    <h3 class="user-profile-section-title">Acciones</h3>
    <div class="user-actions-grid">
      <button class="user-action-btn" id="export-data">
        <i class="fas fa-download"></i>
        <span>Exportar Datos</span>
      </button>
      
      <button class="user-action-btn" id="privacy-settings">
        <i class="fas fa-shield-alt"></i>
        <span>Privacidad</span>
      </button>
      
      <button class="user-action-btn" id="help-support">
        <i class="fas fa-question-circle"></i>
        <span>Ayuda</span>
      </button>
      
      <button class="user-action-btn danger" id="delete-account">
        <i class="fas fa-trash"></i>
        <span>Eliminar Cuenta</span>
      </button>
    </div>
  </div>
</div>

<style>
  .user-profile {
    @apply bg-white rounded-xl shadow-lg p-6 space-y-6;
  }

  /* Header del perfil */
  .user-profile-header {
    @apply flex items-start gap-6 pb-6 border-b border-gray-200;
  }

  .user-profile-avatar {
    @apply relative;
  }

  .user-profile-avatar img {
    @apply w-20 h-20 rounded-full object-cover border-4 border-blue-100;
  }

  .user-profile-avatar-edit {
    @apply absolute -bottom-1 -right-1 w-8 h-8 bg-blue-600 text-white;
    @apply rounded-full flex items-center justify-center text-sm;
    @apply hover:bg-blue-700 transition-colors duration-200;
  }

  .user-profile-info {
    @apply flex-1;
  }

  .user-profile-name {
    @apply text-2xl font-bold text-gray-900 mb-1;
  }

  .user-profile-email {
    @apply text-gray-600 mb-3;
  }

  .user-profile-badge {
    @apply inline-flex items-center gap-2 px-3 py-1 bg-yellow-100 text-yellow-800;
    @apply rounded-full text-sm font-medium;
  }

  .user-profile-badge.premium {
    @apply bg-purple-100 text-purple-800;
  }

  .user-profile-badge.enterprise {
    @apply bg-gray-100 text-gray-800;
  }

  .user-profile-actions {
    @apply flex flex-col gap-2;
  }

  .user-profile-edit {
    @apply px-4 py-2 bg-blue-600 text-white rounded-lg font-medium;
    @apply hover:bg-blue-700 transition-colors duration-200;
    @apply flex items-center gap-2;
  }

  /* Estadísticas */
  .user-profile-stats {
    @apply space-y-4;
  }

  .user-profile-section-title {
    @apply text-lg font-semibold text-gray-900 mb-4;
  }

  .user-stats-grid {
    @apply grid grid-cols-2 md:grid-cols-4 gap-4;
  }

  .user-stat-item {
    @apply bg-gray-50 rounded-lg p-4 text-center;
  }

  .user-stat-icon {
    @apply w-8 h-8 bg-blue-100 text-blue-600 rounded-lg;
    @apply flex items-center justify-center mx-auto mb-2;
  }

  .user-stat-value {
    @apply text-2xl font-bold text-gray-900 mb-1;
  }

  .user-stat-label {
    @apply text-sm text-gray-600;
  }

  /* Preferencias */
  .user-preferences-grid {
    @apply space-y-4;
  }

  .user-preference-item {
    @apply flex items-center justify-between py-3 border-b border-gray-100;
  }

  .user-preference-label {
    @apply flex items-center gap-3 text-gray-700;
  }

  .user-preference-control {
    @apply flex items-center;
  }

  .user-preference-select {
    @apply px-3 py-2 border border-gray-300 rounded-lg;
    @apply focus:outline-none focus:ring-2 focus:ring-blue-500;
  }

  .user-preference-toggle {
    @apply relative inline-flex items-center cursor-pointer;
  }

  .user-preference-toggle input {
    @apply sr-only;
  }

  .user-preference-slider {
    @apply w-11 h-6 bg-gray-200 rounded-full;
    @apply transition-colors duration-200;
  }

  .user-preference-toggle input:checked + .user-preference-slider {
    @apply bg-blue-600;
  }

  .user-preference-slider::before {
    content: '';
    @apply absolute top-0.5 left-0.5 w-5 h-5 bg-white rounded-full;
    @apply transition-transform duration-200;
  }

  .user-preference-toggle input:checked + .user-preference-slider::before {
    @apply transform translate-x-5;
  }

  /* Suscripción */
  .user-subscription-card {
    @apply bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg p-6;
  }

  .user-subscription-info {
    @apply flex items-center justify-between mb-4;
  }

  .user-subscription-plan {
    @apply flex items-center gap-2 text-lg font-semibold text-gray-900;
  }

  .user-subscription-badge {
    @apply px-3 py-1 rounded-full text-sm font-medium;
  }

  .user-subscription-badge.active {
    @apply bg-green-100 text-green-800;
  }

  .user-subscription-badge.inactive {
    @apply bg-red-100 text-red-800;
  }

  .user-subscription-features {
    @apply space-y-2 mb-4;
  }

  .user-subscription-feature {
    @apply flex items-center gap-3 text-sm;
  }

  .user-subscription-actions {
    @apply flex justify-end;
  }

  .user-subscription-upgrade {
    @apply px-4 py-2 bg-gradient-to-r from-blue-600 to-purple-600;
    @apply text-white rounded-lg font-medium;
    @apply hover:from-blue-700 hover:to-purple-700 transition-all duration-200;
    @apply flex items-center gap-2;
  }

  /* Acciones */
  .user-actions-grid {
    @apply grid grid-cols-2 md:grid-cols-4 gap-4;
  }

  .user-action-btn {
    @apply flex flex-col items-center gap-2 p-4 bg-gray-50 rounded-lg;
    @apply hover:bg-gray-100 transition-colors duration-200;
    @apply text-gray-700;
  }

  .user-action-btn.danger {
    @apply text-red-600 hover:bg-red-50;
  }

  .user-action-btn i {
    @apply text-xl;
  }

  .user-action-btn span {
    @apply text-sm font-medium;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .user-profile-header {
      @apply flex-col items-center text-center gap-4;
    }
    
    .user-profile-actions {
      @apply w-full;
    }
    
    .user-profile-edit {
      @apply w-full justify-center;
    }
    
    .user-stats-grid {
      @apply grid-cols-2 gap-3;
    }
    
    .user-actions-grid {
      @apply grid-cols-2 gap-3;
    }
  }

  /* Modo oscuro */
  [data-theme="dark"] .user-profile {
    @apply bg-gray-800 border border-gray-700;
  }

  [data-theme="dark"] .user-profile-header {
    @apply border-gray-700;
  }

  [data-theme="dark"] .user-profile-name {
    @apply text-gray-100;
  }

  [data-theme="dark"] .user-profile-email {
    @apply text-gray-400;
  }

  [data-theme="dark"] .user-profile-section-title {
    @apply text-gray-100;
  }

  [data-theme="dark"] .user-stat-item {
    @apply bg-gray-700;
  }

  [data-theme="dark"] .user-stat-value {
    @apply text-gray-100;
  }

  [data-theme="dark"] .user-stat-label {
    @apply text-gray-400;
  }

  [data-theme="dark"] .user-preference-label {
    @apply text-gray-300;
  }

  [data-theme="dark"] .user-preference-select {
    @apply bg-gray-700 border-gray-600 text-gray-100;
  }

  [data-theme="dark"] .user-subscription-card {
    @apply bg-gradient-to-r from-gray-700 to-gray-600;
  }

  [data-theme="dark"] .user-subscription-plan {
    @apply text-gray-100;
  }

  [data-theme="dark"] .user-action-btn {
    @apply bg-gray-700 text-gray-300 hover:bg-gray-600;
  }
</style>

<script>
  class UserProfile {
    constructor() {
      this.profile = null;
      this.isLoading = true;
      
      this.init();
    }
    
    async init() {
      await this.loadUserProfile();
      this.setupEventListeners();
    }
    
    async loadUserProfile() {
      try {
        // Simular carga de perfil (reemplazar con llamada real a Firebase)
        const mockProfile = {
          uid: 'user123',
          email: 'usuario@ejemplo.com',
          displayName: 'Juan Pérez',
          firstName: 'Juan',
          lastName: 'Pérez',
          birthDate: '1990-01-01',
          photoURL: '/assets/images/default-avatar.png',
          preferences: {
            theme: 'auto',
            notifications: true,
            newsletter: false,
            language: 'es',
          },
          stats: {
            totalDiaryEntries: 15,
            totalEvaluations: 8,
            currentStreak: 5,
            longestStreak: 12,
          },
          subscription: {
            plan: 'free',
            status: 'active',
          },
        };
        
        this.profile = mockProfile;
        this.updateUI();
        
      } catch (error) {
        console.error('Error loading user profile:', error);
      } finally {
        this.isLoading = false;
      }
    }
    
    updateUI() {
      if (!this.profile) return;
      
      // Actualizar información básica
      document.getElementById('user-name').textContent = this.profile.displayName;
      document.getElementById('user-email').textContent = this.profile.email;
      
      if (this.profile.photoURL) {
        document.getElementById('user-avatar').src = this.profile.photoURL;
      }
      
      // Actualizar estadísticas
      document.getElementById('total-diary-entries').textContent = this.profile.stats.totalDiaryEntries;
      document.getElementById('total-evaluations').textContent = this.profile.stats.totalEvaluations;
      document.getElementById('current-streak').textContent = this.profile.stats.currentStreak;
      document.getElementById('longest-streak').textContent = this.profile.stats.longestStreak;
      
      // Actualizar preferencias
      document.getElementById('theme-preference').value = this.profile.preferences.theme;
      document.getElementById('notifications-preference').checked = this.profile.preferences.notifications;
      document.getElementById('newsletter-preference').checked = this.profile.preferences.newsletter;
      document.getElementById('language-preference').value = this.profile.preferences.language;
      
      // Actualizar suscripción
      this.updateSubscriptionUI();
    }
    
    updateSubscriptionUI() {
      const plan = this.profile.subscription.plan;
      const status = this.profile.subscription.status;
      
      // Actualizar badge del usuario
      const userBadge = document.getElementById('user-badge');
      const badgeIcon = userBadge.querySelector('i');
      const badgeText = userBadge.querySelector('span');
      
      if (plan === 'premium') {
        badgeIcon.className = 'fas fa-crown';
        badgeText.textContent = 'Usuario Premium';
        userBadge.className = 'user-profile-badge premium';
      } else if (plan === 'enterprise') {
        badgeIcon.className = 'fas fa-building';
        badgeText.textContent = 'Usuario Enterprise';
        userBadge.className = 'user-profile-badge enterprise';
      } else {
        badgeIcon.className = 'fas fa-crown';
        badgeText.textContent = 'Usuario Gratuito';
        userBadge.className = 'user-profile-badge';
      }
      
      // Actualizar información de suscripción
      document.getElementById('subscription-plan').innerHTML = `
        <i class="fas fa-crown"></i>
        <span>Plan ${plan.charAt(0).toUpperCase() + plan.slice(1)}</span>
      `;
      
      const statusBadge = document.getElementById('subscription-status').querySelector('.user-subscription-badge');
      statusBadge.textContent = status === 'active' ? 'Activa' : 'Inactiva';
      statusBadge.className = `user-subscription-badge ${status}`;
    }
    
    setupEventListeners() {
      // Editar perfil
      document.getElementById('edit-profile')?.addEventListener('click', () => {
        this.editProfile();
      });
      
      // Cambiar avatar
      document.getElementById('edit-avatar')?.addEventListener('click', () => {
        this.changeAvatar();
      });
      
      // Actualizar preferencias
      document.getElementById('theme-preference')?.addEventListener('change', (e) => {
        this.updatePreference('theme', e.target.value);
      });
      
      document.getElementById('notifications-preference')?.addEventListener('change', (e) => {
        this.updatePreference('notifications', e.target.checked);
      });
      
      document.getElementById('newsletter-preference')?.addEventListener('change', (e) => {
        this.updatePreference('newsletter', e.target.checked);
      });
      
      document.getElementById('language-preference')?.addEventListener('change', (e) => {
        this.updatePreference('language', e.target.value);
      });
      
      // Acciones del perfil
      document.getElementById('upgrade-subscription')?.addEventListener('click', () => {
        this.upgradeSubscription();
      });
      
      document.getElementById('export-data')?.addEventListener('click', () => {
        this.exportData();
      });
      
      document.getElementById('privacy-settings')?.addEventListener('click', () => {
        this.openPrivacySettings();
      });
      
      document.getElementById('help-support')?.addEventListener('click', () => {
        this.openHelpSupport();
      });
      
      document.getElementById('delete-account')?.addEventListener('click', () => {
        this.deleteAccount();
      });
    }
    
    editProfile() {
      // Implementar edición de perfil
      console.log('Editando perfil...');
    }
    
    changeAvatar() {
      // Implementar cambio de avatar
      console.log('Cambiando avatar...');
    }
    
    async updatePreference(key, value) {
      try {
        // Actualizar preferencia en Firebase
        console.log(`Actualizando preferencia ${key}:`, value);
        
        // Actualizar estado local
        this.profile.preferences[key] = value;
        
        // Aplicar cambios inmediatamente
        if (key === 'theme') {
          if (window.themeToggle) {
            window.themeToggle.setTheme(value);
          }
        }
        
      } catch (error) {
        console.error('Error updating preference:', error);
      }
    }
    
    upgradeSubscription() {
      // Implementar actualización de suscripción
      console.log('Actualizando suscripción...');
    }
    
    exportData() {
      // Implementar exportación de datos
      console.log('Exportando datos...');
    }
    
    openPrivacySettings() {
      // Implementar configuración de privacidad
      console.log('Abriendo configuración de privacidad...');
    }
    
    openHelpSupport() {
      // Implementar ayuda y soporte
      console.log('Abriendo ayuda y soporte...');
    }
    
    deleteAccount() {
      // Implementar eliminación de cuenta
      if (confirm('¿Estás seguro de que quieres eliminar tu cuenta? Esta acción no se puede deshacer.')) {
        console.log('Eliminando cuenta...');
      }
    }
  }
  
  // Inicializar cuando el DOM esté listo
  document.addEventListener('DOMContentLoaded', () => {
    new UserProfile();
  });
</script>
