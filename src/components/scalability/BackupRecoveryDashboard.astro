---
import { backupRecovery } from '../../utils/backupRecovery';
import { trackEvent } from '../../utils/userAnalytics';

// Obtener datos de backup y recuperación
const backupJobs = backupRecovery.getBackupJobs();
const backupExecutions = backupRecovery.getBackupExecutions();
const recoveryJobs = backupRecovery.getRecoveryJobs();
const storageLocations = backupRecovery.getStorageLocations();
const policies = backupRecovery.getBackupPolicies();
const stats = backupRecovery.getStats();

// Calcular estadísticas adicionales
const activeJobs = backupJobs.filter(job => job.status === 'running').length;
const pendingJobs = backupJobs.filter(job => job.status === 'pending').length;
const failedJobs = backupJobs.filter(job => job.status === 'failed').length;
const pausedJobs = backupJobs.filter(job => job.status === 'paused').length;

const recentExecutions = backupExecutions.slice(-10);
const totalStorageUsed = storageLocations.reduce((sum, storage) => sum + storage.usedSpace, 0);
const totalStorageAvailable = storageLocations.reduce((sum, storage) => sum + storage.availableSpace, 0);
const totalStorageCapacity = totalStorageUsed + totalStorageAvailable;

// Funciones de manejo de eventos
const handleRunBackupJob = async (jobId: string) => {
  const success = await backupRecovery.runBackupJob(jobId);
  trackEvent('backup_recovery', 'run_backup_job', { jobId, success });
  
  if (success) {
    alert('Trabajo de backup iniciado exitosamente');
    window.location.reload();
  } else {
    alert('Error al iniciar el trabajo de backup');
  }
};

const handlePauseBackupJob = async (jobId: string) => {
  const success = await backupRecovery.pauseBackupJob(jobId);
  trackEvent('backup_recovery', 'pause_backup_job', { jobId, success });
  
  if (success) {
    alert('Trabajo de backup pausado exitosamente');
    window.location.reload();
  } else {
    alert('Error al pausar el trabajo de backup');
  }
};

const handleResumeBackupJob = async (jobId: string) => {
  const success = await backupRecovery.resumeBackupJob(jobId);
  trackEvent('backup_recovery', 'resume_backup_job', { jobId, success });
  
  if (success) {
    alert('Trabajo de backup reanudado exitosamente');
    window.location.reload();
  } else {
    alert('Error al reanudar el trabajo de backup');
  }
};

const handleExecuteRecoveryJob = async (recoveryId: string) => {
  if (confirm('¿Estás seguro de que quieres ejecutar esta recuperación? Esta acción puede sobrescribir datos existentes.')) {
    const success = await backupRecovery.executeRecoveryJob(recoveryId);
    trackEvent('backup_recovery', 'execute_recovery_job', { recoveryId, success });
    
    if (success) {
      alert('Trabajo de recuperación completado exitosamente');
      window.location.reload();
    } else {
      alert('Error al ejecutar el trabajo de recuperación');
    }
  }
};

const handleCreateBackupJob = async (event: Event) => {
  event.preventDefault();
  const form = event.target as HTMLFormElement;
  const formData = new FormData(form);
  
  const job = {
    name: formData.get('name') as string,
    type: formData.get('type') as 'full' | 'incremental' | 'differential' | 'snapshot',
    source: {
      type: formData.get('sourceType') as 'database' | 'files' | 'application' | 'configuration',
      path: formData.get('sourcePath') as string,
      filters: (formData.get('filters') as string).split(',').map(f => f.trim()).filter(f => f),
    },
    destination: {
      type: formData.get('destinationType') as 'local' | 's3' | 'gcs' | 'azure' | 'ftp',
      path: formData.get('destinationPath') as string,
    },
    schedule: {
      enabled: formData.get('scheduleEnabled') === 'on',
      frequency: formData.get('frequency') as 'hourly' | 'daily' | 'weekly' | 'monthly',
      time: formData.get('time') as string,
      days: formData.get('days') ? (formData.get('days') as string).split(',').map(d => parseInt(d.trim())) : undefined,
    },
    retention: {
      days: parseInt(formData.get('retentionDays') as string),
      maxVersions: parseInt(formData.get('maxVersions') as string),
      compression: formData.get('compression') === 'on',
      encryption: formData.get('encryption') === 'on',
    },
    metadata: {},
  };

  await backupRecovery.createBackupJob(job);
  trackEvent('backup_recovery', 'create_backup_job', { jobName: job.name });
  
  // Recargar página para mostrar nuevo trabajo
  window.location.reload();
};

const handleCreateRecoveryJob = async (event: Event) => {
  event.preventDefault();
  const form = event.target as HTMLFormElement;
  const formData = new FormData(form);
  
  const recovery = {
    name: formData.get('name') as string,
    backupId: formData.get('backupId') as string,
    target: {
      type: formData.get('targetType') as 'database' | 'files' | 'application',
      path: formData.get('targetPath') as string,
    },
    options: {
      overwrite: formData.get('overwrite') === 'on',
      verify: formData.get('verify') === 'on',
      restorePermissions: formData.get('restorePermissions') === 'on',
      excludePatterns: (formData.get('excludePatterns') as string).split(',').map(p => p.trim()).filter(p => p),
    },
    metadata: {},
  };

  await backupRecovery.createRecoveryJob(recovery);
  trackEvent('backup_recovery', 'create_recovery_job', { recoveryName: recovery.name });
  
  // Recargar página para mostrar nuevo trabajo de recuperación
  window.location.reload();
};
---

<section class="backup-recovery-dashboard p-6 bg-gray-800 text-white rounded-lg shadow-lg">
  <h2 class="text-3xl font-bold mb-6 text-center text-cyan-400">Backup y Recuperación</h2>

  <!-- Métricas principales -->
  <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
    <div class="bg-gray-700 p-4 rounded-md shadow-md text-center">
      <h3 class="text-lg font-semibold mb-2 text-blue-300">Trabajos Activos</h3>
      <p class="text-3xl font-bold text-green-400">{activeJobs}</p>
      <p class="text-sm text-gray-400">{pendingJobs} pendientes</p>
    </div>
    <div class="bg-gray-700 p-4 rounded-md shadow-md text-center">
      <h3 class="text-lg font-semibold mb-2 text-blue-300">Tasa de Éxito</h3>
      <p class="text-3xl font-bold text-blue-400">{stats.successRate.toFixed(1)}%</p>
      <p class="text-sm text-gray-400">Backups exitosos</p>
    </div>
    <div class="bg-gray-700 p-4 rounded-md shadow-md text-center">
      <h3 class="text-lg font-semibold mb-2 text-blue-300">Almacenamiento</h3>
      <p class="text-3xl font-bold text-yellow-400">{((totalStorageUsed / totalStorageCapacity) * 100).toFixed(1)}%</p>
      <p class="text-sm text-gray-400">{(totalStorageUsed / 1024 / 1024 / 1024).toFixed(1)}GB / {(totalStorageCapacity / 1024 / 1024 / 1024).toFixed(1)}GB</p>
    </div>
    <div class="bg-gray-700 p-4 rounded-md shadow-md text-center">
      <h3 class="text-lg font-semibold mb-2 text-blue-300">Tiempo Promedio</h3>
      <p class="text-3xl font-bold text-purple-400">{stats.averageBackupTime.toFixed(0)}min</p>
      <p class="text-sm text-gray-400">Por backup</p>
    </div>
  </div>

  <!-- Trabajos de backup -->
  <div class="bg-gray-700 p-6 rounded-md shadow-md mb-8">
    <h3 class="text-2xl font-semibold mb-4 text-blue-300">Trabajos de Backup</h3>
    <div class="mb-4">
      <p class="text-gray-300">
        Total: <span class="text-white font-bold">{backupJobs.length}</span> | 
        Activos: <span class="text-green-400 font-bold">{activeJobs}</span> | 
        Pendientes: <span class="text-yellow-400 font-bold">{pendingJobs}</span> | 
        Fallidos: <span class="text-red-400 font-bold">{failedJobs}</span> | 
        Pausados: <span class="text-gray-400 font-bold">{pausedJobs}</span>
      </p>
    </div>
    {backupJobs.length > 0 ? (
      <div class="space-y-3">
        {backupJobs.map(job => (
          <div class="flex items-center justify-between p-3 bg-gray-600 rounded-md">
            <div class="flex-1">
              <h4 class="text-lg font-semibold text-white">{job.name}</h4>
              <p class="text-sm text-gray-400">
                Tipo: {job.type} | Fuente: {job.source.type} | Destino: {job.destination.type}
              </p>
              <p class="text-sm text-gray-400">
                Programación: {job.schedule.frequency} a las {job.schedule.time} | 
                Retención: {job.retention.days} días | 
                Última ejecución: {job.lastRun ? new Date(job.lastRun).toLocaleString() : 'Nunca'}
              </p>
            </div>
            <div class="flex items-center space-x-2">
              <span class:list={[
                job.status === 'running' ? 'text-green-400' : '',
                job.status === 'pending' ? 'text-yellow-400' : '',
                job.status === 'failed' ? 'text-red-400' : '',
                job.status === 'paused' ? 'text-gray-400' : 'text-blue-400'
              ]}>
                {job.status.toUpperCase()}
              </span>
              <div class="flex space-x-1">
                {job.status === 'pending' && (
                  <button 
                    class="bg-green-600 hover:bg-green-700 text-white text-sm py-1 px-2 rounded transition duration-300"
                    onclick={() => handleRunBackupJob(job.id)}
                  >
                    Ejecutar
                  </button>
                )}
                {job.status === 'pending' && (
                  <button 
                    class="bg-yellow-600 hover:bg-yellow-700 text-white text-sm py-1 px-2 rounded transition duration-300"
                    onclick={() => handlePauseBackupJob(job.id)}
                  >
                    Pausar
                  </button>
                )}
                {job.status === 'paused' && (
                  <button 
                    class="bg-blue-600 hover:bg-blue-700 text-white text-sm py-1 px-2 rounded transition duration-300"
                    onclick={() => handleResumeBackupJob(job.id)}
                  >
                    Reanudar
                  </button>
                )}
              </div>
            </div>
          </div>
        ))}
      </div>
    ) : (
      <p class="text-gray-400">No hay trabajos de backup configurados.</p>
    )}
  </div>

  <!-- Ejecuciones recientes -->
  <div class="bg-gray-700 p-6 rounded-md shadow-md mb-8">
    <h3 class="text-2xl font-semibold mb-4 text-blue-300">Ejecuciones Recientes</h3>
    {recentExecutions.length > 0 ? (
      <div class="space-y-3">
        {recentExecutions.map(execution => (
          <div class="p-3 bg-gray-600 rounded-md">
            <div class="flex items-center justify-between mb-2">
              <span class="font-medium">{execution.jobId}</span>
              <span class:list={[
                execution.status === 'completed' ? 'text-green-400' : '',
                execution.status === 'failed' ? 'text-red-400' : '',
                execution.status === 'running' ? 'text-yellow-400' : 'text-gray-400'
              ]}>
                {execution.status.toUpperCase()}
              </span>
            </div>
            <div class="text-sm text-gray-400">
              <p>Inicio: {new Date(execution.startTime).toLocaleString()}</p>
              <p>Duración: {execution.endTime ? 
                Math.round((new Date(execution.endTime).getTime() - new Date(execution.startTime).getTime()) / 1000 / 60) + ' min' : 
                'En progreso...'}</p>
              <p>Tamaño: {(execution.size / 1024 / 1024).toFixed(1)} MB | Archivos: {execution.filesCount}</p>
              {execution.status === 'running' && (
                <div class="mt-2">
                  <div class="w-full bg-gray-700 rounded-full h-2">
                    <div class="bg-blue-600 h-2 rounded-full" style={`width: ${execution.progress}%`}></div>
                  </div>
                  <p class="text-xs mt-1">{execution.progress}% completado</p>
                </div>
              )}
              {execution.errorMessage && (
                <p class="text-red-400 text-xs mt-1">Error: {execution.errorMessage}</p>
              )}
            </div>
          </div>
        ))}
      </div>
    ) : (
      <p class="text-gray-400">No hay ejecuciones recientes.</p>
    )}
  </div>

  <!-- Trabajos de recuperación -->
  <div class="bg-gray-700 p-6 rounded-md shadow-md mb-8">
    <h3 class="text-2xl font-semibold mb-4 text-blue-300">Trabajos de Recuperación</h3>
    {recoveryJobs.length > 0 ? (
      <div class="space-y-3">
        {recoveryJobs.map(recovery => (
          <div class="flex items-center justify-between p-3 bg-gray-600 rounded-md">
            <div class="flex-1">
              <h4 class="text-lg font-semibold text-white">{recovery.name}</h4>
              <p class="text-sm text-gray-400">
                Backup: {recovery.backupId} | Destino: {recovery.target.type} - {recovery.target.path}
              </p>
              <p class="text-sm text-gray-400">
                Opciones: {recovery.options.overwrite ? 'Sobrescribir' : 'No sobrescribir'} | 
                Verificar: {recovery.options.verify ? 'Sí' : 'No'} | 
                Permisos: {recovery.options.restorePermissions ? 'Sí' : 'No'}
              </p>
              {recovery.status === 'running' && (
                <div class="mt-2">
                  <div class="w-full bg-gray-700 rounded-full h-2">
                    <div class="bg-blue-600 h-2 rounded-full" style={`width: ${recovery.progress}%`}></div>
                  </div>
                  <p class="text-xs mt-1">{recovery.progress}% completado</p>
                </div>
              )}
            </div>
            <div class="flex items-center space-x-2">
              <span class:list={[
                recovery.status === 'completed' ? 'text-green-400' : '',
                recovery.status === 'failed' ? 'text-red-400' : '',
                recovery.status === 'running' ? 'text-yellow-400' : 'text-gray-400'
              ]}>
                {recovery.status.toUpperCase()}
              </span>
              {recovery.status === 'pending' && (
                <button 
                  class="bg-red-600 hover:bg-red-700 text-white text-sm py-1 px-3 rounded transition duration-300"
                  onclick={() => handleExecuteRecoveryJob(recovery.id)}
                >
                  Ejecutar
                </button>
              )}
            </div>
          </div>
        ))}
      </div>
    ) : (
      <p class="text-gray-400">No hay trabajos de recuperación configurados.</p>
    )}
  </div>

  <!-- Ubicaciones de almacenamiento -->
  <div class="bg-gray-700 p-6 rounded-md shadow-md mb-8">
    <h3 class="text-2xl font-semibold mb-4 text-blue-300">Ubicaciones de Almacenamiento</h3>
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
      {storageLocations.map(storage => (
        <div class="p-4 bg-gray-600 rounded-md">
          <h4 class="text-lg font-semibold mb-2 text-white">{storage.name}</h4>
          <div class="space-y-2">
            <p class="text-sm">
              <span class="text-gray-400">Tipo:</span> 
              <span class="text-white ml-2">{storage.type.toUpperCase()}</span>
            </p>
            <p class="text-sm">
              <span class="text-gray-400">Ruta:</span> 
              <span class="text-white ml-2">{storage.path}</span>
            </p>
            <p class="text-sm">
              <span class="text-gray-400">Capacidad:</span> 
              <span class="text-white ml-2">{(storage.totalSpace / 1024 / 1024 / 1024).toFixed(1)} GB</span>
            </p>
            <p class="text-sm">
              <span class="text-gray-400">Usado:</span> 
              <span class="text-white ml-2">{(storage.usedSpace / 1024 / 1024 / 1024).toFixed(1)} GB</span>
            </p>
            <p class="text-sm">
              <span class="text-gray-400">Disponible:</span> 
              <span class="text-white ml-2">{(storage.availableSpace / 1024 / 1024 / 1024).toFixed(1)} GB</span>
            </p>
            <p class="text-sm">
              <span class="text-gray-400">Estado:</span> 
              <span class:list={[
                storage.status === 'active' ? 'text-green-400' : '',
                storage.status === 'inactive' ? 'text-yellow-400' : 'text-red-400'
              ]} class="ml-2">
                {storage.status.toUpperCase()}
              </span>
            </p>
            <div class="mt-3">
              <div class="w-full bg-gray-700 rounded-full h-2">
                <div class="bg-blue-600 h-2 rounded-full" style={`width: ${(storage.usedSpace / storage.totalSpace) * 100}%`}></div>
              </div>
              <p class="text-xs mt-1">{((storage.usedSpace / storage.totalSpace) * 100).toFixed(1)}% utilizado</p>
            </div>
          </div>
        </div>
      ))}
    </div>
  </div>

  <!-- Políticas de backup -->
  <div class="bg-gray-700 p-6 rounded-md shadow-md mb-8">
    <h3 class="text-2xl font-semibold mb-4 text-blue-300">Políticas de Backup</h3>
    {policies.length > 0 ? (
      <div class="space-y-3">
        {policies.map(policy => (
          <div class="p-3 bg-gray-600 rounded-md">
            <div class="flex items-center justify-between mb-2">
              <h4 class="text-lg font-semibold text-white">{policy.name}</h4>
              <span class:list={[
                policy.enabled ? 'text-green-400' : 'text-red-400'
              ]}>
                {policy.enabled ? 'HABILITADO' : 'DESHABILITADO'}
              </span>
            </div>
            <p class="text-sm text-gray-400 mb-2">{policy.description}</p>
            <div class="text-sm text-gray-400">
              <p class="font-semibold mb-1">Reglas:</p>
              {policy.rules.map((rule, index) => (
                <p class="ml-4">• {rule.condition} → {rule.action}</p>
              ))}
            </div>
          </div>
        ))}
      </div>
    ) : (
      <p class="text-gray-400">No hay políticas de backup configuradas.</p>
    )}
  </div>

  <!-- Crear nuevo trabajo de backup -->
  <div class="bg-gray-700 p-6 rounded-md shadow-md mb-8">
    <h3 class="text-2xl font-semibold mb-4 text-blue-300">Crear Nuevo Trabajo de Backup</h3>
    <form onsubmit={handleCreateBackupJob} class="space-y-4">
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label class="block text-sm font-medium text-gray-300 mb-2">Nombre</label>
          <input 
            type="text" 
            name="name" 
            required
            class="w-full p-3 rounded-md bg-gray-600 text-white border border-gray-500 focus:border-cyan-500 focus:ring focus:ring-cyan-500 focus:ring-opacity-50"
            placeholder="Nombre del trabajo"
          />
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-300 mb-2">Tipo</label>
          <select 
            name="type" 
            required
            class="w-full p-3 rounded-md bg-gray-600 text-white border border-gray-500 focus:border-cyan-500 focus:ring focus:ring-cyan-500 focus:ring-opacity-50"
          >
            <option value="full">Full</option>
            <option value="incremental">Incremental</option>
            <option value="differential">Differential</option>
            <option value="snapshot">Snapshot</option>
          </select>
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-300 mb-2">Tipo de Fuente</label>
          <select 
            name="sourceType" 
            required
            class="w-full p-3 rounded-md bg-gray-600 text-white border border-gray-500 focus:border-cyan-500 focus:ring focus:ring-cyan-500 focus:ring-opacity-50"
          >
            <option value="database">Database</option>
            <option value="files">Files</option>
            <option value="application">Application</option>
            <option value="configuration">Configuration</option>
          </select>
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-300 mb-2">Ruta de Fuente</label>
          <input 
            type="text" 
            name="sourcePath" 
            required
            class="w-full p-3 rounded-md bg-gray-600 text-white border border-gray-500 focus:border-cyan-500 focus:ring focus:ring-cyan-500 focus:ring-opacity-50"
            placeholder="/path/to/source"
          />
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-300 mb-2">Filtros (separados por comas)</label>
          <input 
            type="text" 
            name="filters" 
            class="w-full p-3 rounded-md bg-gray-600 text-white border border-gray-500 focus:border-cyan-500 focus:ring focus:ring-cyan-500 focus:ring-opacity-50"
            placeholder="*.jpg,*.png,*.pdf"
          />
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-300 mb-2">Tipo de Destino</label>
          <select 
            name="destinationType" 
            required
            class="w-full p-3 rounded-md bg-gray-600 text-white border border-gray-500 focus:border-cyan-500 focus:ring focus:ring-cyan-500 focus:ring-opacity-50"
          >
            <option value="local">Local</option>
            <option value="s3">AWS S3</option>
            <option value="gcs">Google Cloud Storage</option>
            <option value="azure">Azure Blob</option>
            <option value="ftp">FTP</option>
          </select>
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-300 mb-2">Ruta de Destino</label>
          <input 
            type="text" 
            name="destinationPath" 
            required
            class="w-full p-3 rounded-md bg-gray-600 text-white border border-gray-500 focus:border-cyan-500 focus:ring focus:ring-cyan-500 focus:ring-opacity-50"
            placeholder="/path/to/destination"
          />
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-300 mb-2">Frecuencia</label>
          <select 
            name="frequency" 
            required
            class="w-full p-3 rounded-md bg-gray-600 text-white border border-gray-500 focus:border-cyan-500 focus:ring focus:ring-cyan-500 focus:ring-opacity-50"
          >
            <option value="hourly">Hourly</option>
            <option value="daily">Daily</option>
            <option value="weekly">Weekly</option>
            <option value="monthly">Monthly</option>
          </select>
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-300 mb-2">Hora</label>
          <input 
            type="time" 
            name="time" 
            required
            class="w-full p-3 rounded-md bg-gray-600 text-white border border-gray-500 focus:border-cyan-500 focus:ring focus:ring-cyan-500 focus:ring-opacity-50"
          />
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-300 mb-2">Días (para weekly/monthly)</label>
          <input 
            type="text" 
            name="days" 
            class="w-full p-3 rounded-md bg-gray-600 text-white border border-gray-500 focus:border-cyan-500 focus:ring focus:ring-cyan-500 focus:ring-opacity-50"
            placeholder="1,2,3 (1=Lunes, 2=Martes, etc.)"
          />
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-300 mb-2">Días de Retención</label>
          <input 
            type="number" 
            name="retentionDays" 
            required
            min="1"
            class="w-full p-3 rounded-md bg-gray-600 text-white border border-gray-500 focus:border-cyan-500 focus:ring focus:ring-cyan-500 focus:ring-opacity-50"
            placeholder="30"
          />
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-300 mb-2">Versiones Máximas</label>
          <input 
            type="number" 
            name="maxVersions" 
            required
            min="1"
            class="w-full p-3 rounded-md bg-gray-600 text-white border border-gray-500 focus:border-cyan-500 focus:ring focus:ring-cyan-500 focus:ring-opacity-50"
            placeholder="10"
          />
        </div>
      </div>
      
      <div class="flex items-center space-x-4">
        <label class="flex items-center">
          <input type="checkbox" name="scheduleEnabled" class="mr-2" checked />
          <span class="text-gray-300">Habilitar programación</span>
        </label>
        <label class="flex items-center">
          <input type="checkbox" name="compression" class="mr-2" checked />
          <span class="text-gray-300">Compresión</span>
        </label>
        <label class="flex items-center">
          <input type="checkbox" name="encryption" class="mr-2" checked />
          <span class="text-gray-300">Encriptación</span>
        </label>
      </div>
      
      <button 
        type="submit" 
        class="w-full bg-cyan-600 hover:bg-cyan-700 text-white font-bold py-3 px-6 rounded transition duration-300"
      >
        Crear Trabajo de Backup
      </button>
    </form>
  </div>

  <!-- Crear nuevo trabajo de recuperación -->
  <div class="bg-gray-700 p-6 rounded-md shadow-md">
    <h3 class="text-2xl font-semibold mb-4 text-blue-300">Crear Nuevo Trabajo de Recuperación</h3>
    <form onsubmit={handleCreateRecoveryJob} class="space-y-4">
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label class="block text-sm font-medium text-gray-300 mb-2">Nombre</label>
          <input 
            type="text" 
            name="name" 
            required
            class="w-full p-3 rounded-md bg-gray-600 text-white border border-gray-500 focus:border-cyan-500 focus:ring focus:ring-cyan-500 focus:ring-opacity-50"
            placeholder="Nombre del trabajo de recuperación"
          />
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-300 mb-2">ID del Backup</label>
          <input 
            type="text" 
            name="backupId" 
            required
            class="w-full p-3 rounded-md bg-gray-600 text-white border border-gray-500 focus:border-cyan-500 focus:ring focus:ring-cyan-500 focus:ring-opacity-50"
            placeholder="backup_id_to_restore"
          />
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-300 mb-2">Tipo de Destino</label>
          <select 
            name="targetType" 
            required
            class="w-full p-3 rounded-md bg-gray-600 text-white border border-gray-500 focus:border-cyan-500 focus:ring focus:ring-cyan-500 focus:ring-opacity-50"
          >
            <option value="database">Database</option>
            <option value="files">Files</option>
            <option value="application">Application</option>
          </select>
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-300 mb-2">Ruta de Destino</label>
          <input 
            type="text" 
            name="targetPath" 
            required
            class="w-full p-3 rounded-md bg-gray-600 text-white border border-gray-500 focus:border-cyan-500 focus:ring focus:ring-cyan-500 focus:ring-opacity-50"
            placeholder="/path/to/restore"
          />
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-300 mb-2">Patrones de Exclusión (separados por comas)</label>
          <input 
            type="text" 
            name="excludePatterns" 
            class="w-full p-3 rounded-md bg-gray-600 text-white border border-gray-500 focus:border-cyan-500 focus:ring focus:ring-cyan-500 focus:ring-opacity-50"
            placeholder="*.tmp,*.log"
          />
        </div>
      </div>
      
      <div class="flex items-center space-x-4">
        <label class="flex items-center">
          <input type="checkbox" name="overwrite" class="mr-2" />
          <span class="text-gray-300">Sobrescribir archivos existentes</span>
        </label>
        <label class="flex items-center">
          <input type="checkbox" name="verify" class="mr-2" checked />
          <span class="text-gray-300">Verificar integridad</span>
        </label>
        <label class="flex items-center">
          <input type="checkbox" name="restorePermissions" class="mr-2" checked />
          <span class="text-gray-300">Restaurar permisos</span>
        </label>
      </div>
      
      <button 
        type="submit" 
        class="w-full bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-6 rounded transition duration-300"
      >
        Crear Trabajo de Recuperación
      </button>
    </form>
  </div>
</section>

<script>
  // Script para manejar eventos del cliente
  document.addEventListener('DOMContentLoaded', () => {
    // Auto-refresh cada 30 segundos para métricas en tiempo real
    setInterval(() => {
      // Solo recargar si no hay formularios activos
      if (!document.activeElement || document.activeElement.tagName !== 'INPUT') {
        window.location.reload();
      }
    }, 30000);
  });
</script>
