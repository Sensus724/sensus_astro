---
import { caching } from '../../utils/caching';
import { trackEvent } from '../../utils/userAnalytics';

// Obtener datos de caché
const strategies = caching.getStrategies();
const allStats = caching.getAllStats();
const invalidationRules = caching.getInvalidationRules();
const optimizations = caching.getOptimizations();
const memoryEntries = caching.getMemoryCacheEntries();

// Calcular estadísticas generales
const totalHits = Array.from(allStats.values()).reduce((sum, stats) => sum + stats.hits, 0);
const totalMisses = Array.from(allStats.values()).reduce((sum, stats) => sum + stats.misses, 0);
const totalRequests = totalHits + totalMisses;
const overallHitRate = totalRequests > 0 ? (totalHits / totalRequests) * 100 : 0;

const totalSize = Array.from(allStats.values()).reduce((sum, stats) => sum + stats.totalSize, 0);
const totalEntries = Array.from(allStats.values()).reduce((sum, stats) => sum + stats.entryCount, 0);

const pendingOptimizations = optimizations.filter(opt => opt.status === 'pending').length;
const appliedOptimizations = optimizations.filter(opt => opt.status === 'applied').length;

// Funciones de manejo de eventos
const handleCreateStrategy = async (event: Event) => {
  event.preventDefault();
  const form = event.target as HTMLFormElement;
  const formData = new FormData(form);
  
  const strategy = {
    name: formData.get('name') as string,
    type: formData.get('type') as 'memory' | 'redis' | 'cdn' | 'database',
    ttl: parseInt(formData.get('ttl') as string),
    maxSize: parseInt(formData.get('maxSize') as string),
    maxEntries: parseInt(formData.get('maxEntries') as string),
    evictionPolicy: formData.get('evictionPolicy') as 'lru' | 'lfu' | 'fifo' | 'ttl' | 'random',
    compression: formData.get('compression') === 'on',
    encryption: formData.get('encryption') === 'on',
    enabled: true,
    metadata: {},
  };

  await caching.createStrategy(strategy);
  trackEvent('caching_action', 'create_strategy', { strategyName: strategy.name });
  
  // Recargar página para mostrar nueva estrategia
  window.location.reload();
};

const handleSetCache = async (event: Event) => {
  event.preventDefault();
  const form = event.target as HTMLFormElement;
  const formData = new FormData(form);
  
  const key = formData.get('key') as string;
  const value = formData.get('value') as string;
  const strategyId = formData.get('strategyId') as string;
  const ttl = parseInt(formData.get('ttl') as string);
  const tags = (formData.get('tags') as string).split(',').map(tag => tag.trim()).filter(tag => tag);

  const success = await caching.set(key, value, strategyId, { ttl, tags });
  trackEvent('caching_action', 'set_cache', { key, strategyId, success });
  
  if (success) {
    alert('Valor almacenado en caché exitosamente');
  } else {
    alert('Error al almacenar en caché');
  }
};

const handleGetCache = async (event: Event) => {
  event.preventDefault();
  const form = event.target as HTMLFormElement;
  const formData = new FormData(form);
  
  const key = formData.get('key') as string;
  const strategyId = formData.get('strategyId') as string;

  const value = await caching.get(key, strategyId);
  trackEvent('caching_action', 'get_cache', { key, strategyId, found: !!value });
  
  if (value !== null) {
    alert(`Valor encontrado: ${JSON.stringify(value)}`);
  } else {
    alert('Valor no encontrado en caché');
  }
};

const handleInvalidate = async (pattern: string, strategyId: string) => {
  const count = await caching.invalidate(pattern, strategyId);
  trackEvent('caching_action', 'invalidate', { pattern, strategyId, count });
  alert(`${count} entradas invalidadas`);
  window.location.reload();
};

const handleInvalidateByTags = async (tags: string[], strategyId: string) => {
  const count = await caching.invalidateByTags(tags, strategyId);
  trackEvent('caching_action', 'invalidate_by_tags', { tags, strategyId, count });
  alert(`${count} entradas invalidadas por tags`);
  window.location.reload();
};

const handleApplyOptimization = async (optimizationId: string) => {
  const success = await caching.applyOptimization(optimizationId);
  trackEvent('caching_action', 'apply_optimization', { optimizationId, success });
  
  if (success) {
    alert('Optimización aplicada exitosamente');
    window.location.reload();
  } else {
    alert('Error al aplicar la optimización');
  }
};

const handleGenerateOptimizations = async () => {
  const optimizations = await caching.generateOptimizations();
  trackEvent('caching_action', 'generate_optimizations', { count: optimizations.length });
  alert(`${optimizations.length} optimizaciones generadas`);
  window.location.reload();
};
---

<section class="caching-dashboard p-6 bg-gray-800 text-white rounded-lg shadow-lg">
  <h2 class="text-3xl font-bold mb-6 text-center text-purple-400">Sistema de Caché Avanzado</h2>

  <!-- Métricas principales -->
  <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
    <div class="bg-gray-700 p-4 rounded-md shadow-md text-center">
      <h3 class="text-lg font-semibold mb-2 text-blue-300">Hit Rate General</h3>
      <p class="text-3xl font-bold text-green-400">{overallHitRate.toFixed(1)}%</p>
      <p class="text-sm text-gray-400">{totalHits} hits / {totalMisses} misses</p>
    </div>
    <div class="bg-gray-700 p-4 rounded-md shadow-md text-center">
      <h3 class="text-lg font-semibold mb-2 text-blue-300">Total de Entradas</h3>
      <p class="text-3xl font-bold text-blue-400">{totalEntries.toLocaleString()}</p>
      <p class="text-sm text-gray-400">En todos los cachés</p>
    </div>
    <div class="bg-gray-700 p-4 rounded-md shadow-md text-center">
      <h3 class="text-lg font-semibold mb-2 text-blue-300">Tamaño Total</h3>
      <p class="text-3xl font-bold text-yellow-400">{(totalSize / 1024 / 1024).toFixed(1)} MB</p>
      <p class="text-sm text-gray-400">Memoria utilizada</p>
    </div>
    <div class="bg-gray-700 p-4 rounded-md shadow-md text-center">
      <h3 class="text-lg font-semibold mb-2 text-blue-300">Optimizaciones</h3>
      <p class="text-3xl font-bold text-purple-400">{appliedOptimizations}</p>
      <p class="text-sm text-gray-400">{pendingOptimizations} pendientes</p>
    </div>
  </div>

  <!-- Estrategias de caché -->
  <div class="bg-gray-700 p-6 rounded-md shadow-md mb-8">
    <h3 class="text-2xl font-semibold mb-4 text-blue-300">Estrategias de Caché</h3>
    <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
      {strategies.map(strategy => {
        const stats = allStats.get(strategy.id);
        return (
          <div class="p-4 bg-gray-600 rounded-md">
            <h4 class="text-lg font-semibold mb-2 text-white">{strategy.name}</h4>
            <div class="space-y-2">
              <p class="text-sm">
                <span class="text-gray-400">Tipo:</span> 
                <span class="text-white ml-2">{strategy.type.toUpperCase()}</span>
              </p>
              <p class="text-sm">
                <span class="text-gray-400">TTL:</span> 
                <span class="text-white ml-2">{strategy.ttl}s</span>
              </p>
              <p class="text-sm">
                <span class="text-gray-400">Hit Rate:</span> 
                <span class="text-green-400 ml-2">{(stats?.hitRate || 0) * 100}%</span>
              </p>
              <p class="text-sm">
                <span class="text-gray-400">Entradas:</span> 
                <span class="text-white ml-2">{stats?.entryCount || 0}</span>
              </p>
              <p class="text-sm">
                <span class="text-gray-400">Tamaño:</span> 
                <span class="text-white ml-2">{((stats?.totalSize || 0) / 1024 / 1024).toFixed(1)} MB</span>
              </p>
              <p class="text-sm">
                <span class="text-gray-400">Estado:</span> 
                <span class:list={[
                  strategy.enabled ? 'text-green-400' : 'text-red-400'
                ]} class="ml-2">
                  {strategy.enabled ? 'Habilitado' : 'Deshabilitado'}
                </span>
              </p>
            </div>
          </div>
        );
      })}
    </div>
  </div>

  <!-- Operaciones de caché -->
  <div class="bg-gray-700 p-6 rounded-md shadow-md mb-8">
    <h3 class="text-2xl font-semibold mb-4 text-blue-300">Operaciones de Caché</h3>
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
      <!-- Set Cache -->
      <div>
        <h4 class="text-lg font-semibold mb-3 text-white">Almacenar en Caché</h4>
        <form onsubmit={handleSetCache} class="space-y-3">
          <div>
            <label class="block text-sm font-medium text-gray-300 mb-1">Clave</label>
            <input 
              type="text" 
              name="key" 
              required
              class="w-full p-2 rounded-md bg-gray-600 text-white border border-gray-500 focus:border-purple-500 focus:ring focus:ring-purple-500 focus:ring-opacity-50"
              placeholder="user:123"
            />
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-300 mb-1">Valor</label>
            <textarea 
              name="value" 
              required
              rows="3"
              class="w-full p-2 rounded-md bg-gray-600 text-white border border-gray-500 focus:border-purple-500 focus:ring focus:ring-purple-500 focus:ring-opacity-50"
              placeholder="Datos a almacenar"
            ></textarea>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-300 mb-1">Estrategia</label>
            <select 
              name="strategyId" 
              required
              class="w-full p-2 rounded-md bg-gray-600 text-white border border-gray-500 focus:border-purple-500 focus:ring focus:ring-purple-500 focus:ring-opacity-50"
            >
              {strategies.map(strategy => (
                <option value={strategy.id}>{strategy.name}</option>
              ))}
            </select>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-300 mb-1">TTL (segundos)</label>
            <input 
              type="number" 
              name="ttl" 
              required
              min="1"
              class="w-full p-2 rounded-md bg-gray-600 text-white border border-gray-500 focus:border-purple-500 focus:ring focus:ring-purple-500 focus:ring-opacity-50"
              placeholder="3600"
            />
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-300 mb-1">Tags (separados por comas)</label>
            <input 
              type="text" 
              name="tags" 
              class="w-full p-2 rounded-md bg-gray-600 text-white border border-gray-500 focus:border-purple-500 focus:ring focus:ring-purple-500 focus:ring-opacity-50"
              placeholder="user,profile,data"
            />
          </div>
          <button 
            type="submit" 
            class="w-full bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded transition duration-300"
          >
            Almacenar en Caché
          </button>
        </form>
      </div>

      <!-- Get Cache -->
      <div>
        <h4 class="text-lg font-semibold mb-3 text-white">Recuperar de Caché</h4>
        <form onsubmit={handleGetCache} class="space-y-3">
          <div>
            <label class="block text-sm font-medium text-gray-300 mb-1">Clave</label>
            <input 
              type="text" 
              name="key" 
              required
              class="w-full p-2 rounded-md bg-gray-600 text-white border border-gray-500 focus:border-purple-500 focus:ring focus:ring-purple-500 focus:ring-opacity-50"
              placeholder="user:123"
            />
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-300 mb-1">Estrategia</label>
            <select 
              name="strategyId" 
              required
              class="w-full p-2 rounded-md bg-gray-600 text-white border border-gray-500 focus:border-purple-500 focus:ring focus:ring-purple-500 focus:ring-opacity-50"
            >
              {strategies.map(strategy => (
                <option value={strategy.id}>{strategy.name}</option>
              ))}
            </select>
          </div>
          <button 
            type="submit" 
            class="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded transition duration-300"
          >
            Recuperar de Caché
          </button>
        </form>
      </div>
    </div>
  </div>

  <!-- Invalidación de caché -->
  <div class="bg-gray-700 p-6 rounded-md shadow-md mb-8">
    <h3 class="text-2xl font-semibold mb-4 text-blue-300">Invalidación de Caché</h3>
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
      <div>
        <h4 class="text-lg font-semibold mb-3 text-white">Invalidar por Patrón</h4>
        <div class="space-y-3">
          <div>
            <label class="block text-sm font-medium text-gray-300 mb-1">Patrón (regex)</label>
            <input 
              type="text" 
              id="invalidatePattern"
              class="w-full p-2 rounded-md bg-gray-600 text-white border border-gray-500 focus:border-purple-500 focus:ring focus:ring-purple-500 focus:ring-opacity-50"
              placeholder="^user:.*"
            />
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-300 mb-1">Estrategia</label>
            <select 
              id="invalidateStrategy"
              class="w-full p-2 rounded-md bg-gray-600 text-white border border-gray-500 focus:border-purple-500 focus:ring focus:ring-purple-500 focus:ring-opacity-50"
            >
              {strategies.map(strategy => (
                <option value={strategy.id}>{strategy.name}</option>
              ))}
            </select>
          </div>
          <button 
            class="w-full bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded transition duration-300"
            onclick={() => {
              const pattern = (document.getElementById('invalidatePattern') as HTMLInputElement).value;
              const strategyId = (document.getElementById('invalidateStrategy') as HTMLSelectElement).value;
              if (pattern) handleInvalidate(pattern, strategyId);
            }}
          >
            Invalidar por Patrón
          </button>
        </div>
      </div>

      <div>
        <h4 class="text-lg font-semibold mb-3 text-white">Invalidar por Tags</h4>
        <div class="space-y-3">
          <div>
            <label class="block text-sm font-medium text-gray-300 mb-1">Tags (separados por comas)</label>
            <input 
              type="text" 
              id="invalidateTags"
              class="w-full p-2 rounded-md bg-gray-600 text-white border border-gray-500 focus:border-purple-500 focus:ring focus:ring-purple-500 focus:ring-opacity-50"
              placeholder="user,profile"
            />
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-300 mb-1">Estrategia</label>
            <select 
              id="invalidateTagsStrategy"
              class="w-full p-2 rounded-md bg-gray-600 text-white border border-gray-500 focus:border-purple-500 focus:ring focus:ring-purple-500 focus:ring-opacity-50"
            >
              {strategies.map(strategy => (
                <option value={strategy.id}>{strategy.name}</option>
              ))}
            </select>
          </div>
          <button 
            class="w-full bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded transition duration-300"
            onclick={() => {
              const tagsInput = (document.getElementById('invalidateTags') as HTMLInputElement).value;
              const tags = tagsInput.split(',').map(tag => tag.trim()).filter(tag => tag);
              const strategyId = (document.getElementById('invalidateTagsStrategy') as HTMLSelectElement).value;
              if (tags.length > 0) handleInvalidateByTags(tags, strategyId);
            }}
          >
            Invalidar por Tags
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Optimizaciones -->
  <div class="bg-gray-700 p-6 rounded-md shadow-md mb-8">
    <h3 class="text-2xl font-semibold mb-4 text-blue-300">Optimizaciones de Caché</h3>
    <div class="mb-4">
      <button 
        class="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded transition duration-300"
        onclick={handleGenerateOptimizations}
      >
        Generar Optimizaciones
      </button>
    </div>
    {optimizations.length > 0 ? (
      <div class="space-y-3">
        {optimizations.map(optimization => (
          <div class="flex items-center justify-between p-3 bg-gray-600 rounded-md">
            <div class="flex-1">
              <p class="font-medium">{optimization.description}</p>
              <p class="text-sm text-gray-400">
                Tipo: {optimization.type} | Impacto: {optimization.impact} | Ganancia: {optimization.performanceGain}%
              </p>
            </div>
            <div class="flex items-center space-x-2">
              <span class:list={[
                optimization.status === 'applied' ? 'text-green-400' : '',
                optimization.status === 'failed' ? 'text-red-400' : 'text-yellow-400'
              ]}>
                {optimization.status.toUpperCase()}
              </span>
              {optimization.status === 'pending' && (
                <button 
                  class="bg-blue-600 hover:bg-blue-700 text-white text-sm py-1 px-3 rounded transition duration-300"
                  onclick={() => handleApplyOptimization(optimization.id)}
                >
                  Aplicar
                </button>
              )}
            </div>
          </div>
        ))}
      </div>
    ) : (
      <p class="text-gray-400">No hay optimizaciones disponibles.</p>
    )}
  </div>

  <!-- Crear nueva estrategia -->
  <div class="bg-gray-700 p-6 rounded-md shadow-md">
    <h3 class="text-2xl font-semibold mb-4 text-blue-300">Crear Nueva Estrategia de Caché</h3>
    <form onsubmit={handleCreateStrategy} class="space-y-4">
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label class="block text-sm font-medium text-gray-300 mb-2">Nombre</label>
          <input 
            type="text" 
            name="name" 
            required
            class="w-full p-3 rounded-md bg-gray-600 text-white border border-gray-500 focus:border-purple-500 focus:ring focus:ring-purple-500 focus:ring-opacity-50"
            placeholder="Nombre de la estrategia"
          />
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-300 mb-2">Tipo</label>
          <select 
            name="type" 
            required
            class="w-full p-3 rounded-md bg-gray-600 text-white border border-gray-500 focus:border-purple-500 focus:ring focus:ring-purple-500 focus:ring-opacity-50"
          >
            <option value="memory">Memory</option>
            <option value="redis">Redis</option>
            <option value="cdn">CDN</option>
            <option value="database">Database</option>
          </select>
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-300 mb-2">TTL (segundos)</label>
          <input 
            type="number" 
            name="ttl" 
            required
            min="1"
            class="w-full p-3 rounded-md bg-gray-600 text-white border border-gray-500 focus:border-purple-500 focus:ring focus:ring-purple-500 focus:ring-opacity-50"
            placeholder="3600"
          />
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-300 mb-2">Tamaño Máximo (bytes)</label>
          <input 
            type="number" 
            name="maxSize" 
            required
            min="1"
            class="w-full p-3 rounded-md bg-gray-600 text-white border border-gray-500 focus:border-purple-500 focus:ring focus:ring-purple-500 focus:ring-opacity-50"
            placeholder="104857600"
          />
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-300 mb-2">Entradas Máximas</label>
          <input 
            type="number" 
            name="maxEntries" 
            required
            min="1"
            class="w-full p-3 rounded-md bg-gray-600 text-white border border-gray-500 focus:border-purple-500 focus:ring focus:ring-purple-500 focus:ring-opacity-50"
            placeholder="1000"
          />
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-300 mb-2">Política de Evicción</label>
          <select 
            name="evictionPolicy" 
            required
            class="w-full p-3 rounded-md bg-gray-600 text-white border border-gray-500 focus:border-purple-500 focus:ring focus:ring-purple-500 focus:ring-opacity-50"
          >
            <option value="lru">LRU (Least Recently Used)</option>
            <option value="lfu">LFU (Least Frequently Used)</option>
            <option value="fifo">FIFO (First In First Out)</option>
            <option value="ttl">TTL (Time To Live)</option>
            <option value="random">Random</option>
          </select>
        </div>
        <div class="flex items-center space-x-4">
          <label class="flex items-center">
            <input type="checkbox" name="compression" class="mr-2" />
            <span class="text-gray-300">Compresión</span>
          </label>
          <label class="flex items-center">
            <input type="checkbox" name="encryption" class="mr-2" />
            <span class="text-gray-300">Encriptación</span>
          </label>
        </div>
      </div>
      <button 
        type="submit" 
        class="w-full bg-purple-600 hover:bg-purple-700 text-white font-bold py-3 px-6 rounded transition duration-300"
      >
        Crear Estrategia de Caché
      </button>
    </form>
  </div>
</section>

<script>
  // Script para manejar eventos del cliente
  document.addEventListener('DOMContentLoaded', () => {
    // Auto-refresh cada 30 segundos para métricas en tiempo real
    setInterval(() => {
      // Solo recargar si no hay formularios activos
      if (!document.activeElement || document.activeElement.tagName !== 'INPUT') {
        window.location.reload();
      }
    }, 30000);
  });
</script>
