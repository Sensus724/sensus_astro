---
import { loadBalancing } from '../../utils/loadBalancing';
import { trackEvent } from '../../utils/userAnalytics';

// Obtener datos de load balancing
const loadBalancers = loadBalancing.getLoadBalancers();
const allStats = loadBalancing.getAllStats();

// Calcular estadísticas generales
const totalRequests = Array.from(allStats.values()).reduce((sum, stats) => sum + stats.totalRequests, 0);
const successfulRequests = Array.from(allStats.values()).reduce((sum, stats) => sum + stats.successfulRequests, 0);
const failedRequests = Array.from(allStats.values()).reduce((sum, stats) => sum + stats.failedRequests, 0);
const successRate = totalRequests > 0 ? (successfulRequests / totalRequests) * 100 : 0;

const avgResponseTime = Array.from(allStats.values()).reduce((sum, stats) => sum + stats.averageResponseTime, 0) / Math.max(allStats.size, 1);
const totalConnections = Array.from(allStats.values()).reduce((sum, stats) => sum + stats.currentConnections, 0);

// Funciones de manejo de eventos
const handleCreateLoadBalancer = async (event: Event) => {
  event.preventDefault();
  const form = event.target as HTMLFormElement;
  const formData = new FormData(form);
  
  const loadBalancer = {
    name: formData.get('name') as string,
    type: formData.get('type') as 'round_robin' | 'least_connections' | 'weighted' | 'ip_hash' | 'random',
    targets: JSON.parse(formData.get('targets') as string),
    healthCheck: {
      path: formData.get('healthCheckPath') as string,
      interval: parseInt(formData.get('healthCheckInterval') as string),
      timeout: parseInt(formData.get('healthCheckTimeout') as string),
      retries: parseInt(formData.get('healthCheckRetries') as string),
      expectedStatus: [200, 201],
    },
    failover: {
      enabled: formData.get('failoverEnabled') === 'on',
      maxFailures: parseInt(formData.get('maxFailures') as string),
      recoveryTime: parseInt(formData.get('recoveryTime') as string),
    },
    stickySessions: {
      enabled: formData.get('stickySessionsEnabled') === 'on',
      cookieName: formData.get('cookieName') as string,
      ttl: parseInt(formData.get('cookieTtl') as string),
    },
    enabled: true,
    metadata: {},
  };

  await loadBalancing.createLoadBalancer(loadBalancer);
  trackEvent('loadbalancing_action', 'create_loadbalancer', { loadBalancerName: loadBalancer.name });
  
  // Recargar página para mostrar nuevo load balancer
  window.location.reload();
};

const handleAddTarget = async (loadBalancerId: string) => {
  const url = prompt('URL del nuevo target:');
  const weight = parseInt(prompt('Peso del target (1-10):') || '1');
  
  if (url && weight > 0) {
    const target = {
      url,
      weight,
      health: 'unknown' as const,
      lastHealthCheck: new Date().toISOString(),
      responseTime: 0,
      errorCount: 0,
      successCount: 0,
      metadata: {},
    };

    await loadBalancing.addTarget(loadBalancerId, target);
    trackEvent('loadbalancing_action', 'add_target', { loadBalancerId, targetUrl: url });
    window.location.reload();
  }
};

const handleRemoveTarget = async (loadBalancerId: string, targetId: string) => {
  if (confirm('¿Estás seguro de que quieres eliminar este target?')) {
    await loadBalancing.removeTarget(loadBalancerId, targetId);
    trackEvent('loadbalancing_action', 'remove_target', { loadBalancerId, targetId });
    window.location.reload();
  }
};

const handleToggleLoadBalancer = async (loadBalancerId: string, enabled: boolean) => {
  if (enabled) {
    await loadBalancing.enableLoadBalancer(loadBalancerId);
  } else {
    await loadBalancing.disableLoadBalancer(loadBalancerId);
  }
  trackEvent('loadbalancing_action', 'toggle_loadbalancer', { loadBalancerId, enabled });
  window.location.reload();
};

const handleUpdateTarget = async (loadBalancerId: string, targetId: string) => {
  const newWeight = parseInt(prompt('Nuevo peso del target (1-10):') || '1');
  if (newWeight > 0) {
    await loadBalancing.updateTarget(loadBalancerId, targetId, { weight: newWeight });
    trackEvent('loadbalancing_action', 'update_target', { loadBalancerId, targetId, newWeight });
    window.location.reload();
  }
};
---

<section class="loadbalancing-dashboard p-6 bg-gray-800 text-white rounded-lg shadow-lg">
  <h2 class="text-3xl font-bold mb-6 text-center text-blue-400">Load Balancing Avanzado</h2>

  <!-- Métricas principales -->
  <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
    <div class="bg-gray-700 p-4 rounded-md shadow-md text-center">
      <h3 class="text-lg font-semibold mb-2 text-blue-300">Tasa de Éxito</h3>
      <p class="text-3xl font-bold text-green-400">{successRate.toFixed(1)}%</p>
      <p class="text-sm text-gray-400">{successfulRequests} / {totalRequests} requests</p>
    </div>
    <div class="bg-gray-700 p-4 rounded-md shadow-md text-center">
      <h3 class="text-lg font-semibold mb-2 text-blue-300">Tiempo de Respuesta</h3>
      <p class="text-3xl font-bold text-blue-400">{avgResponseTime.toFixed(0)}ms</p>
      <p class="text-sm text-gray-400">Promedio</p>
    </div>
    <div class="bg-gray-700 p-4 rounded-md shadow-md text-center">
      <h3 class="text-lg font-semibold mb-2 text-blue-300">Conexiones Activas</h3>
      <p class="text-3xl font-bold text-yellow-400">{totalConnections}</p>
      <p class="text-sm text-gray-400">En todos los targets</p>
    </div>
    <div class="bg-gray-700 p-4 rounded-md shadow-md text-center">
      <h3 class="text-lg font-semibold mb-2 text-blue-300">Load Balancers</h3>
      <p class="text-3xl font-bold text-purple-400">{loadBalancers.length}</p>
      <p class="text-sm text-gray-400">Configurados</p>
    </div>
  </div>

  <!-- Load Balancers -->
  <div class="space-y-6">
    {loadBalancers.map(loadBalancer => {
      const stats = allStats.get(loadBalancer.id);
      return (
        <div class="bg-gray-700 p-6 rounded-md shadow-md">
          <div class="flex items-center justify-between mb-4">
            <h3 class="text-xl font-semibold text-blue-300">{loadBalancer.name}</h3>
            <div class="flex items-center space-x-4">
              <span class:list={[
                loadBalancer.enabled ? 'text-green-400' : 'text-red-400'
              ]}>
                {loadBalancer.enabled ? 'Habilitado' : 'Deshabilitado'}
              </span>
              <label class="relative inline-flex items-center cursor-pointer">
                <input 
                  type="checkbox" 
                  class="sr-only peer" 
                  checked={loadBalancer.enabled}
                  onchange={(e) => handleToggleLoadBalancer(loadBalancer.id, (e.target as HTMLInputElement).checked)}
                />
                <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
              </label>
            </div>
          </div>

          <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <!-- Configuración -->
            <div>
              <h4 class="text-lg font-semibold mb-3 text-white">Configuración</h4>
              <div class="space-y-2">
                <p class="text-sm">
                  <span class="text-gray-400">Tipo:</span> 
                  <span class="text-white ml-2">{loadBalancer.type.replace('_', ' ').toUpperCase()}</span>
                </p>
                <p class="text-sm">
                  <span class="text-gray-400">Health Check:</span> 
                  <span class="text-white ml-2">{loadBalancer.healthCheck.path}</span>
                </p>
                <p class="text-sm">
                  <span class="text-gray-400">Intervalo:</span> 
                  <span class="text-white ml-2">{loadBalancer.healthCheck.interval}s</span>
                </p>
                <p class="text-sm">
                  <span class="text-gray-400">Failover:</span> 
                  <span class:list={[
                    loadBalancer.failover.enabled ? 'text-green-400' : 'text-red-400'
                  ]} class="ml-2">
                    {loadBalancer.failover.enabled ? 'Habilitado' : 'Deshabilitado'}
                  </span>
                </p>
                <p class="text-sm">
                  <span class="text-gray-400">Sticky Sessions:</span> 
                  <span class:list={[
                    loadBalancer.stickySessions.enabled ? 'text-green-400' : 'text-red-400'
                  ]} class="ml-2">
                    {loadBalancer.stickySessions.enabled ? 'Habilitado' : 'Deshabilitado'}
                  </span>
                </p>
              </div>
            </div>

            <!-- Estadísticas -->
            <div>
              <h4 class="text-lg font-semibold mb-3 text-white">Estadísticas</h4>
              <div class="space-y-2">
                <p class="text-sm">
                  <span class="text-gray-400">Total Requests:</span> 
                  <span class="text-white ml-2">{stats?.totalRequests || 0}</span>
                </p>
                <p class="text-sm">
                  <span class="text-gray-400">Successful:</span> 
                  <span class="text-green-400 ml-2">{stats?.successfulRequests || 0}</span>
                </p>
                <p class="text-sm">
                  <span class="text-gray-400">Failed:</span> 
                  <span class="text-red-400 ml-2">{stats?.failedRequests || 0}</span>
                </p>
                <p class="text-sm">
                  <span class="text-gray-400">Avg Response Time:</span> 
                  <span class="text-white ml-2">{stats?.averageResponseTime?.toFixed(0) || 0}ms</span>
                </p>
                <p class="text-sm">
                  <span class="text-gray-400">Current Connections:</span> 
                  <span class="text-white ml-2">{stats?.currentConnections || 0}</span>
                </p>
              </div>
            </div>
          </div>

          <!-- Targets -->
          <div class="mt-6">
            <div class="flex items-center justify-between mb-3">
              <h4 class="text-lg font-semibold text-white">Targets</h4>
              <button 
                class="bg-green-600 hover:bg-green-700 text-white text-sm py-1 px-3 rounded transition duration-300"
                onclick={() => handleAddTarget(loadBalancer.id)}
              >
                Agregar Target
              </button>
            </div>
            <div class="space-y-2">
              {loadBalancer.targets.map(target => {
                const targetStats = stats?.targetStats[target.id];
                return (
                  <div class="flex items-center justify-between p-3 bg-gray-600 rounded-md">
                    <div class="flex-1">
                      <p class="font-medium">{target.url}</p>
                      <p class="text-sm text-gray-400">
                        Peso: {target.weight} | 
                        Salud: <span class:list={[
                          target.health === 'healthy' ? 'text-green-400' : '',
                          target.health === 'unhealthy' ? 'text-red-400' : 'text-yellow-400'
                        ]}>
                          {target.health.toUpperCase()}
                        </span> | 
                        Response Time: {target.responseTime}ms
                      </p>
                      {targetStats && (
                        <p class="text-xs text-gray-500">
                          Requests: {targetStats.requests} | 
                          Success: {targetStats.successes} | 
                          Failures: {targetStats.failures}
                        </p>
                      )}
                    </div>
                    <div class="flex items-center space-x-2">
                      <button 
                        class="bg-blue-600 hover:bg-blue-700 text-white text-sm py-1 px-2 rounded transition duration-300"
                        onclick={() => handleUpdateTarget(loadBalancer.id, target.id)}
                      >
                        Editar
                      </button>
                      <button 
                        class="bg-red-600 hover:bg-red-700 text-white text-sm py-1 px-2 rounded transition duration-300"
                        onclick={() => handleRemoveTarget(loadBalancer.id, target.id)}
                      >
                        Eliminar
                      </button>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        </div>
      );
    })}
  </div>

  <!-- Crear nuevo load balancer -->
  <div class="mt-8 bg-gray-700 p-6 rounded-md shadow-md">
    <h3 class="text-2xl font-semibold mb-4 text-blue-300">Crear Nuevo Load Balancer</h3>
    <form onsubmit={handleCreateLoadBalancer} class="space-y-4">
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label class="block text-sm font-medium text-gray-300 mb-2">Nombre</label>
          <input 
            type="text" 
            name="name" 
            required
            class="w-full p-3 rounded-md bg-gray-600 text-white border border-gray-500 focus:border-blue-500 focus:ring focus:ring-blue-500 focus:ring-opacity-50"
            placeholder="Nombre del load balancer"
          />
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-300 mb-2">Tipo</label>
          <select 
            name="type" 
            required
            class="w-full p-3 rounded-md bg-gray-600 text-white border border-gray-500 focus:border-blue-500 focus:ring focus:ring-blue-500 focus:ring-opacity-50"
          >
            <option value="round_robin">Round Robin</option>
            <option value="least_connections">Least Connections</option>
            <option value="weighted">Weighted</option>
            <option value="ip_hash">IP Hash</option>
            <option value="random">Random</option>
          </select>
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-300 mb-2">Targets (JSON)</label>
          <textarea 
            name="targets" 
            required
            rows="3"
            class="w-full p-3 rounded-md bg-gray-600 text-white border border-gray-500 focus:border-blue-500 focus:ring focus:ring-blue-500 focus:ring-opacity-50"
            placeholder='[{"url": "http://server1:3000", "weight": 1}, {"url": "http://server2:3000", "weight": 1}]'
          ></textarea>
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-300 mb-2">Health Check Path</label>
          <input 
            type="text" 
            name="healthCheckPath" 
            required
            class="w-full p-3 rounded-md bg-gray-600 text-white border border-gray-500 focus:border-blue-500 focus:ring focus:ring-blue-500 focus:ring-opacity-50"
            placeholder="/health"
          />
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-300 mb-2">Health Check Interval (segundos)</label>
          <input 
            type="number" 
            name="healthCheckInterval" 
            required
            min="1"
            class="w-full p-3 rounded-md bg-gray-600 text-white border border-gray-500 focus:border-blue-500 focus:ring focus:ring-blue-500 focus:ring-opacity-50"
            placeholder="30"
          />
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-300 mb-2">Health Check Timeout (segundos)</label>
          <input 
            type="number" 
            name="healthCheckTimeout" 
            required
            min="1"
            class="w-full p-3 rounded-md bg-gray-600 text-white border border-gray-500 focus:border-blue-500 focus:ring focus:ring-blue-500 focus:ring-opacity-50"
            placeholder="5"
          />
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-300 mb-2">Health Check Retries</label>
          <input 
            type="number" 
            name="healthCheckRetries" 
            required
            min="1"
            class="w-full p-3 rounded-md bg-gray-600 text-white border border-gray-500 focus:border-blue-500 focus:ring focus:ring-blue-500 focus:ring-opacity-50"
            placeholder="3"
          />
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-300 mb-2">Max Failures</label>
          <input 
            type="number" 
            name="maxFailures" 
            required
            min="1"
            class="w-full p-3 rounded-md bg-gray-600 text-white border border-gray-500 focus:border-blue-500 focus:ring focus:ring-blue-500 focus:ring-opacity-50"
            placeholder="3"
          />
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-300 mb-2">Recovery Time (segundos)</label>
          <input 
            type="number" 
            name="recoveryTime" 
            required
            min="1"
            class="w-full p-3 rounded-md bg-gray-600 text-white border border-gray-500 focus:border-blue-500 focus:ring focus:ring-blue-500 focus:ring-opacity-50"
            placeholder="300"
          />
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-300 mb-2">Cookie Name</label>
          <input 
            type="text" 
            name="cookieName" 
            class="w-full p-3 rounded-md bg-gray-600 text-white border border-gray-500 focus:border-blue-500 focus:ring focus:ring-blue-500 focus:ring-opacity-50"
            placeholder="lb_session"
          />
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-300 mb-2">Cookie TTL (segundos)</label>
          <input 
            type="number" 
            name="cookieTtl" 
            min="1"
            class="w-full p-3 rounded-md bg-gray-600 text-white border border-gray-500 focus:border-blue-500 focus:ring focus:ring-blue-500 focus:ring-opacity-50"
            placeholder="3600"
          />
        </div>
      </div>
      
      <div class="flex items-center space-x-4">
        <label class="flex items-center">
          <input type="checkbox" name="failoverEnabled" class="mr-2" />
          <span class="text-gray-300">Habilitar Failover</span>
        </label>
        <label class="flex items-center">
          <input type="checkbox" name="stickySessionsEnabled" class="mr-2" />
          <span class="text-gray-300">Habilitar Sticky Sessions</span>
        </label>
      </div>
      
      <button 
        type="submit" 
        class="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded transition duration-300"
      >
        Crear Load Balancer
      </button>
    </form>
  </div>
</section>

<script>
  // Script para manejar eventos del cliente
  document.addEventListener('DOMContentLoaded', () => {
    // Auto-refresh cada 30 segundos para métricas en tiempo real
    setInterval(() => {
      // Solo recargar si no hay formularios activos
      if (!document.activeElement || document.activeElement.tagName !== 'INPUT') {
        window.location.reload();
      }
    }, 30000);
  });
</script>
