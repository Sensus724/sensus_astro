---
// Componente de protección de rutas para Sensus
---

<div class="auth-guard" id="auth-guard">
  <div class="auth-guard-content">
    <div class="auth-guard-header">
      <h2>Acceso Restringido</h2>
      <p>Esta página requiere autenticación</p>
    </div>
    
    <div class="auth-guard-body">
      <div class="auth-guard-login">
        <h3>Iniciar Sesión</h3>
        <form id="auth-form" class="auth-form">
          <div class="form-group">
            <label for="email">Email</label>
            <input type="email" id="email" name="email" required>
          </div>
          
          <div class="form-group">
            <label for="password">Contraseña</label>
            <input type="password" id="password" name="password" required>
          </div>
          
          <div class="form-group">
            <label>
              <input type="checkbox" id="remember-me" name="remember">
              Recordarme
            </label>
          </div>
          
          <button type="submit" class="btn btn-primary btn-full">
            Iniciar Sesión
          </button>
        </form>
        
        <div class="auth-guard-links">
          <a href="#" id="forgot-password-link">¿Olvidaste tu contraseña?</a>
          <a href="#" id="register-link">¿No tienes cuenta? Regístrate</a>
        </div>
      </div>
      
      <div class="auth-guard-divider">
        <span>o</span>
      </div>
      
      <div class="auth-guard-social">
        <h3>Iniciar Sesión con</h3>
        <div class="social-buttons">
          <button class="btn btn-social btn-google" id="google-login">
            <svg width="20" height="20" viewBox="0 0 24 24">
              <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
              <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
              <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
              <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
            </svg>
            Google
          </button>
          
          <button class="btn btn-social btn-apple" id="apple-login">
            <svg width="20" height="20" viewBox="0 0 24 24">
              <path fill="#000000" d="M18.71 19.5c-.83 1.24-1.71 2.45-3.05 2.47-1.34.03-1.77-.79-3.29-.79-1.53 0-2 .77-3.27.82-1.31.05-2.3-1.32-3.14-2.53C4.25 17 2.94 12.45 4.7 9.39c.87-1.52 2.43-2.48 4.12-2.51 1.28-.02 2.5.87 3.29.87.78 0 2.26-1.07 3.81-.91.65.03 2.47.26 3.64 1.98-.09.06-2.17 1.28-2.15 3.81.03 3.02 2.65 4.03 2.68 4.04-.03.07-.42 1.44-1.38 2.83M13 3.5c.73-.83 1.94-1.46 2.94-1.5.13 1.17-.34 2.35-1.04 3.19-.69.85-1.83 1.51-2.95 1.42-.15-1.15.41-2.35 1.05-3.11z"/>
            </svg>
            Apple
          </button>
          
          <button class="btn btn-social btn-microsoft" id="microsoft-login">
            <svg width="20" height="20" viewBox="0 0 24 24">
              <path fill="#F25022" d="M1 1h10v10H1z"/>
              <path fill="#00A4EF" d="M13 1h10v10H13z"/>
              <path fill="#7FBA00" d="M1 13h10v10H1z"/>
              <path fill="#FFB900" d="M13 13h10v10H13z"/>
            </svg>
            Microsoft
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  import { security } from '../../utils/security';

  class AuthGuard {
    private requiredRole?: string;
    private requiredPermissions?: string[];
    private redirectUrl?: string;

    constructor(options: {
      requiredRole?: string;
      requiredPermissions?: string[];
      redirectUrl?: string;
    } = {}) {
      this.requiredRole = options.requiredRole;
      this.requiredPermissions = options.requiredPermissions;
      this.redirectUrl = options.redirectUrl;
      
      this.init();
    }

    private init(): void {
      this.setupEventListeners();
      this.checkAuthentication();
    }

    private setupEventListeners(): void {
      // Formulario de login
      const authForm = document.getElementById('auth-form') as HTMLFormElement;
      if (authForm) {
        authForm.addEventListener('submit', (e) => {
          e.preventDefault();
          this.handleLogin();
        });
      }

      // Enlaces
      document.getElementById('forgot-password-link')?.addEventListener('click', (e) => {
        e.preventDefault();
        this.handleForgotPassword();
      });

      document.getElementById('register-link')?.addEventListener('click', (e) => {
        e.preventDefault();
        this.handleRegister();
      });

      // Login social
      document.getElementById('google-login')?.addEventListener('click', () => {
        this.handleSocialLogin('google');
      });

      document.getElementById('apple-login')?.addEventListener('click', () => {
        this.handleSocialLogin('apple');
      });

      document.getElementById('microsoft-login')?.addEventListener('click', () => {
        this.handleSocialLogin('microsoft');
      });
    }

    private async checkAuthentication(): Promise<void> {
      try {
        // Verificar si hay una sesión activa
        const sessionId = this.getSessionId();
        const token = this.getToken();

        if (sessionId && token) {
          const validation = await security.validateSession(sessionId, token);
          if (validation.valid && validation.user) {
            // Verificar permisos
            const hasAccess = await this.checkAccess(validation.user);
            if (hasAccess) {
              this.hideAuthGuard();
              return;
            }
          }
        }

        this.showAuthGuard();
      } catch (error) {
        console.error('Error checking authentication:', error);
        this.showAuthGuard();
      }
    }

    private async checkAccess(user: any): Promise<boolean> {
      // Verificar rol
      if (this.requiredRole) {
        const hasRole = await security.checkRole(user.id, this.requiredRole);
        if (!hasRole) {
          this.showAccessDenied('No tienes el rol requerido para acceder a esta página');
          return false;
        }
      }

      // Verificar permisos
      if (this.requiredPermissions && this.requiredPermissions.length > 0) {
        for (const permission of this.requiredPermissions) {
          const hasPermission = await security.authorize(user.id, permission.split(':')[0], permission.split(':')[1]);
          if (!hasPermission) {
            this.showAccessDenied('No tienes los permisos requeridos para acceder a esta página');
            return false;
          }
        }
      }

      return true;
    }

    private async handleLogin(): Promise<void> {
      try {
        const form = document.getElementById('auth-form') as HTMLFormElement;
        const formData = new FormData(form);
        
        const email = formData.get('email') as string;
        const password = formData.get('password') as string;
        const remember = formData.get('remember') === 'on';

        // Validar contraseña
        const passwordValidation = await security.validatePassword(password);
        if (!passwordValidation.valid) {
          this.showError(passwordValidation.errors.join(', '));
          return;
        }

        // Autenticar
        const result = await security.authenticate(email, password, this.getCurrentIP(), this.getCurrentUserAgent());
        
        if (result.success && result.user && result.session) {
          // Guardar sesión
          this.saveSession(result.session);
          
          // Verificar acceso
          const hasAccess = await this.checkAccess(result.user);
          if (hasAccess) {
            this.hideAuthGuard();
            this.showSuccess('Inicio de sesión exitoso');
          } else {
            this.showAccessDenied('No tienes acceso a esta página');
          }
        } else {
          this.showError(result.error || 'Error de autenticación');
        }
      } catch (error) {
        console.error('Login error:', error);
        this.showError('Error interno del servidor');
      }
    }

    private async handleSocialLogin(provider: string): Promise<void> {
      try {
        // Simular login social
        const mockUser = {
          id: `social_${provider}_${Date.now()}`,
          email: `user@${provider}.com`,
          name: `User ${provider}`,
          role: 'user',
          permissions: ['content:read', 'profile:read', 'profile:update'],
          isActive: true,
          isVerified: true,
        };

        const mockSession = await security.createSession(mockUser.id, this.getCurrentIP(), this.getCurrentUserAgent());
        
        // Guardar sesión
        this.saveSession(mockSession);
        
        // Verificar acceso
        const hasAccess = await this.checkAccess(mockUser);
        if (hasAccess) {
          this.hideAuthGuard();
          this.showSuccess(`Inicio de sesión con ${provider} exitoso`);
        } else {
          this.showAccessDenied('No tienes acceso a esta página');
        }
      } catch (error) {
        console.error('Social login error:', error);
        this.showError(`Error al iniciar sesión con ${provider}`);
      }
    }

    private handleForgotPassword(): void {
      // Implementar recuperación de contraseña
      this.showInfo('Funcionalidad de recuperación de contraseña en desarrollo');
    }

    private handleRegister(): void {
      // Implementar registro
      this.showInfo('Funcionalidad de registro en desarrollo');
    }

    private saveSession(session: any): void {
      localStorage.setItem('sessionId', session.id);
      localStorage.setItem('token', session.token);
      localStorage.setItem('refreshToken', session.refreshToken);
      localStorage.setItem('expiresAt', session.expiresAt);
    }

    private getSessionId(): string | null {
      return localStorage.getItem('sessionId');
    }

    private getToken(): string | null {
      return localStorage.getItem('token');
    }

    private getRefreshToken(): string | null {
      return localStorage.getItem('refreshToken');
    }

    private getCurrentIP(): string {
      return '127.0.0.1'; // Simulado
    }

    private getCurrentUserAgent(): string {
      return navigator.userAgent || 'Unknown';
    }

    private showAuthGuard(): void {
      const authGuard = document.getElementById('auth-guard');
      if (authGuard) {
        authGuard.style.display = 'block';
      }
    }

    private hideAuthGuard(): void {
      const authGuard = document.getElementById('auth-guard');
      if (authGuard) {
        authGuard.style.display = 'none';
      }
    }

    private showError(message: string): void {
      this.showMessage(message, 'error');
    }

    private showSuccess(message: string): void {
      this.showMessage(message, 'success');
    }

    private showInfo(message: string): void {
      this.showMessage(message, 'info');
    }

    private showAccessDenied(message: string): void {
      this.showMessage(message, 'warning');
    }

    private showMessage(message: string, type: 'success' | 'error' | 'warning' | 'info'): void {
      // Crear o actualizar mensaje
      let messageEl = document.getElementById('auth-message');
      if (!messageEl) {
        messageEl = document.createElement('div');
        messageEl.id = 'auth-message';
        messageEl.className = 'auth-message';
        document.getElementById('auth-guard')?.appendChild(messageEl);
      }

      messageEl.className = `auth-message auth-message-${type}`;
      messageEl.textContent = message;

      // Auto-ocultar después de 5 segundos
      setTimeout(() => {
        if (messageEl) {
          messageEl.style.display = 'none';
        }
      }, 5000);
    }
  }

  // Inicializar AuthGuard cuando el DOM esté listo
  document.addEventListener('DOMContentLoaded', () => {
    // Obtener configuración de los atributos del elemento
    const authGuardEl = document.getElementById('auth-guard');
    if (authGuardEl) {
      const requiredRole = authGuardEl.dataset.requiredRole;
      const requiredPermissions = authGuardEl.dataset.requiredPermissions?.split(',');
      const redirectUrl = authGuardEl.dataset.redirectUrl;

      new AuthGuard({
        requiredRole,
        requiredPermissions,
        redirectUrl,
      });
    }
  });
</script>

<style>
  .auth-guard {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.8);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 9999;
  }

  .auth-guard-content {
    background: var(--color-surface);
    border-radius: var(--border-radius);
    padding: 2rem;
    max-width: 500px;
    width: 90%;
    max-height: 90vh;
    overflow-y: auto;
    box-shadow: var(--shadow-lg);
  }

  .auth-guard-header {
    text-align: center;
    margin-bottom: 2rem;
  }

  .auth-guard-header h2 {
    margin: 0 0 0.5rem 0;
    color: var(--color-text-primary);
  }

  .auth-guard-header p {
    margin: 0;
    color: var(--color-text-secondary);
  }

  .auth-guard-body {
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }

  .auth-guard-login h3,
  .auth-guard-social h3 {
    margin: 0 0 1rem 0;
    color: var(--color-text-primary);
    text-align: center;
  }

  .auth-form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .form-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .form-group label {
    color: var(--color-text-primary);
    font-weight: 500;
  }

  .form-group input[type="email"],
  .form-group input[type="password"] {
    padding: 0.75rem;
    border: 1px solid var(--color-border);
    border-radius: var(--border-radius);
    background: var(--color-surface-secondary);
    color: var(--color-text-primary);
    font-size: 1rem;
  }

  .form-group input[type="email"]:focus,
  .form-group input[type="password"]:focus {
    outline: none;
    border-color: var(--color-primary);
    box-shadow: 0 0 0 2px rgba(var(--color-primary-rgb), 0.2);
  }

  .form-group input[type="checkbox"] {
    width: 1rem;
    height: 1rem;
    margin-right: 0.5rem;
  }

  .btn-full {
    width: 100%;
  }

  .auth-guard-links {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    text-align: center;
  }

  .auth-guard-links a {
    color: var(--color-primary);
    text-decoration: none;
    font-size: 0.875rem;
  }

  .auth-guard-links a:hover {
    text-decoration: underline;
  }

  .auth-guard-divider {
    display: flex;
    align-items: center;
    text-align: center;
    color: var(--color-text-secondary);
  }

  .auth-guard-divider::before,
  .auth-guard-divider::after {
    content: '';
    flex: 1;
    height: 1px;
    background: var(--color-border);
  }

  .auth-guard-divider span {
    padding: 0 1rem;
  }

  .social-buttons {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .btn-social {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.75rem;
    padding: 0.75rem;
    border: 1px solid var(--color-border);
    border-radius: var(--border-radius);
    background: var(--color-surface-secondary);
    color: var(--color-text-primary);
    text-decoration: none;
    font-size: 1rem;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .btn-social:hover {
    background: var(--color-surface);
    border-color: var(--color-primary);
  }

  .btn-google:hover {
    background: #4285F4;
    color: white;
  }

  .btn-apple:hover {
    background: #000000;
    color: white;
  }

  .btn-microsoft:hover {
    background: #0078D4;
    color: white;
  }

  .auth-message {
    padding: 1rem;
    border-radius: var(--border-radius);
    margin-bottom: 1rem;
    font-weight: 500;
  }

  .auth-message-success {
    background: var(--color-success);
    color: white;
  }

  .auth-message-error {
    background: var(--color-error);
    color: white;
  }

  .auth-message-warning {
    background: var(--color-warning);
    color: white;
  }

  .auth-message-info {
    background: var(--color-info);
    color: white;
  }

  @media (max-width: 768px) {
    .auth-guard-content {
      padding: 1.5rem;
      width: 95%;
    }

    .auth-guard-body {
      gap: 1.5rem;
    }
  }
</style>
