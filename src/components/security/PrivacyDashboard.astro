---
// Dashboard de privacidad y protección de datos para Sensus
---

<div class="privacy-dashboard">
  <div class="dashboard-header">
    <h2>Dashboard de Privacidad</h2>
    <div class="dashboard-controls">
      <button id="refresh-privacy-btn" class="btn btn-primary">Actualizar</button>
      <button id="export-privacy-btn" class="btn btn-secondary">Exportar</button>
      <button id="privacy-settings-btn" class="btn btn-outline">Configuración</button>
    </div>
  </div>

  <div class="dashboard-grid">
    <!-- Métricas de privacidad -->
    <div class="metric-card">
      <h3>Métricas de Privacidad</h3>
      <div class="metric-grid">
        <div class="metric-item">
          <span class="metric-label">Sujetos de Datos</span>
          <span class="metric-value" id="data-subjects-count">0</span>
        </div>
        <div class="metric-item">
          <span class="metric-label">Consentimientos Activos</span>
          <span class="metric-value" id="active-consents">0</span>
        </div>
        <div class="metric-item">
          <span class="metric-label">Actividades de Procesamiento</span>
          <span class="metric-value" id="processing-activities">0</span>
        </div>
        <div class="metric-item">
          <span class="metric-label">Brechas de Datos</span>
          <span class="metric-value" id="data-breaches">0</span>
        </div>
      </div>
    </div>

    <!-- Estado de cumplimiento -->
    <div class="metric-card">
      <h3>Estado de Cumplimiento</h3>
      <div class="compliance-status" id="compliance-status">
        <div class="compliance-item">
          <span class="compliance-label">GDPR</span>
          <span class="compliance-status-badge" id="gdpr-status">-</span>
        </div>
        <div class="compliance-item">
          <span class="compliance-label">CCPA</span>
          <span class="compliance-status-badge" id="ccpa-status">-</span>
        </div>
        <div class="compliance-item">
          <span class="compliance-label">LGPD</span>
          <span class="compliance-status-badge" id="lgpd-status">-</span>
        </div>
        <div class="compliance-item">
          <span class="compliance-label">Política de Privacidad</span>
          <span class="compliance-status-badge" id="privacy-policy-status">-</span>
        </div>
      </div>
    </div>

    <!-- Gráfico de consentimientos -->
    <div class="metric-card chart-card">
      <h3>Consentimientos por Propósito</h3>
      <canvas id="consent-chart" width="400" height="200"></canvas>
    </div>

    <!-- Gráfico de actividades -->
    <div class="metric-card chart-card">
      <h3>Actividades de Procesamiento</h3>
      <canvas id="activities-chart" width="400" height="200"></canvas>
    </div>

    <!-- Solicitudes de derechos -->
    <div class="metric-card">
      <h3>Solicitudes de Derechos</h3>
      <div class="rights-requests" id="rights-requests">
        <div class="request-item">
          <span class="request-type">-</span>
          <span class="request-status">-</span>
          <span class="request-date">-</span>
        </div>
      </div>
    </div>

    <!-- Brechas de datos -->
    <div class="metric-card">
      <h3>Brechas de Datos Recientes</h3>
      <div class="breaches-list" id="breaches-list">
        <div class="breach-item">
          <span class="breach-severity">-</span>
          <span class="breach-description">No hay brechas recientes</span>
          <span class="breach-status">-</span>
        </div>
      </div>
    </div>

    <!-- Configuración de privacidad -->
    <div class="metric-card">
      <h3>Configuración de Privacidad</h3>
      <div class="privacy-config">
        <div class="config-item">
          <label>
            <input type="checkbox" id="enable-gdpr" checked>
            Cumplimiento GDPR
          </label>
        </div>
        <div class="config-item">
          <label>
            <input type="checkbox" id="enable-encryption" checked>
            Encriptación de Datos
          </label>
        </div>
        <div class="config-item">
          <label>
            <input type="checkbox" id="enable-consent-management" checked>
            Gestión de Consentimientos
          </label>
        </div>
        <div class="config-item">
          <label>
            <input type="checkbox" id="enable-data-audit" checked>
            Auditoría de Datos
          </label>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  import { dataProtection } from '../../utils/dataProtection';

  class PrivacyDashboard {
    private charts: Map<string, any> = new Map();
    private updateInterval?: number;

    constructor() {
      this.init();
    }

    private init(): void {
      this.setupEventListeners();
      this.setupCharts();
      this.startRealTimeUpdates();
    }

    private setupEventListeners(): void {
      // Botón de actualizar
      document.getElementById('refresh-privacy-btn')?.addEventListener('click', () => {
        this.updateDashboard();
      });

      // Botón de exportar
      document.getElementById('export-privacy-btn')?.addEventListener('click', () => {
        this.exportPrivacyData();
      });

      // Botón de configuración
      document.getElementById('privacy-settings-btn')?.addEventListener('click', () => {
        this.openPrivacySettings();
      });

      // Configuración de privacidad
      document.getElementById('enable-gdpr')?.addEventListener('change', (e) => {
        this.toggleGDPR((e.target as HTMLInputElement).checked);
      });

      document.getElementById('enable-encryption')?.addEventListener('change', (e) => {
        this.toggleEncryption((e.target as HTMLInputElement).checked);
      });

      document.getElementById('enable-consent-management')?.addEventListener('change', (e) => {
        this.toggleConsentManagement((e.target as HTMLInputElement).checked);
      });

      document.getElementById('enable-data-audit')?.addEventListener('change', (e) => {
        this.toggleDataAudit((e.target as HTMLInputElement).checked);
      });
    }

    private setupCharts(): void {
      // Gráfico de consentimientos
      const consentCanvas = document.getElementById('consent-chart') as HTMLCanvasElement;
      if (consentCanvas) {
        const consentChart = this.createConsentChart(consentCanvas);
        this.charts.set('consent', consentChart);
      }

      // Gráfico de actividades
      const activitiesCanvas = document.getElementById('activities-chart') as HTMLCanvasElement;
      if (activitiesCanvas) {
        const activitiesChart = this.createActivitiesChart(activitiesCanvas);
        this.charts.set('activities', activitiesChart);
      }
    }

    private createConsentChart(canvas: HTMLCanvasElement): any {
      const ctx = canvas.getContext('2d');
      if (!ctx) return null;

      return {
        canvas,
        ctx,
        data: {
          service_provision: 0,
          user_experience: 0,
          communication: 0,
          analytics: 0,
          marketing: 0,
        },
        update: (newData: any) => {
          this.data = { ...this.data, ...newData };
          this.drawConsentChart();
        },
        draw: () => {
          this.drawConsentChart();
        },
      };
    }

    private createActivitiesChart(canvas: HTMLCanvasElement): any {
      const ctx = canvas.getContext('2d');
      if (!ctx) return null;

      return {
        canvas,
        ctx,
        data: {
          user_management: 0,
          analytics: 0,
          communication: 0,
          marketing: 0,
        },
        update: (newData: any) => {
          this.data = { ...this.data, ...newData };
          this.drawActivitiesChart();
        },
        draw: () => {
          this.drawActivitiesChart();
        },
      };
    }

    private drawConsentChart(): void {
      const chart = this.charts.get('consent');
      if (!chart) return;

      const { ctx, canvas, data } = chart;
      const width = canvas.width;
      const height = canvas.height;

      // Limpiar canvas
      ctx.clearRect(0, 0, width, height);

      // Configurar colores
      const colors = {
        service_provision: '#00aa00',
        user_experience: '#4488ff',
        communication: '#ffaa00',
        analytics: '#ff6600',
        marketing: '#ff4444',
      };

      // Calcular total
      const total = Object.values(data).reduce((sum: number, value: any) => sum + value, 0);
      if (total === 0) return;

      // Dibujar gráfico de barras
      let x = 0;
      const barWidth = width / 5;
      const maxHeight = height - 40;

      Object.entries(data).forEach(([purpose, value]) => {
        const barHeight = (value / total) * maxHeight;
        const y = height - barHeight - 20;

        // Dibujar barra
        ctx.fillStyle = colors[purpose as keyof typeof colors];
        ctx.fillRect(x, y, barWidth - 10, barHeight);

        // Dibujar etiqueta
        ctx.fillStyle = '#333';
        ctx.font = '10px Arial';
        ctx.textAlign = 'center';
        ctx.fillText(purpose.replace('_', ' '), x + barWidth / 2, height - 5);
        ctx.fillText(value.toString(), x + barWidth / 2, y - 5);

        x += barWidth;
      });
    }

    private drawActivitiesChart(): void {
      const chart = this.charts.get('activities');
      if (!chart) return;

      const { ctx, canvas, data } = chart;
      const width = canvas.width;
      const height = canvas.height;

      // Limpiar canvas
      ctx.clearRect(0, 0, width, height);

      // Configurar colores
      const colors = {
        user_management: '#00aa00',
        analytics: '#4488ff',
        communication: '#ffaa00',
        marketing: '#ff4444',
      };

      // Calcular total
      const total = Object.values(data).reduce((sum: number, value: any) => sum + value, 0);
      if (total === 0) return;

      // Dibujar gráfico de barras
      let x = 0;
      const barWidth = width / 4;
      const maxHeight = height - 40;

      Object.entries(data).forEach(([activity, value]) => {
        const barHeight = (value / total) * maxHeight;
        const y = height - barHeight - 20;

        // Dibujar barra
        ctx.fillStyle = colors[activity as keyof typeof colors];
        ctx.fillRect(x, y, barWidth - 10, barHeight);

        // Dibujar etiqueta
        ctx.fillStyle = '#333';
        ctx.font = '10px Arial';
        ctx.textAlign = 'center';
        ctx.fillText(activity.replace('_', ' '), x + barWidth / 2, height - 5);
        ctx.fillText(value.toString(), x + barWidth / 2, y - 5);

        x += barWidth;
      });
    }

    private startRealTimeUpdates(): void {
      this.updateInterval = setInterval(() => {
        this.updateDashboard();
      }, 15000); // Actualizar cada 15 segundos
    }

    private async updateDashboard(): Promise<void> {
      try {
        // Actualizar métricas de privacidad
        await this.updatePrivacyMetrics();

        // Actualizar estado de cumplimiento
        await this.updateComplianceStatus();

        // Actualizar solicitudes de derechos
        await this.updateRightsRequests();

        // Actualizar brechas de datos
        await this.updateDataBreaches();

        // Actualizar gráficos
        this.updateCharts();
      } catch (error) {
        console.error('Error updating privacy dashboard:', error);
      }
    }

    private async updatePrivacyMetrics(): Promise<void> {
      const dataSubjects = dataProtection.getDataSubjects();
      const processingActivities = dataProtection.getProcessingActivities();
      const dataBreaches = dataProtection.getDataBreaches();

      const dataSubjectsCount = dataSubjects.length;
      const activeConsents = dataSubjects.reduce((total, subject) => 
        total + subject.consent.filter(c => c.granted).length, 0
      );
      const processingActivitiesCount = processingActivities.length;
      const dataBreachesCount = dataBreaches.length;

      // Actualizar UI
      this.updateElement('data-subjects-count', dataSubjectsCount.toString());
      this.updateElement('active-consents', activeConsents.toString());
      this.updateElement('processing-activities', processingActivitiesCount.toString());
      this.updateElement('data-breaches', dataBreachesCount.toString());
    }

    private async updateComplianceStatus(): Promise<void> {
      const compliance = await dataProtection.checkCompliance();
      const config = dataProtection.getConfig();

      // Actualizar estado GDPR
      this.updateElement('gdpr-status', config.privacy.enableGDPR ? 'Cumple' : 'No aplica');
      this.updateElementClass('gdpr-status', config.privacy.enableGDPR ? 'compliant' : 'not-applicable');

      // Actualizar estado CCPA
      this.updateElement('ccpa-status', config.privacy.enableCCPA ? 'Cumple' : 'No aplica');
      this.updateElementClass('ccpa-status', config.privacy.enableCCPA ? 'compliant' : 'not-applicable');

      // Actualizar estado LGPD
      this.updateElement('lgpd-status', config.privacy.enableLGPD ? 'Cumple' : 'No aplica');
      this.updateElementClass('lgpd-status', config.privacy.enableLGPD ? 'compliant' : 'not-applicable');

      // Actualizar estado de política de privacidad
      const privacyPolicies = dataProtection.getPrivacyPolicies();
      this.updateElement('privacy-policy-status', privacyPolicies.length > 0 ? 'Activa' : 'Falta');
      this.updateElementClass('privacy-policy-status', privacyPolicies.length > 0 ? 'compliant' : 'non-compliant');
    }

    private async updateRightsRequests(): Promise<void> {
      // Simular solicitudes de derechos
      const requests = [
        { type: 'Acceso', status: 'Procesada', date: '2024-01-15' },
        { type: 'Rectificación', status: 'En proceso', date: '2024-01-14' },
        { type: 'Eliminación', status: 'Procesada', date: '2024-01-13' },
        { type: 'Portabilidad', status: 'Procesada', date: '2024-01-12' },
      ];

      const requestsList = document.getElementById('rights-requests');
      if (requestsList) {
        requestsList.innerHTML = requests.map(request => `
          <div class="request-item">
            <span class="request-type">${request.type}</span>
            <span class="request-status ${request.status.toLowerCase().replace(' ', '-')}">${request.status}</span>
            <span class="request-date">${request.date}</span>
          </div>
        `).join('');
      }
    }

    private async updateDataBreaches(): Promise<void> {
      const breaches = dataProtection.getDataBreaches();
      const recentBreaches = breaches.slice(-5).reverse();

      const breachesList = document.getElementById('breaches-list');
      if (breachesList) {
        if (recentBreaches.length === 0) {
          breachesList.innerHTML = `
            <div class="breach-item">
              <span class="breach-severity">-</span>
              <span class="breach-description">No hay brechas recientes</span>
              <span class="breach-status">-</span>
            </div>
          `;
        } else {
          breachesList.innerHTML = recentBreaches.map(breach => `
            <div class="breach-item">
              <span class="breach-severity ${breach.severity}">${breach.severity}</span>
              <span class="breach-description">${breach.description}</span>
              <span class="breach-status ${breach.status}">${breach.status}</span>
            </div>
          `).join('');
        }
      }
    }

    private updateCharts(): void {
      // Actualizar gráfico de consentimientos
      const consentChart = this.charts.get('consent');
      if (consentChart) {
        consentChart.update({
          service_provision: Math.floor(Math.random() * 100),
          user_experience: Math.floor(Math.random() * 80),
          communication: Math.floor(Math.random() * 60),
          analytics: Math.floor(Math.random() * 40),
          marketing: Math.floor(Math.random() * 20),
        });
      }

      // Actualizar gráfico de actividades
      const activitiesChart = this.charts.get('activities');
      if (activitiesChart) {
        activitiesChart.update({
          user_management: Math.floor(Math.random() * 50),
          analytics: Math.floor(Math.random() * 30),
          communication: Math.floor(Math.random() * 20),
          marketing: Math.floor(Math.random() * 10),
        });
      }
    }

    private updateElement(id: string, value: string): void {
      const element = document.getElementById(id);
      if (element) {
        element.textContent = value;
      }
    }

    private updateElementClass(id: string, className: string): void {
      const element = document.getElementById(id);
      if (element) {
        element.className = `compliance-status-badge ${className}`;
      }
    }

    private toggleGDPR(enabled: boolean): void {
      console.log('GDPR toggled:', enabled);
    }

    private toggleEncryption(enabled: boolean): void {
      console.log('Encryption toggled:', enabled);
    }

    private toggleConsentManagement(enabled: boolean): void {
      console.log('Consent management toggled:', enabled);
    }

    private toggleDataAudit(enabled: boolean): void {
      console.log('Data audit toggled:', enabled);
    }

    private async exportPrivacyData(): Promise<void> {
      try {
        const data = {
          timestamp: new Date().toISOString(),
          dataSubjects: dataProtection.getDataSubjects(),
          processingActivities: dataProtection.getProcessingActivities(),
          dataBreaches: dataProtection.getDataBreaches(),
          privacyPolicies: dataProtection.getPrivacyPolicies(),
          config: dataProtection.getConfig(),
        };

        const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `privacy-data-${Date.now()}.json`;
        a.click();
        URL.revokeObjectURL(url);
      } catch (error) {
        console.error('Error exporting privacy data:', error);
      }
    }

    private openPrivacySettings(): void {
      console.log('Opening privacy settings...');
    }

    public destroy(): void {
      if (this.updateInterval) {
        clearInterval(this.updateInterval);
      }
    }
  }

  // Inicializar dashboard cuando el DOM esté listo
  document.addEventListener('DOMContentLoaded', () => {
    new PrivacyDashboard();
  });
</script>

<style>
  .privacy-dashboard {
    padding: 2rem;
    max-width: 1400px;
    margin: 0 auto;
  }

  .dashboard-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
  }

  .dashboard-controls {
    display: flex;
    gap: 1rem;
  }

  .dashboard-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
  }

  .metric-card {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: var(--border-radius);
    padding: 1.5rem;
    box-shadow: var(--shadow-sm);
  }

  .metric-card h3 {
    margin: 0 0 1rem 0;
    color: var(--color-text-primary);
  }

  .metric-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1rem;
  }

  .metric-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 1rem;
    background: var(--color-surface-secondary);
    border-radius: var(--border-radius);
  }

  .metric-label {
    font-size: 0.875rem;
    color: var(--color-text-secondary);
    margin-bottom: 0.5rem;
  }

  .metric-value {
    font-size: 1.5rem;
    font-weight: 600;
    color: var(--color-text-primary);
  }

  .chart-card {
    grid-column: span 2;
  }

  .compliance-status {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .compliance-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background: var(--color-surface-secondary);
    border-radius: var(--border-radius);
  }

  .compliance-label {
    font-weight: 500;
    color: var(--color-text-primary);
  }

  .compliance-status-badge {
    font-size: 0.75rem;
    padding: 0.25rem 0.5rem;
    border-radius: var(--border-radius);
    color: white;
    font-weight: 500;
  }

  .compliance-status-badge.compliant {
    background: var(--color-success);
  }

  .compliance-status-badge.non-compliant {
    background: var(--color-error);
  }

  .compliance-status-badge.not-applicable {
    background: var(--color-text-secondary);
  }

  .rights-requests,
  .breaches-list {
    max-height: 300px;
    overflow-y: auto;
  }

  .request-item,
  .breach-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    margin-bottom: 0.5rem;
    background: var(--color-surface-secondary);
    border-radius: var(--border-radius);
  }

  .request-type,
  .breach-description {
    font-weight: 500;
    color: var(--color-text-primary);
  }

  .request-status,
  .breach-status {
    font-size: 0.75rem;
    padding: 0.25rem 0.5rem;
    border-radius: var(--border-radius);
    color: white;
  }

  .request-status.procesada {
    background: var(--color-success);
  }

  .request-status.en-proceso {
    background: var(--color-warning);
  }

  .breach-severity {
    font-size: 0.75rem;
    padding: 0.25rem 0.5rem;
    border-radius: var(--border-radius);
    color: white;
    font-weight: 500;
  }

  .breach-severity.low {
    background: var(--color-info);
  }

  .breach-severity.medium {
    background: var(--color-warning);
  }

  .breach-severity.high {
    background: var(--color-error);
  }

  .breach-severity.critical {
    background: #8B0000;
  }

  .breach-status.discovered {
    background: var(--color-error);
  }

  .breach-status.investigating {
    background: var(--color-warning);
  }

  .breach-status.reported {
    background: var(--color-info);
  }

  .breach-status.resolved {
    background: var(--color-success);
  }

  .request-date {
    font-size: 0.75rem;
    color: var(--color-text-secondary);
  }

  .privacy-config {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1rem;
  }

  .config-item {
    display: flex;
    align-items: center;
  }

  .config-item label {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    cursor: pointer;
    color: var(--color-text-primary);
  }

  .config-item input[type="checkbox"] {
    width: 1rem;
    height: 1rem;
  }

  @media (max-width: 768px) {
    .dashboard-grid {
      grid-template-columns: 1fr;
    }

    .chart-card {
      grid-column: span 1;
    }

    .metric-grid,
    .privacy-config {
      grid-template-columns: 1fr;
    }
  }
</style>
