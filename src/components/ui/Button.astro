---
export interface Props {
  variant?: 'primary' | 'secondary' | 'outline' | 'ghost' | 'danger'
  size?: 'sm' | 'md' | 'lg'
  disabled?: boolean
  loading?: boolean
  icon?: string
  iconPosition?: 'left' | 'right'
  fullWidth?: boolean
  type?: 'button' | 'submit' | 'reset'
  href?: string
  target?: string
  rel?: string
  class?: string
}

const {
  variant = 'primary',
  size = 'md',
  disabled = false,
  loading = false,
  icon,
  iconPosition = 'left',
  fullWidth = false,
  type = 'button',
  href,
  target,
  rel,
  class: className = ''
} = Astro.props

const baseClasses = 'btn'
const variantClasses = {
  primary: 'btn-primary',
  secondary: 'btn-secondary', 
  outline: 'btn-outline',
  ghost: 'btn-ghost',
  danger: 'btn-danger'
}
const sizeClasses = {
  sm: 'btn-sm',
  md: 'btn-md',
  lg: 'btn-lg'
}

const classes = [
  baseClasses,
  variantClasses[variant],
  sizeClasses[size],
  fullWidth ? 'btn-full' : '',
  disabled ? 'btn-disabled' : '',
  loading ? 'btn-loading' : '',
  className
].filter(Boolean).join(' ')

const isLink = href !== undefined
const Tag = isLink ? 'a' : 'button'
const tagProps = isLink ? { href, target, rel } : { type, disabled }
---

<Tag class={classes} {...tagProps}>
  {loading && (
    <span class="btn-spinner" aria-hidden="true">
      <i class="fas fa-spinner fa-spin"></i>
    </span>
  )}
  
  {icon && iconPosition === 'left' && !loading && (
    <i class={`fas fa-${icon} btn-icon btn-icon-left`} aria-hidden="true"></i>
  )}
  
  <span class="btn-text">
    <slot />
  </span>
  
  {icon && iconPosition === 'right' && !loading && (
    <i class={`fas fa-${icon} btn-icon btn-icon-right`} aria-hidden="true"></i>
  )}
</Tag>

<style>
  .btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    font-family: inherit;
    font-weight: 500;
    text-decoration: none;
    border: 1px solid transparent;
    border-radius: 0.5rem;
    cursor: pointer;
    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
    white-space: nowrap;
    user-select: none;
    outline: none;
  }

  .btn:focus {
    outline: 2px solid var(--primary-300);
    outline-offset: 2px;
  }

  .btn:disabled {
    cursor: not-allowed;
    opacity: 0.6;
  }

  /* Tama√±os */
  .btn-sm {
    padding: 0.5rem 0.75rem;
    font-size: 0.875rem;
    line-height: 1.25rem;
  }

  .btn-md {
    padding: 0.75rem 1rem;
    font-size: 1rem;
    line-height: 1.5rem;
  }

  .btn-lg {
    padding: 1rem 1.5rem;
    font-size: 1.125rem;
    line-height: 1.75rem;
  }

  /* Variantes */
  .btn-primary {
    background: var(--primary-500);
    color: white;
    border-color: var(--primary-500);
  }

  .btn-primary:hover:not(:disabled) {
    background: var(--primary-600);
    border-color: var(--primary-600);
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(37, 99, 235, 0.3);
  }

  .btn-primary:active:not(:disabled) {
    transform: translateY(0);
    box-shadow: 0 2px 4px rgba(37, 99, 235, 0.3);
  }

  .btn-secondary {
    background: var(--secondary-500);
    color: white;
    border-color: var(--secondary-500);
  }

  .btn-secondary:hover:not(:disabled) {
    background: var(--secondary-600);
    border-color: var(--secondary-600);
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(107, 114, 128, 0.3);
  }

  .btn-outline {
    background: transparent;
    color: var(--primary-500);
    border-color: var(--primary-500);
  }

  .btn-outline:hover:not(:disabled) {
    background: var(--primary-500);
    color: white;
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(37, 99, 235, 0.3);
  }

  .btn-ghost {
    background: transparent;
    color: var(--gray-600);
    border-color: transparent;
  }

  .btn-ghost:hover:not(:disabled) {
    background: var(--gray-100);
    color: var(--gray-900);
  }

  .btn-danger {
    background: var(--red-500);
    color: white;
    border-color: var(--red-500);
  }

  .btn-danger:hover:not(:disabled) {
    background: var(--red-600);
    border-color: var(--red-600);
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(239, 68, 68, 0.3);
  }

  /* Ancho completo */
  .btn-full {
    width: 100%;
  }

  /* Loading state */
  .btn-loading {
    pointer-events: none;
  }

  .btn-loading .btn-text {
    opacity: 0.7;
  }

  .btn-spinner {
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    font-size: 1rem;
  }

  .btn-loading .btn-icon {
    opacity: 0;
  }

  /* Iconos */
  .btn-icon {
    font-size: 0.875em;
  }

  .btn-icon-left {
    margin-right: 0.25rem;
  }

  .btn-icon-right {
    margin-left: 0.25rem;
  }

  /* Tema oscuro */
  [data-theme="dark"] .btn-ghost:hover:not(:disabled) {
    background: var(--gray-700);
    color: var(--gray-100);
  }

  /* Responsive */
  @media (max-width: 640px) {
    .btn-lg {
      padding: 0.875rem 1.25rem;
      font-size: 1rem;
    }
  }

  /* Estados especiales */
  .btn-success {
    background: var(--green-500);
    color: white;
    border-color: var(--green-500);
  }

  .btn-success:hover:not(:disabled) {
    background: var(--green-600);
    border-color: var(--green-600);
  }

  .btn-warning {
    background: var(--yellow-500);
    color: white;
    border-color: var(--yellow-500);
  }

  .btn-warning:hover:not(:disabled) {
    background: var(--yellow-600);
    border-color: var(--yellow-600);
  }
</style>